LetExp([
  VarDec(dummy_input,true,NONE,
  | StringExp("(letrec ((collatz (lambda (v) (progn (print v) (ifb (= v 1) (progn (newline) 1) (progn (print \" -> \") (ifb (= v (* (/ v 2) 2)) (collatz (/ v 2)) (collatz (+ (* v 3) 1))))))))) (collatz 117))\n (progn (print \"bye bye\") (newline))\n (progn (print \"exiting...\") (newline) (exit))")),
  VarDec(dummy_input_idx,true,NONE,
  | IntExp(0)),
  VarDec(dummy_input_size,true,NONE,
  | CallExp(size,[
  |   VarExp(
  |   | SimpleVar(dummy_input))])),
  VarDec(use_dummy,true,NONE,
  | IntExp(0)),
  VarDec(lib_input,true,NONE,
  | StringExp("(progn ")),
  VarDec(lib_input,true,NONE,
  | CallExp(concat,[
  |   VarExp(
  |   | SimpleVar(lib_input)),
  |   StringExp("(define cadr (lambda (v) (car (cdr v))))")])),
  VarDec(lib_input,true,NONE,
  | CallExp(concat,[
  |   VarExp(
  |   | SimpleVar(lib_input)),
  |   StringExp("(define append (lambda (a b)                 (letrec ((aux (lambda (firsts)                                 (ifb (nil? firsts)                                      b                                      (cons (car firsts) (aux (cdr firsts)))))))                   (ifb (andb (list? a) (list? b))                        (aux a)                        (progn (print \"Invalid argument to append '\" a \"' and '\" b \"'\n\")                               nil)))))")])),
  VarDec(lib_input,true,NONE,
  | CallExp(concat,[
  |   VarExp(
  |   | SimpleVar(lib_input)),
  |   StringExp("(define nth (letrec ((nth (lambda (n ls) (ifb (= n 0) (car ls) (nth (- n 1) (cdr ls)))))) nth))")])),
  VarDec(lib_input,true,NONE,
  | CallExp(concat,[
  |   VarExp(
  |   | SimpleVar(lib_input)),
  |   StringExp("(print \"Standard library loaded\n\"))\n")])),
  VarDec(lib_input_idx,true,NONE,
  | IntExp(0)),
  VarDec(lib_input_size,true,NONE,
  | CallExp(size,[
  |   VarExp(
  |   | SimpleVar(lib_input))])),
  VarDec(is_reading_lib,true,NONE,
  | IntExp(1)),
  FunctionDec[
  | (read_char,[],
  |   SOME(string),
  |   IfExp(
  |   | VarExp(
  |   |   SimpleVar(is_reading_lib)),
  |   | IfExp(
  |   |   OpExp(EqOp,
  |   |   | VarExp(
  |   |   |   SimpleVar(lib_input_idx)),
  |   |   | VarExp(
  |   |   |   SimpleVar(lib_input_size))),
  |   |   SeqExp[
  |   |   | AssignExp(
  |   |   |   SimpleVar(is_reading_lib),
  |   |   |   IntExp(0)),
  |   |   | CallExp(read_char,[])],
  |   |   LetExp([
  |   |   | VarDec(res,true,NONE,
  |   |   |   CallExp(substring,[
  |   |   |   | VarExp(
  |   |   |   |   SimpleVar(lib_input)),
  |   |   |   | VarExp(
  |   |   |   |   SimpleVar(lib_input_idx)),
  |   |   |   | IntExp(1)]))],
  |   |   | SeqExp[
  |   |   |   AssignExp(
  |   |   |   | SimpleVar(lib_input_idx),
  |   |   |   | OpExp(PlusOp,
  |   |   |   |   VarExp(
  |   |   |   |   | SimpleVar(lib_input_idx)),
  |   |   |   |   IntExp(1))),
  |   |   |   VarExp(
  |   |   |   | SimpleVar(res))])),
  |   | IfExp(
  |   |   VarExp(
  |   |   | SimpleVar(use_dummy)),
  |   |   IfExp(
  |   |   | OpExp(EqOp,
  |   |   |   VarExp(
  |   |   |   | SimpleVar(dummy_input_idx)),
  |   |   |   VarExp(
  |   |   |   | SimpleVar(dummy_input_size))),
  |   |   | StringExp(""),
  |   |   | LetExp([
  |   |   |   VarDec(res,true,NONE,
  |   |   |   | CallExp(substring,[
  |   |   |   |   VarExp(
  |   |   |   |   | SimpleVar(dummy_input)),
  |   |   |   |   VarExp(
  |   |   |   |   | SimpleVar(dummy_input_idx)),
  |   |   |   |   IntExp(1)]))],
  |   |   |   SeqExp[
  |   |   |   | AssignExp(
  |   |   |   |   SimpleVar(dummy_input_idx),
  |   |   |   |   OpExp(PlusOp,
  |   |   |   |   | VarExp(
  |   |   |   |   |   SimpleVar(dummy_input_idx)),
  |   |   |   |   | IntExp(1))),
  |   |   |   | VarExp(
  |   |   |   |   SimpleVar(res))])),
  |   |   CallExp(getchar,[])))),
  | (i2s,[
  |   (i,true,int)],
  |   SOME(string),
  |   IfExp(
  |   | OpExp(EqOp,
  |   |   VarExp(
  |   |   | SimpleVar(i)),
  |   |   IntExp(0)),
  |   | StringExp("0"),
  |   | IfExp(
  |   |   OpExp(LtOp,
  |   |   | VarExp(
  |   |   |   SimpleVar(i)),
  |   |   | IntExp(0)),
  |   |   CallExp(concat,[
  |   |   | StringExp("-"),
  |   |   | CallExp(i2s,[
  |   |   |   OpExp(MinusOp,
  |   |   |   | IntExp(0),
  |   |   |   | VarExp(
  |   |   |   |   SimpleVar(i)))])]),
  |   |   IfExp(
  |   |   | OpExp(LtOp,
  |   |   |   VarExp(
  |   |   |   | SimpleVar(i)),
  |   |   |   IntExp(10)),
  |   |   | CallExp(chr,[
  |   |   |   OpExp(PlusOp,
  |   |   |   | CallExp(ord,[
  |   |   |   |   StringExp("0")]),
  |   |   |   | VarExp(
  |   |   |   |   SimpleVar(i)))]),
  |   |   | CallExp(concat,[
  |   |   |   CallExp(i2s,[
  |   |   |   | OpExp(DivideOp,
  |   |   |   |   VarExp(
  |   |   |   |   | SimpleVar(i)),
  |   |   |   |   IntExp(10))]),
  |   |   |   CallExp(chr,[
  |   |   |   | OpExp(MinusOp,
  |   |   |   |   OpExp(PlusOp,
  |   |   |   |   | CallExp(ord,[
  |   |   |   |   |   StringExp("0")]),
  |   |   |   |   | VarExp(
  |   |   |   |   |   SimpleVar(i))),
  |   |   |   |   OpExp(TimesOp,
  |   |   |   |   | SeqExp[
  |   |   |   |   |   OpExp(DivideOp,
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   SimpleVar(i)),
  |   |   |   |   |   | IntExp(10))],
  |   |   |   |   | IntExp(10)))])]))))),
  | (c2i,[
  |   (char,true,string)],
  |   SOME(int),
  |   OpExp(MinusOp,
  |   | CallExp(ord,[
  |   |   VarExp(
  |   |   | SimpleVar(char))]),
  |   | CallExp(ord,[
  |   |   StringExp("0")]))),
  | (s2i,[
  |   (s,true,string)],
  |   SOME(int),
  |   IfExp(
  |   | OpExp(EqOp,
  |   |   VarExp(
  |   |   | SimpleVar(s)),
  |   |   StringExp("")),
  |   | SeqExp[
  |   |   CallExp(print,[
  |   |   | StringExp("Error in s2i. Cannot extract int from '")]),
  |   |   CallExp(print,[
  |   |   | VarExp(
  |   |   |   SimpleVar(s))]),
  |   |   CallExp(print,[
  |   |   | StringExp("'\n")]),
  |   |   IntExp(0)],
  |   | LetExp([
  |   |   VarDec(len,true,NONE,
  |   |   | CallExp(size,[
  |   |   |   VarExp(
  |   |   |   | SimpleVar(s))])),
  |   |   VarDec(s_proper,true,NONE,
  |   |   | VarExp(
  |   |   |   SimpleVar(s))),
  |   |   VarDec(sign,true,NONE,
  |   |   | IfExp(
  |   |   |   OpExp(EqOp,
  |   |   |   | CallExp(substring,[
  |   |   |   |   VarExp(
  |   |   |   |   | SimpleVar(s)),
  |   |   |   |   IntExp(0),
  |   |   |   |   IntExp(1)]),
  |   |   |   | StringExp("-")),
  |   |   |   SeqExp[
  |   |   |   | AssignExp(
  |   |   |   |   SimpleVar(s_proper),
  |   |   |   |   CallExp(substring,[
  |   |   |   |   | VarExp(
  |   |   |   |   |   SimpleVar(s)),
  |   |   |   |   | IntExp(1),
  |   |   |   |   | OpExp(MinusOp,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | SimpleVar(len)),
  |   |   |   |   |   IntExp(1))])),
  |   |   |   | OpExp(MinusOp,
  |   |   |   |   IntExp(0),
  |   |   |   |   IntExp(1))],
  |   |   |   IfExp(
  |   |   |   | OpExp(EqOp,
  |   |   |   |   CallExp(substring,[
  |   |   |   |   | VarExp(
  |   |   |   |   |   SimpleVar(s)),
  |   |   |   |   | IntExp(0),
  |   |   |   |   | IntExp(1)]),
  |   |   |   |   StringExp("+")),
  |   |   |   | SeqExp[
  |   |   |   |   AssignExp(
  |   |   |   |   | SimpleVar(s_proper),
  |   |   |   |   | CallExp(substring,[
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | SimpleVar(s)),
  |   |   |   |   |   IntExp(1),
  |   |   |   |   |   OpExp(MinusOp,
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   SimpleVar(len)),
  |   |   |   |   |   | IntExp(1))])),
  |   |   |   |   IntExp(1)],
  |   |   |   | IntExp(1)))),
  |   |   VarDec(len_proper,true,NONE,
  |   |   | CallExp(size,[
  |   |   |   VarExp(
  |   |   |   | SimpleVar(s_proper))])),
  |   |   VarDec(res,true,NONE,
  |   |   | IntExp(0))],
  |   |   SeqExp[
  |   |   | ForExp(idx,true,
  |   |   |   IntExp(0),
  |   |   |   OpExp(MinusOp,
  |   |   |   | VarExp(
  |   |   |   |   SimpleVar(len_proper)),
  |   |   |   | IntExp(1)),
  |   |   |   LetExp([
  |   |   |   | VarDec(curr_digit,true,NONE,
  |   |   |   |   CallExp(c2i,[
  |   |   |   |   | CallExp(substring,[
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | SimpleVar(s_proper)),
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | SimpleVar(idx)),
  |   |   |   |   |   IntExp(1)])]))],
  |   |   |   | SeqExp[
  |   |   |   |   IfExp(
  |   |   |   |   | IfExp(
  |   |   |   |   |   OpExp(LeOp,
  |   |   |   |   |   | IntExp(0),
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   SimpleVar(curr_digit))),
  |   |   |   |   |   OpExp(LeOp,
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   SimpleVar(curr_digit)),
  |   |   |   |   |   | IntExp(9)),
  |   |   |   |   |   IntExp(0)),
  |   |   |   |   | AssignExp(
  |   |   |   |   |   SimpleVar(res),
  |   |   |   |   |   OpExp(PlusOp,
  |   |   |   |   |   | OpExp(TimesOp,
  |   |   |   |   |   |   IntExp(10),
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | SimpleVar(res))),
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   SimpleVar(curr_digit)))),
  |   |   |   |   | SeqExp[
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | StringExp("Error in s2i. Illegal character in string: '")]),
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   SimpleVar(s))]),
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | StringExp("'\n")])])])),
  |   |   | VarExp(
  |   |   |   SimpleVar(res))]))),
  | (wrap_string,[
  |   (s,true,string)],
  |   SOME(string),
  |   CallExp(concat,[
  |   | StringExp("\""),
  |   | CallExp(concat,[
  |   |   VarExp(
  |   |   | SimpleVar(s)),
  |   |   StringExp("\"")])])),
  | (bool2s,[
  |   (b,true,int)],
  |   SOME(string),
  |   IfExp(
  |   | VarExp(
  |   |   SimpleVar(b)),
  |   | StringExp("#t"),
  |   | StringExp("#f")))],
  TypeDec[
  | (token,
  |   RecordTy[
  |   | (i,true,int),
  |   | (s,true,string),
  |   | (typ,true,string)])],
  FunctionDec[
  | (mk_int_token,[
  |   (v,true,int)],
  |   SOME(token),
  |   RecordExp(token,[
  |   | (i,
  |   |   VarExp(
  |   |   | SimpleVar(v))),
  |   | (s,
  |   |   StringExp("")),
  |   | (typ,
  |   |   StringExp("int"))])),
  | (mk_id_token,[
  |   (id,true,string)],
  |   SOME(token),
  |   RecordExp(token,[
  |   | (i,
  |   |   IntExp(0)),
  |   | (s,
  |   |   VarExp(
  |   |   | SimpleVar(id))),
  |   | (typ,
  |   |   StringExp("id"))])),
  | (mk_str_token,[
  |   (str,true,string)],
  |   SOME(token),
  |   RecordExp(token,[
  |   | (i,
  |   |   IntExp(0)),
  |   | (s,
  |   |   VarExp(
  |   |   | SimpleVar(str))),
  |   | (typ,
  |   |   StringExp("str"))])),
  | (mk_bool_token,[
  |   (b,true,int)],
  |   SOME(token),
  |   RecordExp(token,[
  |   | (i,
  |   |   VarExp(
  |   |   | SimpleVar(b))),
  |   | (s,
  |   |   StringExp("")),
  |   | (typ,
  |   |   StringExp("bool"))])),
  | (int_token_p,[
  |   (t,true,token)],
  |   SOME(int),
  |   OpExp(EqOp,
  |   | VarExp(
  |   |   FieldVar(
  |   |   | SimpleVar(t),
  |   |   | typ)),
  |   | StringExp("int"))),
  | (str_token_p,[
  |   (t,true,token)],
  |   SOME(int),
  |   OpExp(EqOp,
  |   | VarExp(
  |   |   FieldVar(
  |   |   | SimpleVar(t),
  |   |   | typ)),
  |   | StringExp("str"))),
  | (id_token_p,[
  |   (t,true,token)],
  |   SOME(int),
  |   OpExp(EqOp,
  |   | VarExp(
  |   |   FieldVar(
  |   |   | SimpleVar(t),
  |   |   | typ)),
  |   | StringExp("id"))),
  | (bool_token_p,[
  |   (t,true,token)],
  |   SOME(int),
  |   OpExp(EqOp,
  |   | VarExp(
  |   |   FieldVar(
  |   |   | SimpleVar(t),
  |   |   | typ)),
  |   | StringExp("bool"))),
  | (get_int_token,[
  |   (t,true,token)],
  |   SOME(int),
  |   VarExp(
  |   | FieldVar(
  |   |   SimpleVar(t),
  |   |   i))),
  | (get_id_token,[
  |   (t,true,token)],
  |   SOME(string),
  |   VarExp(
  |   | FieldVar(
  |   |   SimpleVar(t),
  |   |   s))),
  | (get_str_token,[
  |   (t,true,token)],
  |   SOME(string),
  |   VarExp(
  |   | FieldVar(
  |   |   SimpleVar(t),
  |   |   s))),
  | (get_bool_token,[
  |   (t,true,token)],
  |   SOME(int),
  |   VarExp(
  |   | FieldVar(
  |   |   SimpleVar(t),
  |   |   i)))],
  VarDec(LPAREN,true,NONE,
  | RecordExp(token,[
  |   (i,
  |   | IntExp(0)),
  |   (s,
  |   | StringExp("")),
  |   (typ,
  |   | StringExp("syntax"))])),
  VarDec(RPAREN,true,NONE,
  | RecordExp(token,[
  |   (i,
  |   | IntExp(0)),
  |   (s,
  |   | StringExp("")),
  |   (typ,
  |   | StringExp("syntax"))])),
  FunctionDec[
  | (token2s,[
  |   (t,true,token)],
  |   SOME(string),
  |   IfExp(
  |   | OpExp(EqOp,
  |   |   VarExp(
  |   |   | SimpleVar(t)),
  |   |   VarExp(
  |   |   | SimpleVar(LPAREN))),
  |   | StringExp("("),
  |   | IfExp(
  |   |   OpExp(EqOp,
  |   |   | VarExp(
  |   |   |   SimpleVar(t)),
  |   |   | VarExp(
  |   |   |   SimpleVar(RPAREN))),
  |   |   StringExp(")"),
  |   |   IfExp(
  |   |   | CallExp(int_token_p,[
  |   |   |   VarExp(
  |   |   |   | SimpleVar(t))]),
  |   |   | CallExp(i2s,[
  |   |   |   CallExp(get_int_token,[
  |   |   |   | VarExp(
  |   |   |   |   SimpleVar(t))])]),
  |   |   | IfExp(
  |   |   |   CallExp(id_token_p,[
  |   |   |   | VarExp(
  |   |   |   |   SimpleVar(t))]),
  |   |   |   CallExp(get_id_token,[
  |   |   |   | VarExp(
  |   |   |   |   SimpleVar(t))]),
  |   |   |   IfExp(
  |   |   |   | CallExp(str_token_p,[
  |   |   |   |   VarExp(
  |   |   |   |   | SimpleVar(t))]),
  |   |   |   | CallExp(wrap_string,[
  |   |   |   |   CallExp(get_str_token,[
  |   |   |   |   | VarExp(
  |   |   |   |   |   SimpleVar(t))])]),
  |   |   |   | IfExp(
  |   |   |   |   CallExp(bool_token_p,[
  |   |   |   |   | VarExp(
  |   |   |   |   |   SimpleVar(t))]),
  |   |   |   |   CallExp(bool2s,[
  |   |   |   |   | CallExp(get_bool_token,[
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | SimpleVar(t))])]),
  |   |   |   |   SeqExp[
  |   |   |   |   | CallExp(print,[
  |   |   |   |   |   StringExp("Unknown token in token2s. It has type '")]),
  |   |   |   |   | CallExp(print,[
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   SimpleVar(t),
  |   |   |   |   |   |   typ))]),
  |   |   |   |   | CallExp(print,[
  |   |   |   |   |   StringExp("'.\n")]),
  |   |   |   |   | StringExp("")])))))))],
  TypeDec[
  | (Int,
  |   RecordTy[
  |   | (v,true,int)]),
  | (String,
  |   RecordTy[
  |   | (v,true,string)])],
  VarDec(whitespace,true,NONE,
  | StringExp(" \n\t")),
  VarDec(digit,true,NONE,
  | StringExp("0123456789")),
  VarDec(syntax_char,true,NONE,
  | StringExp("()")),
  VarDec(uminus_char,true,NONE,
  | StringExp("-")),
  VarDec(string_indicator,true,NONE,
  | StringExp("\"")),
  VarDec(string_escape_indicator,true,NONE,
  | StringExp("\\")),
  VarDec(bool_indicator,true,NONE,
  | StringExp("#")),
  VarDec(bool_char,true,NONE,
  | StringExp("tf")),
  VarDec(id_char,true,NONE,
  | CallExp(concat,[
  |   VarExp(
  |   | SimpleVar(digit)),
  |   StringExp("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz+-*/^_=<>%$@&|~!?")])),
  FunctionDec[
  | (contains,[
  |   (char_class,true,string),
  |   (char,true,string)],
  |   SOME(int),
  |   LetExp([
  |   | VarDec(res,true,NONE,
  |   |   IntExp(0))],
  |   | SeqExp[
  |   |   ForExp(idx,true,
  |   |   | IntExp(0),
  |   |   | OpExp(MinusOp,
  |   |   |   CallExp(size,[
  |   |   |   | VarExp(
  |   |   |   |   SimpleVar(char_class))]),
  |   |   |   IntExp(1)),
  |   |   | IfExp(
  |   |   |   OpExp(EqOp,
  |   |   |   | VarExp(
  |   |   |   |   SimpleVar(char)),
  |   |   |   | CallExp(substring,[
  |   |   |   |   VarExp(
  |   |   |   |   | SimpleVar(char_class)),
  |   |   |   |   VarExp(
  |   |   |   |   | SimpleVar(idx)),
  |   |   |   |   IntExp(1)])),
  |   |   |   SeqExp[
  |   |   |   | AssignExp(
  |   |   |   |   SimpleVar(res),
  |   |   |   |   IntExp(1)),
  |   |   |   | BreakExp])),
  |   |   VarExp(
  |   |   | SimpleVar(res))]))],
  VarDec(prev_char_,true,NONE,
  | StringExp("")),
  VarDec(curr_char_,true,NONE,
  | StringExp("")),
  VarDec(next_char_,true,NONE,
  | StringExp("")),
  FunctionDec[
  | (prev_char,[],
  |   SOME(string),
  |   VarExp(
  |   | SimpleVar(prev_char_))),
  | (curr_char,[],
  |   SOME(string),
  |   VarExp(
  |   | SimpleVar(curr_char_))),
  | (next_char,[],
  |   SOME(string),
  |   IfExp(
  |   | OpExp(NeqOp,
  |   |   VarExp(
  |   |   | SimpleVar(next_char_)),
  |   |   StringExp("")),
  |   | VarExp(
  |   |   SimpleVar(next_char_)),
  |   | IfExp(
  |   |   OpExp(EqOp,
  |   |   | VarExp(
  |   |   |   SimpleVar(curr_char_)),
  |   |   | StringExp("")),
  |   |   StringExp(""),
  |   |   SeqExp[
  |   |   | AssignExp(
  |   |   |   SimpleVar(next_char_),
  |   |   |   CallExp(read_char,[])),
  |   |   | VarExp(
  |   |   |   SimpleVar(next_char_))]))),
  | (advance_reader,[],
  |   NONE,
  |   SeqExp[
  |   | AssignExp(
  |   |   SimpleVar(prev_char_),
  |   |   VarExp(
  |   |   | SimpleVar(curr_char_))),
  |   | IfExp(
  |   |   OpExp(NeqOp,
  |   |   | VarExp(
  |   |   |   SimpleVar(next_char_)),
  |   |   | StringExp("")),
  |   |   AssignExp(
  |   |   | SimpleVar(curr_char_),
  |   |   | VarExp(
  |   |   |   SimpleVar(next_char_))),
  |   |   AssignExp(
  |   |   | SimpleVar(curr_char_),
  |   |   | CallExp(read_char,[]))),
  |   | AssignExp(
  |   |   SimpleVar(next_char_),
  |   |   StringExp(""))]),
  | (init_repl,[],
  |   NONE,
  |   CallExp(advance_reader,[])),
  | (looking_at,[
  |   (char_class,true,string)],
  |   SOME(int),
  |   CallExp(contains,[
  |   | VarExp(
  |   |   SimpleVar(char_class)),
  |   | CallExp(curr_char,[])])),
  | (looking_at_char_followed_by,[
  |   (char,true,string),
  |   (char_class,true,string)],
  |   SOME(int),
  |   IfExp(
  |   | OpExp(EqOp,
  |   |   CallExp(curr_char,[]),
  |   |   VarExp(
  |   |   | SimpleVar(char))),
  |   | CallExp(contains,[
  |   |   VarExp(
  |   |   | SimpleVar(char_class)),
  |   |   CallExp(next_char,[])]),
  |   | IntExp(0))),
  | (eof_p,[],
  |   SOME(int),
  |   IfExp(
  |   | OpExp(EqOp,
  |   |   CallExp(curr_char,[]),
  |   |   StringExp("")),
  |   | OpExp(EqOp,
  |   |   CallExp(next_char,[]),
  |   |   StringExp("")),
  |   | IntExp(0))),
  | (parse_int_token,[
  |   (sign,true,int)],
  |   SOME(token),
  |   LetExp([
  |   | VarDec(res,true,NONE,
  |   |   IntExp(0))],
  |   | SeqExp[
  |   |   WhileExp(
  |   |   | CallExp(looking_at,[
  |   |   |   VarExp(
  |   |   |   | SimpleVar(digit))]),
  |   |   | SeqExp[
  |   |   |   AssignExp(
  |   |   |   | SimpleVar(res),
  |   |   |   | OpExp(PlusOp,
  |   |   |   |   OpExp(TimesOp,
  |   |   |   |   | IntExp(10),
  |   |   |   |   | VarExp(
  |   |   |   |   |   SimpleVar(res))),
  |   |   |   |   CallExp(c2i,[
  |   |   |   |   | CallExp(curr_char,[])]))),
  |   |   |   CallExp(advance_reader,[])]),
  |   |   CallExp(mk_int_token,[
  |   |   | OpExp(TimesOp,
  |   |   |   VarExp(
  |   |   |   | SimpleVar(sign)),
  |   |   |   VarExp(
  |   |   |   | SimpleVar(res)))])])),
  | (parse_syntax_token,[],
  |   SOME(token),
  |   SeqExp[
  |   | CallExp(advance_reader,[]),
  |   | IfExp(
  |   |   OpExp(EqOp,
  |   |   | CallExp(prev_char,[]),
  |   |   | StringExp("(")),
  |   |   VarExp(
  |   |   | SimpleVar(LPAREN)),
  |   |   IfExp(
  |   |   | OpExp(EqOp,
  |   |   |   CallExp(prev_char,[]),
  |   |   |   StringExp(")")),
  |   |   | VarExp(
  |   |   |   SimpleVar(RPAREN)),
  |   |   | SeqExp[
  |   |   |   CallExp(print,[
  |   |   |   | StringExp("Unknown syntax token: '")]),
  |   |   |   CallExp(print,[
  |   |   |   | CallExp(prev_char,[])]),
  |   |   |   CallExp(print,[
  |   |   |   | StringExp("'\n")]),
  |   |   |   NilExp]))]),
  | (parse_id_token,[],
  |   SOME(token),
  |   LetExp([
  |   | VarDec(id,true,NONE,
  |   |   StringExp(""))],
  |   | SeqExp[
  |   |   WhileExp(
  |   |   | CallExp(looking_at,[
  |   |   |   VarExp(
  |   |   |   | SimpleVar(id_char))]),
  |   |   | SeqExp[
  |   |   |   AssignExp(
  |   |   |   | SimpleVar(id),
  |   |   |   | CallExp(concat,[
  |   |   |   |   VarExp(
  |   |   |   |   | SimpleVar(id)),
  |   |   |   |   CallExp(curr_char,[])])),
  |   |   |   CallExp(advance_reader,[])]),
  |   |   CallExp(mk_id_token,[
  |   |   | VarExp(
  |   |   |   SimpleVar(id))])])),
  | (parse_bool_token,[],
  |   SOME(token),
  |   LetExp([
  |   | VarDec(bool_char,true,NONE,
  |   |   CallExp(curr_char,[]))],
  |   | SeqExp[
  |   |   CallExp(advance_reader,[]),
  |   |   IfExp(
  |   |   | OpExp(EqOp,
  |   |   |   VarExp(
  |   |   |   | SimpleVar(bool_char)),
  |   |   |   StringExp("t")),
  |   |   | CallExp(mk_bool_token,[
  |   |   |   IntExp(1)]),
  |   |   | IfExp(
  |   |   |   OpExp(EqOp,
  |   |   |   | VarExp(
  |   |   |   |   SimpleVar(bool_char)),
  |   |   |   | StringExp("f")),
  |   |   |   CallExp(mk_bool_token,[
  |   |   |   | IntExp(0)]),
  |   |   |   SeqExp[
  |   |   |   | CallExp(print,[
  |   |   |   |   StringExp("Unknown char used for bool literal: '")]),
  |   |   |   | CallExp(print,[
  |   |   |   |   CallExp(curr_char,[])]),
  |   |   |   | CallExp(print,[
  |   |   |   |   StringExp("'\n")]),
  |   |   |   | NilExp]))])),
  | (parse_string_escape,[],
  |   SOME(string),
  |   IfExp(
  |   | OpExp(EqOp,
  |   |   CallExp(curr_char,[]),
  |   |   StringExp("n")),
  |   | SeqExp[
  |   |   CallExp(advance_reader,[]),
  |   |   StringExp("\n")],
  |   | IfExp(
  |   |   OpExp(EqOp,
  |   |   | CallExp(curr_char,[]),
  |   |   | StringExp("t")),
  |   |   SeqExp[
  |   |   | CallExp(advance_reader,[]),
  |   |   | StringExp("\t")],
  |   |   IfExp(
  |   |   | OpExp(EqOp,
  |   |   |   CallExp(curr_char,[]),
  |   |   |   StringExp("\"")),
  |   |   | SeqExp[
  |   |   |   CallExp(advance_reader,[]),
  |   |   |   StringExp("\"")],
  |   |   | IfExp(
  |   |   |   OpExp(EqOp,
  |   |   |   | CallExp(curr_char,[]),
  |   |   |   | StringExp("\\")),
  |   |   |   SeqExp[
  |   |   |   | CallExp(advance_reader,[]),
  |   |   |   | StringExp("\\")],
  |   |   |   IfExp(
  |   |   |   | CallExp(looking_at,[
  |   |   |   |   VarExp(
  |   |   |   |   | SimpleVar(digit))]),
  |   |   |   | LetExp([
  |   |   |   |   VarDec(d0,true,NONE,
  |   |   |   |   | CallExp(c2i,[
  |   |   |   |   |   CallExp(curr_char,[])]))],
  |   |   |   |   SeqExp[
  |   |   |   |   | CallExp(advance_reader,[]),
  |   |   |   |   | IfExp(
  |   |   |   |   |   CallExp(looking_at,[
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   SimpleVar(digit))]),
  |   |   |   |   |   LetExp([
  |   |   |   |   |   | VarDec(d1,true,NONE,
  |   |   |   |   |   |   CallExp(c2i,[
  |   |   |   |   |   |   | CallExp(curr_char,[])]))],
  |   |   |   |   |   | SeqExp[
  |   |   |   |   |   |   CallExp(advance_reader,[]),
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | CallExp(looking_at,[
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | SimpleVar(digit))]),
  |   |   |   |   |   |   | LetExp([
  |   |   |   |   |   |   |   VarDec(d2,true,NONE,
  |   |   |   |   |   |   |   | CallExp(c2i,[
  |   |   |   |   |   |   |   |   CallExp(curr_char,[])])),
  |   |   |   |   |   |   |   VarDec(ascii_code,true,NONE,
  |   |   |   |   |   |   |   | OpExp(PlusOp,
  |   |   |   |   |   |   |   |   OpExp(PlusOp,
  |   |   |   |   |   |   |   |   | OpExp(TimesOp,
  |   |   |   |   |   |   |   |   |   IntExp(100),
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | SimpleVar(d0))),
  |   |   |   |   |   |   |   |   | OpExp(TimesOp,
  |   |   |   |   |   |   |   |   |   IntExp(10),
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | SimpleVar(d1)))),
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(d2))))],
  |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   | CallExp(advance_reader,[]),
  |   |   |   |   |   |   |   | IfExp(
  |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   | OpExp(LeOp,
  |   |   |   |   |   |   |   |   |   IntExp(0),
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | SimpleVar(ascii_code))),
  |   |   |   |   |   |   |   |   | OpExp(LeOp,
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | SimpleVar(ascii_code)),
  |   |   |   |   |   |   |   |   |   IntExp(255)),
  |   |   |   |   |   |   |   |   | IntExp(0)),
  |   |   |   |   |   |   |   |   CallExp(chr,[
  |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   SimpleVar(ascii_code))]),
  |   |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   |   | CallExp(print,[
  |   |   |   |   |   |   |   |   |   StringExp("Escaped ASCII code was out of range [0; 255]: ")]),
  |   |   |   |   |   |   |   |   | CallExp(print,[
  |   |   |   |   |   |   |   |   |   CallExp(i2s,[
  |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   SimpleVar(ascii_code))])]),
  |   |   |   |   |   |   |   |   | CallExp(print,[
  |   |   |   |   |   |   |   |   |   StringExp("\n")]),
  |   |   |   |   |   |   |   |   | StringExp("")])]),
  |   |   |   |   |   |   | SeqExp[
  |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   | StringExp("Illegal string ASCII escape sequence at third digit: '")]),
  |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   | CallExp(curr_char,[])]),
  |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   | StringExp("'\n")]),
  |   |   |   |   |   |   |   StringExp("")])]),
  |   |   |   |   |   SeqExp[
  |   |   |   |   |   | CallExp(print,[
  |   |   |   |   |   |   StringExp("Illegal string ASCII escape sequence at second digit: '")]),
  |   |   |   |   |   | CallExp(print,[
  |   |   |   |   |   |   CallExp(curr_char,[])]),
  |   |   |   |   |   | CallExp(print,[
  |   |   |   |   |   |   StringExp("'\n")]),
  |   |   |   |   |   | StringExp("")])]),
  |   |   |   | SeqExp[
  |   |   |   |   CallExp(print,[
  |   |   |   |   | StringExp("Illegal string escape sequence, starting at '")]),
  |   |   |   |   CallExp(print,[
  |   |   |   |   | CallExp(prev_char,[])]),
  |   |   |   |   CallExp(print,[
  |   |   |   |   | CallExp(curr_char,[])]),
  |   |   |   |   CallExp(print,[
  |   |   |   |   | CallExp(next_char,[])]),
  |   |   |   |   CallExp(print,[
  |   |   |   |   | StringExp("'\n")]),
  |   |   |   |   StringExp("")])))))),
  | (parse_string_token,[],
  |   SOME(token),
  |   LetExp([
  |   | VarDec(str,true,NONE,
  |   |   StringExp(""))],
  |   | SeqExp[
  |   |   WhileExp(
  |   |   | CallExp(not,[
  |   |   |   CallExp(looking_at,[
  |   |   |   | VarExp(
  |   |   |   |   SimpleVar(string_indicator))])]),
  |   |   | SeqExp[
  |   |   |   IfExp(
  |   |   |   | CallExp(eof_p,[]),
  |   |   |   | SeqExp[
  |   |   |   |   CallExp(print,[
  |   |   |   |   | StringExp("Unfinished string: ")]),
  |   |   |   |   CallExp(print,[
  |   |   |   |   | CallExp(wrap_string,[
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | SimpleVar(str))])]),
  |   |   |   |   CallExp(print,[
  |   |   |   |   | StringExp("\n")]),
  |   |   |   |   BreakExp]),
  |   |   |   IfExp(
  |   |   |   | CallExp(looking_at,[
  |   |   |   |   VarExp(
  |   |   |   |   | SimpleVar(string_escape_indicator))]),
  |   |   |   | SeqExp[
  |   |   |   |   CallExp(advance_reader,[]),
  |   |   |   |   AssignExp(
  |   |   |   |   | SimpleVar(str),
  |   |   |   |   | CallExp(concat,[
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | SimpleVar(str)),
  |   |   |   |   |   CallExp(parse_string_escape,[])]))],
  |   |   |   | SeqExp[
  |   |   |   |   AssignExp(
  |   |   |   |   | SimpleVar(str),
  |   |   |   |   | CallExp(concat,[
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | SimpleVar(str)),
  |   |   |   |   |   CallExp(curr_char,[])])),
  |   |   |   |   CallExp(advance_reader,[])])]),
  |   |   CallExp(advance_reader,[]),
  |   |   CallExp(mk_str_token,[
  |   |   | VarExp(
  |   |   |   SimpleVar(str))])])),
  | (read_token,[],
  |   SOME(token),
  |   IfExp(
  |   | CallExp(eof_p,[]),
  |   | NilExp,
  |   | SeqExp[
  |   |   SeqExp[],
  |   |   WhileExp(
  |   |   | CallExp(looking_at,[
  |   |   |   VarExp(
  |   |   |   | SimpleVar(whitespace))]),
  |   |   | CallExp(advance_reader,[])),
  |   |   IfExp(
  |   |   | CallExp(looking_at,[
  |   |   |   VarExp(
  |   |   |   | SimpleVar(digit))]),
  |   |   | CallExp(parse_int_token,[
  |   |   |   IntExp(1)]),
  |   |   | IfExp(
  |   |   |   CallExp(looking_at_char_followed_by,[
  |   |   |   | VarExp(
  |   |   |   |   SimpleVar(uminus_char)),
  |   |   |   | VarExp(
  |   |   |   |   SimpleVar(digit))]),
  |   |   |   SeqExp[
  |   |   |   | CallExp(advance_reader,[]),
  |   |   |   | CallExp(parse_int_token,[
  |   |   |   |   OpExp(MinusOp,
  |   |   |   |   | IntExp(0),
  |   |   |   |   | IntExp(1))])],
  |   |   |   IfExp(
  |   |   |   | CallExp(looking_at_char_followed_by,[
  |   |   |   |   VarExp(
  |   |   |   |   | SimpleVar(bool_indicator)),
  |   |   |   |   VarExp(
  |   |   |   |   | SimpleVar(bool_char))]),
  |   |   |   | SeqExp[
  |   |   |   |   CallExp(advance_reader,[]),
  |   |   |   |   CallExp(parse_bool_token,[])],
  |   |   |   | IfExp(
  |   |   |   |   CallExp(looking_at,[
  |   |   |   |   | VarExp(
  |   |   |   |   |   SimpleVar(syntax_char))]),
  |   |   |   |   CallExp(parse_syntax_token,[]),
  |   |   |   |   IfExp(
  |   |   |   |   | CallExp(looking_at,[
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | SimpleVar(id_char))]),
  |   |   |   |   | CallExp(parse_id_token,[]),
  |   |   |   |   | IfExp(
  |   |   |   |   |   CallExp(looking_at,[
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   SimpleVar(string_indicator))]),
  |   |   |   |   |   SeqExp[
  |   |   |   |   |   | CallExp(advance_reader,[]),
  |   |   |   |   |   | CallExp(parse_string_token,[])],
  |   |   |   |   |   SeqExp[
  |   |   |   |   |   | CallExp(print,[
  |   |   |   |   |   |   StringExp("Unknown character: '")]),
  |   |   |   |   |   | CallExp(print,[
  |   |   |   |   |   |   CallExp(curr_char,[])]),
  |   |   |   |   |   | CallExp(print,[
  |   |   |   |   |   |   StringExp("'. Cannot lex further.\n")]),
  |   |   |   |   |   | NilExp]))))))]))],
  TypeDec[
  | (deque_content_type,
  |   NameTy(token)),
  | (deque_elem,
  |   RecordTy[
  |   | (val,true,deque_content_type),
  |   | (left,true,deque_elem),
  |   | (right,true,deque_elem)]),
  | (deque,
  |   RecordTy[
  |   | (leftmost,true,deque_elem),
  |   | (rightmost,true,deque_elem)])],
  FunctionDec[
  | (push_left,[
  |   (a,true,deque_content_type),
  |   (Q,true,deque)],
  |   NONE,
  |   LetExp([
  |   | VarDec(old_left,true,NONE,
  |   |   VarExp(
  |   |   | FieldVar(
  |   |   |   SimpleVar(Q),
  |   |   |   leftmost))),
  |   | VarDec(new_left,true,NONE,
  |   |   RecordExp(deque_elem,[
  |   |   | (val,
  |   |   |   VarExp(
  |   |   |   | SimpleVar(a))),
  |   |   | (left,
  |   |   |   NilExp),
  |   |   | (right,
  |   |   |   VarExp(
  |   |   |   | SimpleVar(old_left)))]))],
  |   | SeqExp[
  |   |   AssignExp(
  |   |   | FieldVar(
  |   |   |   SimpleVar(Q),
  |   |   |   leftmost),
  |   |   | VarExp(
  |   |   |   SimpleVar(new_left))),
  |   |   IfExp(
  |   |   | OpExp(NeqOp,
  |   |   |   VarExp(
  |   |   |   | SimpleVar(old_left)),
  |   |   |   NilExp),
  |   |   | AssignExp(
  |   |   |   FieldVar(
  |   |   |   | SimpleVar(old_left),
  |   |   |   | left),
  |   |   |   VarExp(
  |   |   |   | SimpleVar(new_left))),
  |   |   | AssignExp(
  |   |   |   FieldVar(
  |   |   |   | SimpleVar(Q),
  |   |   |   | rightmost),
  |   |   |   VarExp(
  |   |   |   | SimpleVar(new_left))))])),
  | (push_right,[
  |   (a,true,deque_content_type),
  |   (Q,true,deque)],
  |   NONE,
  |   LetExp([
  |   | VarDec(old_right,true,NONE,
  |   |   VarExp(
  |   |   | FieldVar(
  |   |   |   SimpleVar(Q),
  |   |   |   rightmost))),
  |   | VarDec(new_right,true,NONE,
  |   |   RecordExp(deque_elem,[
  |   |   | (val,
  |   |   |   VarExp(
  |   |   |   | SimpleVar(a))),
  |   |   | (left,
  |   |   |   VarExp(
  |   |   |   | SimpleVar(old_right))),
  |   |   | (right,
  |   |   |   NilExp)]))],
  |   | SeqExp[
  |   |   AssignExp(
  |   |   | FieldVar(
  |   |   |   SimpleVar(Q),
  |   |   |   rightmost),
  |   |   | VarExp(
  |   |   |   SimpleVar(new_right))),
  |   |   IfExp(
  |   |   | OpExp(NeqOp,
  |   |   |   VarExp(
  |   |   |   | SimpleVar(old_right)),
  |   |   |   NilExp),
  |   |   | AssignExp(
  |   |   |   FieldVar(
  |   |   |   | SimpleVar(old_right),
  |   |   |   | right),
  |   |   |   VarExp(
  |   |   |   | SimpleVar(new_right))),
  |   |   | AssignExp(
  |   |   |   FieldVar(
  |   |   |   | SimpleVar(Q),
  |   |   |   | leftmost),
  |   |   |   VarExp(
  |   |   |   | SimpleVar(new_right))))])),
  | (pop_right,[
  |   (Q,true,deque)],
  |   SOME(deque_content_type),
  |   IfExp(
  |   | IfExp(
  |   |   OpExp(EqOp,
  |   |   | VarExp(
  |   |   |   FieldVar(
  |   |   |   | SimpleVar(Q),
  |   |   |   | leftmost)),
  |   |   | NilExp),
  |   |   IntExp(1),
  |   |   OpExp(EqOp,
  |   |   | VarExp(
  |   |   |   FieldVar(
  |   |   |   | SimpleVar(Q),
  |   |   |   | rightmost)),
  |   |   | NilExp)),
  |   | SeqExp[
  |   |   CallExp(print,[
  |   |   | StringExp("Deque error: tried to pop from empty or bad deque\n")]),
  |   |   NilExp],
  |   | LetExp([
  |   |   VarDec(res,true,NONE,
  |   |   | VarExp(
  |   |   |   FieldVar(
  |   |   |   | SimpleVar(Q),
  |   |   |   | rightmost))),
  |   |   VarDec(new_right,true,NONE,
  |   |   | VarExp(
  |   |   |   FieldVar(
  |   |   |   | SimpleVar(res),
  |   |   |   | left)))],
  |   |   SeqExp[
  |   |   | AssignExp(
  |   |   |   FieldVar(
  |   |   |   | SimpleVar(Q),
  |   |   |   | rightmost),
  |   |   |   VarExp(
  |   |   |   | SimpleVar(new_right))),
  |   |   | IfExp(
  |   |   |   OpExp(EqOp,
  |   |   |   | VarExp(
  |   |   |   |   SimpleVar(new_right)),
  |   |   |   | NilExp),
  |   |   |   AssignExp(
  |   |   |   | FieldVar(
  |   |   |   |   SimpleVar(Q),
  |   |   |   |   leftmost),
  |   |   |   | NilExp),
  |   |   |   SeqExp[
  |   |   |   | AssignExp(
  |   |   |   |   FieldVar(
  |   |   |   |   | SimpleVar(new_right),
  |   |   |   |   | right),
  |   |   |   |   NilExp)]),
  |   |   | VarExp(
  |   |   |   FieldVar(
  |   |   |   | SimpleVar(res),
  |   |   |   | val))]))),
  | (empty,[
  |   (Q,true,deque)],
  |   SOME(int),
  |   IfExp(
  |   | OpExp(EqOp,
  |   |   VarExp(
  |   |   | FieldVar(
  |   |   |   SimpleVar(Q),
  |   |   |   leftmost)),
  |   |   NilExp),
  |   | IntExp(1),
  |   | OpExp(EqOp,
  |   |   VarExp(
  |   |   | FieldVar(
  |   |   |   SimpleVar(Q),
  |   |   |   rightmost)),
  |   |   NilExp)))],
  TypeDec[
  | (tokens,
  |   NameTy(deque))],
  FunctionDec[
  | (read_sexp_to_tokens,[],
  |   SOME(tokens),
  |   LetExp([
  |   | VarDec(level,true,NONE,
  |   |   IntExp(1)),
  |   | VarDec(first_token,true,NONE,
  |   |   CallExp(read_token,[])),
  |   | VarDec(tokens,true,NONE,
  |   |   RecordExp(tokens,[
  |   |   | (leftmost,
  |   |   |   NilExp),
  |   |   | (rightmost,
  |   |   |   NilExp)]))],
  |   | SeqExp[
  |   |   CallExp(push_right,[
  |   |   | VarExp(
  |   |   |   SimpleVar(first_token)),
  |   |   | VarExp(
  |   |   |   SimpleVar(tokens))]),
  |   |   IfExp(
  |   |   | IfExp(
  |   |   |   IfExp(
  |   |   |   | IfExp(
  |   |   |   |   CallExp(int_token_p,[
  |   |   |   |   | VarExp(
  |   |   |   |   |   SimpleVar(first_token))]),
  |   |   |   |   IntExp(1),
  |   |   |   |   CallExp(str_token_p,[
  |   |   |   |   | VarExp(
  |   |   |   |   |   SimpleVar(first_token))])),
  |   |   |   | IntExp(1),
  |   |   |   | CallExp(id_token_p,[
  |   |   |   |   VarExp(
  |   |   |   |   | SimpleVar(first_token))])),
  |   |   |   IntExp(1),
  |   |   |   CallExp(bool_token_p,[
  |   |   |   | VarExp(
  |   |   |   |   SimpleVar(first_token))])),
  |   |   | VarExp(
  |   |   |   SimpleVar(tokens)),
  |   |   | IfExp(
  |   |   |   OpExp(NeqOp,
  |   |   |   | VarExp(
  |   |   |   |   SimpleVar(first_token)),
  |   |   |   | VarExp(
  |   |   |   |   SimpleVar(LPAREN))),
  |   |   |   SeqExp[
  |   |   |   | CallExp(print,[
  |   |   |   |   StringExp("Illegal first token for top level expression: '")]),
  |   |   |   | CallExp(print,[
  |   |   |   |   CallExp(token2s,[
  |   |   |   |   | VarExp(
  |   |   |   |   |   SimpleVar(first_token))])]),
  |   |   |   | CallExp(print,[
  |   |   |   |   StringExp("'.\n")]),
  |   |   |   | NilExp],
  |   |   |   SeqExp[
  |   |   |   | WhileExp(
  |   |   |   |   OpExp(GtOp,
  |   |   |   |   | VarExp(
  |   |   |   |   |   SimpleVar(level)),
  |   |   |   |   | IntExp(0)),
  |   |   |   |   LetExp([
  |   |   |   |   | VarDec(curr_token,true,NONE,
  |   |   |   |   |   CallExp(read_token,[]))],
  |   |   |   |   | SeqExp[
  |   |   |   |   |   SeqExp[
  |   |   |   |   |   | IfExp(
  |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   SimpleVar(curr_token)),
  |   |   |   |   |   |   | NilExp),
  |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   | CallExp(print,[
  |   |   |   |   |   |   |   StringExp("Expression was not complete before input ended: ")]),
  |   |   |   |   |   |   | CallExp(print,[
  |   |   |   |   |   |   |   StringExp("Missing ")]),
  |   |   |   |   |   |   | CallExp(print,[
  |   |   |   |   |   |   |   CallExp(i2s,[
  |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   SimpleVar(level))])]),
  |   |   |   |   |   |   | CallExp(print,[
  |   |   |   |   |   |   |   StringExp(" right parentheses\n")]),
  |   |   |   |   |   |   | BreakExp]),
  |   |   |   |   |   | CallExp(push_right,[
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | SimpleVar(curr_token)),
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | SimpleVar(tokens))]),
  |   |   |   |   |   | IfExp(
  |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   SimpleVar(curr_token)),
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   SimpleVar(LPAREN))),
  |   |   |   |   |   |   AssignExp(
  |   |   |   |   |   |   | SimpleVar(level),
  |   |   |   |   |   |   | OpExp(PlusOp,
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | SimpleVar(level)),
  |   |   |   |   |   |   |   IntExp(1))),
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | OpExp(EqOp,
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | SimpleVar(curr_token)),
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | SimpleVar(RPAREN))),
  |   |   |   |   |   |   | AssignExp(
  |   |   |   |   |   |   |   SimpleVar(level),
  |   |   |   |   |   |   |   OpExp(MinusOp,
  |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   SimpleVar(level)),
  |   |   |   |   |   |   |   | IntExp(1)))))]])),
  |   |   |   | VarExp(
  |   |   |   |   SimpleVar(tokens))]))]))],
  TypeDec[
  | (sexp,
  |   RecordTy[
  |   | (int,true,Int),
  |   | (bool,true,Int),
  |   | (str,true,String),
  |   | (sym,true,String),
  |   | (fun,true,Function),
  |   | (sexps,true,List)]),
  | (sexps,
  |   RecordTy[
  |   | (car,true,sexp),
  |   | (cdr,true,sexps)]),
  | (List,
  |   RecordTy[
  |   | (v,true,sexps)]),
  | (Function,
  |   RecordTy[
  |   | (typ,true,string),
  |   | (name,true,string),
  |   | (pars,true,parameters),
  |   | (body,true,sexp),
  |   | (env,true,env)]),
  | (parameters,
  |   RecordTy[
  |   | (car,true,string),
  |   | (cdr,true,parameters)]),
  | (env,
  |   RecordTy[
  |   | (car,true,env_entry),
  |   | (cdr,true,env)]),
  | (env_entry,
  |   RecordTy[
  |   | (key,true,string),
  |   | (value,true,sexp)])],
  FunctionDec[
  | (mk_int,[
  |   (v,true,int)],
  |   SOME(sexp),
  |   RecordExp(sexp,[
  |   | (int,
  |   |   RecordExp(Int,[
  |   |   | (v,
  |   |   |   VarExp(
  |   |   |   | SimpleVar(v)))])),
  |   | (bool,
  |   |   NilExp),
  |   | (str,
  |   |   NilExp),
  |   | (sym,
  |   |   NilExp),
  |   | (fun,
  |   |   NilExp),
  |   | (sexps,
  |   |   NilExp)])),
  | (mk_bool,[
  |   (v,true,int)],
  |   SOME(sexp),
  |   RecordExp(sexp,[
  |   | (int,
  |   |   NilExp),
  |   | (bool,
  |   |   RecordExp(Int,[
  |   |   | (v,
  |   |   |   VarExp(
  |   |   |   | SimpleVar(v)))])),
  |   | (str,
  |   |   NilExp),
  |   | (sym,
  |   |   NilExp),
  |   | (fun,
  |   |   NilExp),
  |   | (sexps,
  |   |   NilExp)])),
  | (mk_str,[
  |   (v,true,string)],
  |   SOME(sexp),
  |   RecordExp(sexp,[
  |   | (int,
  |   |   NilExp),
  |   | (bool,
  |   |   NilExp),
  |   | (str,
  |   |   RecordExp(String,[
  |   |   | (v,
  |   |   |   VarExp(
  |   |   |   | SimpleVar(v)))])),
  |   | (sym,
  |   |   NilExp),
  |   | (fun,
  |   |   NilExp),
  |   | (sexps,
  |   |   NilExp)])),
  | (mk_sym,[
  |   (v,true,string)],
  |   SOME(sexp),
  |   RecordExp(sexp,[
  |   | (int,
  |   |   NilExp),
  |   | (bool,
  |   |   NilExp),
  |   | (str,
  |   |   NilExp),
  |   | (sym,
  |   |   RecordExp(String,[
  |   |   | (v,
  |   |   |   VarExp(
  |   |   |   | SimpleVar(v)))])),
  |   | (fun,
  |   |   NilExp),
  |   | (sexps,
  |   |   NilExp)])),
  | (mk_sexps,[
  |   (v,true,sexps)],
  |   SOME(sexp),
  |   RecordExp(sexp,[
  |   | (int,
  |   |   NilExp),
  |   | (bool,
  |   |   NilExp),
  |   | (str,
  |   |   NilExp),
  |   | (sym,
  |   |   NilExp),
  |   | (fun,
  |   |   NilExp),
  |   | (sexps,
  |   |   RecordExp(List,[
  |   |   | (v,
  |   |   |   VarExp(
  |   |   |   | SimpleVar(v)))]))])),
  | (mk_fun_from_fun,[
  |   (f,true,Function)],
  |   SOME(sexp),
  |   RecordExp(sexp,[
  |   | (int,
  |   |   NilExp),
  |   | (bool,
  |   |   NilExp),
  |   | (str,
  |   |   NilExp),
  |   | (sym,
  |   |   NilExp),
  |   | (fun,
  |   |   VarExp(
  |   |   | SimpleVar(f))),
  |   | (sexps,
  |   |   NilExp)])),
  | (mk_fun,[
  |   (pars,true,parameters),
  |   (body,true,sexp),
  |   (env,true,env)],
  |   SOME(sexp),
  |   LetExp([
  |   | VarDec(fun,true,NONE,
  |   |   RecordExp(Function,[
  |   |   | (typ,
  |   |   |   StringExp("user")),
  |   |   | (name,
  |   |   |   StringExp("")),
  |   |   | (pars,
  |   |   |   VarExp(
  |   |   |   | SimpleVar(pars))),
  |   |   | (body,
  |   |   |   VarExp(
  |   |   |   | SimpleVar(body))),
  |   |   | (env,
  |   |   |   VarExp(
  |   |   |   | SimpleVar(env)))]))],
  |   | SeqExp[
  |   |   CallExp(mk_fun_from_fun,[
  |   |   | VarExp(
  |   |   |   SimpleVar(fun))])])),
  | (mk_mt_sexp,[],
  |   SOME(sexp),
  |   RecordExp(sexp,[
  |   | (int,
  |   |   NilExp),
  |   | (bool,
  |   |   NilExp),
  |   | (str,
  |   |   NilExp),
  |   | (sym,
  |   |   NilExp),
  |   | (fun,
  |   |   NilExp),
  |   | (sexps,
  |   |   NilExp)])),
  | (int_p,[
  |   (s,true,sexp)],
  |   SOME(int),
  |   OpExp(NeqOp,
  |   | VarExp(
  |   |   FieldVar(
  |   |   | SimpleVar(s),
  |   |   | int)),
  |   | NilExp)),
  | (bool_p,[
  |   (s,true,sexp)],
  |   SOME(int),
  |   OpExp(NeqOp,
  |   | VarExp(
  |   |   FieldVar(
  |   |   | SimpleVar(s),
  |   |   | bool)),
  |   | NilExp)),
  | (str_p,[
  |   (s,true,sexp)],
  |   SOME(int),
  |   OpExp(NeqOp,
  |   | VarExp(
  |   |   FieldVar(
  |   |   | SimpleVar(s),
  |   |   | str)),
  |   | NilExp)),
  | (sym_p,[
  |   (s,true,sexp)],
  |   SOME(int),
  |   OpExp(NeqOp,
  |   | VarExp(
  |   |   FieldVar(
  |   |   | SimpleVar(s),
  |   |   | sym)),
  |   | NilExp)),
  | (fun_p,[
  |   (s,true,sexp)],
  |   SOME(int),
  |   OpExp(NeqOp,
  |   | VarExp(
  |   |   FieldVar(
  |   |   | SimpleVar(s),
  |   |   | fun)),
  |   | NilExp)),
  | (sexps_p,[
  |   (s,true,sexp)],
  |   SOME(int),
  |   OpExp(NeqOp,
  |   | VarExp(
  |   |   FieldVar(
  |   |   | SimpleVar(s),
  |   |   | sexps)),
  |   | NilExp)),
  | (get_int,[
  |   (s,true,sexp)],
  |   SOME(int),
  |   VarExp(
  |   | FieldVar(
  |   |   FieldVar(
  |   |   | SimpleVar(s),
  |   |   | int),
  |   |   v))),
  | (get_bool,[
  |   (s,true,sexp)],
  |   SOME(int),
  |   VarExp(
  |   | FieldVar(
  |   |   FieldVar(
  |   |   | SimpleVar(s),
  |   |   | bool),
  |   |   v))),
  | (get_str,[
  |   (s,true,sexp)],
  |   SOME(string),
  |   VarExp(
  |   | FieldVar(
  |   |   FieldVar(
  |   |   | SimpleVar(s),
  |   |   | str),
  |   |   v))),
  | (get_sym,[
  |   (s,true,sexp)],
  |   SOME(string),
  |   VarExp(
  |   | FieldVar(
  |   |   FieldVar(
  |   |   | SimpleVar(s),
  |   |   | sym),
  |   |   v))),
  | (get_fun,[
  |   (s,true,sexp)],
  |   SOME(Function),
  |   VarExp(
  |   | FieldVar(
  |   |   SimpleVar(s),
  |   |   fun))),
  | (get_sexps,[
  |   (s,true,sexp)],
  |   SOME(sexps),
  |   VarExp(
  |   | FieldVar(
  |   |   FieldVar(
  |   |   | SimpleVar(s),
  |   |   | sexps),
  |   |   v))),
  | (Function2s,[
  |   (f,true,Function)],
  |   SOME(string),
  |   IfExp(
  |   | OpExp(EqOp,
  |   |   VarExp(
  |   |   | FieldVar(
  |   |   |   SimpleVar(f),
  |   |   |   name)),
  |   |   StringExp("")),
  |   | StringExp("<function>"),
  |   | CallExp(concat,[
  |   |   StringExp("<function "),
  |   |   CallExp(concat,[
  |   |   | VarExp(
  |   |   |   FieldVar(
  |   |   |   | SimpleVar(f),
  |   |   |   | name)),
  |   |   | StringExp(">")])]))),
  | (sexps2s,[
  |   (v,true,sexps)],
  |   SOME(string),
  |   LetExp([
  |   | FunctionDec[
  |   |   (aux,[
  |   |   | (vs,true,sexps)],
  |   |   | SOME(string),
  |   |   | IfExp(
  |   |   |   OpExp(EqOp,
  |   |   |   | VarExp(
  |   |   |   |   SimpleVar(vs)),
  |   |   |   | NilExp),
  |   |   |   StringExp(""),
  |   |   |   CallExp(concat,[
  |   |   |   | StringExp(" "),
  |   |   |   | CallExp(concat,[
  |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   | VarExp(
  |   |   |   |   |   FieldVar(
  |   |   |   |   |   | SimpleVar(vs),
  |   |   |   |   |   | car))]),
  |   |   |   |   CallExp(aux,[
  |   |   |   |   | VarExp(
  |   |   |   |   |   FieldVar(
  |   |   |   |   |   | SimpleVar(vs),
  |   |   |   |   |   | cdr))])])])))]],
  |   | SeqExp[
  |   |   IfExp(
  |   |   | OpExp(EqOp,
  |   |   |   VarExp(
  |   |   |   | SimpleVar(v)),
  |   |   |   NilExp),
  |   |   | StringExp("()"),
  |   |   | CallExp(concat,[
  |   |   |   StringExp("("),
  |   |   |   CallExp(concat,[
  |   |   |   | CallExp(sexp2s,[
  |   |   |   |   VarExp(
  |   |   |   |   | FieldVar(
  |   |   |   |   |   SimpleVar(v),
  |   |   |   |   |   car))]),
  |   |   |   | CallExp(concat,[
  |   |   |   |   CallExp(aux,[
  |   |   |   |   | VarExp(
  |   |   |   |   |   FieldVar(
  |   |   |   |   |   | SimpleVar(v),
  |   |   |   |   |   | cdr))]),
  |   |   |   |   StringExp(")")])])]))])),
  | (sexp2s,[
  |   (s,true,sexp)],
  |   SOME(string),
  |   IfExp(
  |   | CallExp(int_p,[
  |   |   VarExp(
  |   |   | SimpleVar(s))]),
  |   | CallExp(i2s,[
  |   |   CallExp(get_int,[
  |   |   | VarExp(
  |   |   |   SimpleVar(s))])]),
  |   | IfExp(
  |   |   CallExp(bool_p,[
  |   |   | VarExp(
  |   |   |   SimpleVar(s))]),
  |   |   CallExp(bool2s,[
  |   |   | CallExp(get_bool,[
  |   |   |   VarExp(
  |   |   |   | SimpleVar(s))])]),
  |   |   IfExp(
  |   |   | CallExp(str_p,[
  |   |   |   VarExp(
  |   |   |   | SimpleVar(s))]),
  |   |   | CallExp(wrap_string,[
  |   |   |   CallExp(get_str,[
  |   |   |   | VarExp(
  |   |   |   |   SimpleVar(s))])]),
  |   |   | IfExp(
  |   |   |   CallExp(sym_p,[
  |   |   |   | VarExp(
  |   |   |   |   SimpleVar(s))]),
  |   |   |   CallExp(get_sym,[
  |   |   |   | VarExp(
  |   |   |   |   SimpleVar(s))]),
  |   |   |   IfExp(
  |   |   |   | CallExp(fun_p,[
  |   |   |   |   VarExp(
  |   |   |   |   | SimpleVar(s))]),
  |   |   |   | CallExp(Function2s,[
  |   |   |   |   CallExp(get_fun,[
  |   |   |   |   | VarExp(
  |   |   |   |   |   SimpleVar(s))])]),
  |   |   |   | IfExp(
  |   |   |   |   CallExp(sexps_p,[
  |   |   |   |   | VarExp(
  |   |   |   |   |   SimpleVar(s))]),
  |   |   |   |   CallExp(sexps2s,[
  |   |   |   |   | CallExp(get_sexps,[
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | SimpleVar(s))])]),
  |   |   |   |   SeqExp[
  |   |   |   |   | CallExp(print,[
  |   |   |   |   |   StringExp("Unknown sexp in sexp2s.\n")]),
  |   |   |   |   | StringExp("")]))))))),
  | (parse_tokens,[
  |   (left_elem,true,deque_elem),
  |   (right_elem,true,deque_elem)],
  |   SOME(sexp),
  |   LetExp([
  |   | VarDec(left_token,true,NONE,
  |   |   VarExp(
  |   |   | FieldVar(
  |   |   |   SimpleVar(left_elem),
  |   |   |   val))),
  |   | VarDec(right_token,true,NONE,
  |   |   VarExp(
  |   |   | FieldVar(
  |   |   |   SimpleVar(right_elem),
  |   |   |   val)))],
  |   | SeqExp[
  |   |   IfExp(
  |   |   | OpExp(EqOp,
  |   |   |   VarExp(
  |   |   |   | SimpleVar(left_elem)),
  |   |   |   VarExp(
  |   |   |   | SimpleVar(right_elem))),
  |   |   | IfExp(
  |   |   |   CallExp(int_token_p,[
  |   |   |   | VarExp(
  |   |   |   |   SimpleVar(left_token))]),
  |   |   |   CallExp(mk_int,[
  |   |   |   | CallExp(get_int_token,[
  |   |   |   |   VarExp(
  |   |   |   |   | SimpleVar(left_token))])]),
  |   |   |   IfExp(
  |   |   |   | CallExp(bool_token_p,[
  |   |   |   |   VarExp(
  |   |   |   |   | SimpleVar(left_token))]),
  |   |   |   | CallExp(mk_bool,[
  |   |   |   |   CallExp(get_bool_token,[
  |   |   |   |   | VarExp(
  |   |   |   |   |   SimpleVar(left_token))])]),
  |   |   |   | IfExp(
  |   |   |   |   CallExp(str_token_p,[
  |   |   |   |   | VarExp(
  |   |   |   |   |   SimpleVar(left_token))]),
  |   |   |   |   CallExp(mk_str,[
  |   |   |   |   | CallExp(get_str_token,[
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | SimpleVar(left_token))])]),
  |   |   |   |   IfExp(
  |   |   |   |   | CallExp(id_token_p,[
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | SimpleVar(left_token))]),
  |   |   |   |   | CallExp(mk_sym,[
  |   |   |   |   |   CallExp(get_id_token,[
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   SimpleVar(left_token))])]),
  |   |   |   |   | SeqExp[
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | StringExp("Syntax error: Could not parse sexp from single token: '")]),
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | CallExp(token2s,[
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | SimpleVar(left_token))])]),
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | StringExp("'\n")]),
  |   |   |   |   |   NilExp])))),
  |   |   | IfExp(
  |   |   |   IfExp(
  |   |   |   | OpExp(EqOp,
  |   |   |   |   VarExp(
  |   |   |   |   | SimpleVar(left_token)),
  |   |   |   |   VarExp(
  |   |   |   |   | SimpleVar(LPAREN))),
  |   |   |   | OpExp(EqOp,
  |   |   |   |   VarExp(
  |   |   |   |   | SimpleVar(right_token)),
  |   |   |   |   VarExp(
  |   |   |   |   | SimpleVar(RPAREN))),
  |   |   |   | IntExp(0)),
  |   |   |   LetExp([
  |   |   |   | VarDec(first_elem_inside,true,NONE,
  |   |   |   |   VarExp(
  |   |   |   |   | FieldVar(
  |   |   |   |   |   SimpleVar(left_elem),
  |   |   |   |   |   right))),
  |   |   |   | VarDec(last_elem_inside,true,NONE,
  |   |   |   |   VarExp(
  |   |   |   |   | FieldVar(
  |   |   |   |   |   SimpleVar(right_elem),
  |   |   |   |   |   left))),
  |   |   |   | VarDec(sexps,true,SOME(sexps),
  |   |   |   |   NilExp),
  |   |   |   | VarDec(end_of_next_sexp,true,NONE,
  |   |   |   |   VarExp(
  |   |   |   |   | SimpleVar(last_elem_inside)))],
  |   |   |   | SeqExp[
  |   |   |   |   WhileExp(
  |   |   |   |   | OpExp(NeqOp,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | SimpleVar(end_of_next_sexp)),
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | SimpleVar(left_elem))),
  |   |   |   |   | LetExp([
  |   |   |   |   |   VarDec(beginning_of_next_sexp,true,NONE,
  |   |   |   |   |   | CallExp(find_sexp_beginning,[
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | SimpleVar(first_elem_inside)),
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | SimpleVar(end_of_next_sexp))])),
  |   |   |   |   |   VarDec(nexp_sexp,true,NONE,
  |   |   |   |   |   | CallExp(parse_tokens,[
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | SimpleVar(beginning_of_next_sexp)),
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | SimpleVar(end_of_next_sexp))]))],
  |   |   |   |   |   SeqExp[
  |   |   |   |   |   | SeqExp[
  |   |   |   |   |   |   AssignExp(
  |   |   |   |   |   |   | SimpleVar(sexps),
  |   |   |   |   |   |   | RecordExp(sexps,[
  |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   SimpleVar(nexp_sexp))),
  |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   SimpleVar(sexps)))])),
  |   |   |   |   |   |   AssignExp(
  |   |   |   |   |   |   | SimpleVar(end_of_next_sexp),
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   | SimpleVar(beginning_of_next_sexp),
  |   |   |   |   |   |   |   | left)))]])),
  |   |   |   |   CallExp(mk_sexps,[
  |   |   |   |   | VarExp(
  |   |   |   |   |   SimpleVar(sexps))])]),
  |   |   |   SeqExp[
  |   |   |   | CallExp(print,[
  |   |   |   |   StringExp("Syntax error: Long sexp was not parameterised properly\n")]),
  |   |   |   | NilExp]))])),
  | (find_sexp_beginning,[
  |   (leftmost_elem,true,deque_elem),
  |   (end_elem,true,deque_elem)],
  |   SOME(deque_elem),
  |   LetExp([
  |   | VarDec(end_token,true,NONE,
  |   |   VarExp(
  |   |   | FieldVar(
  |   |   |   SimpleVar(end_elem),
  |   |   |   val)))],
  |   | SeqExp[
  |   |   IfExp(
  |   |   | IfExp(
  |   |   |   IfExp(
  |   |   |   | IfExp(
  |   |   |   |   CallExp(int_token_p,[
  |   |   |   |   | VarExp(
  |   |   |   |   |   SimpleVar(end_token))]),
  |   |   |   |   IntExp(1),
  |   |   |   |   CallExp(str_token_p,[
  |   |   |   |   | VarExp(
  |   |   |   |   |   SimpleVar(end_token))])),
  |   |   |   | IntExp(1),
  |   |   |   | CallExp(id_token_p,[
  |   |   |   |   VarExp(
  |   |   |   |   | SimpleVar(end_token))])),
  |   |   |   IntExp(1),
  |   |   |   CallExp(bool_token_p,[
  |   |   |   | VarExp(
  |   |   |   |   SimpleVar(end_token))])),
  |   |   | VarExp(
  |   |   |   SimpleVar(end_elem)),
  |   |   | IfExp(
  |   |   |   OpExp(EqOp,
  |   |   |   | VarExp(
  |   |   |   |   SimpleVar(end_token)),
  |   |   |   | VarExp(
  |   |   |   |   SimpleVar(RPAREN))),
  |   |   |   LetExp([
  |   |   |   | VarDec(level,true,NONE,
  |   |   |   |   IntExp(1)),
  |   |   |   | VarDec(curr_elem,true,NONE,
  |   |   |   |   VarExp(
  |   |   |   |   | FieldVar(
  |   |   |   |   |   SimpleVar(end_elem),
  |   |   |   |   |   left)))],
  |   |   |   | SeqExp[
  |   |   |   |   WhileExp(
  |   |   |   |   | OpExp(GtOp,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | SimpleVar(level)),
  |   |   |   |   |   IntExp(0)),
  |   |   |   |   | SeqExp[
  |   |   |   |   |   IfExp(
  |   |   |   |   |   | IfExp(
  |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   SimpleVar(curr_elem)),
  |   |   |   |   |   |   | NilExp),
  |   |   |   |   |   |   IntExp(1),
  |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   | SimpleVar(leftmost_elem),
  |   |   |   |   |   |   |   | left)),
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   SimpleVar(curr_elem)))),
  |   |   |   |   |   | SeqExp[
  |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   | StringExp("Syntax error: Could not find beginning of long sexp\n")]),
  |   |   |   |   |   |   BreakExp]),
  |   |   |   |   |   IfExp(
  |   |   |   |   |   | OpExp(EqOp,
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   SimpleVar(curr_elem),
  |   |   |   |   |   |   |   val)),
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | SimpleVar(LPAREN))),
  |   |   |   |   |   | AssignExp(
  |   |   |   |   |   |   SimpleVar(level),
  |   |   |   |   |   |   OpExp(MinusOp,
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   SimpleVar(level)),
  |   |   |   |   |   |   | IntExp(1))),
  |   |   |   |   |   | IfExp(
  |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   | SimpleVar(curr_elem),
  |   |   |   |   |   |   |   | val)),
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   SimpleVar(RPAREN))),
  |   |   |   |   |   |   AssignExp(
  |   |   |   |   |   |   | SimpleVar(level),
  |   |   |   |   |   |   | OpExp(PlusOp,
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | SimpleVar(level)),
  |   |   |   |   |   |   |   IntExp(1))))),
  |   |   |   |   |   AssignExp(
  |   |   |   |   |   | SimpleVar(curr_elem),
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   | SimpleVar(curr_elem),
  |   |   |   |   |   |   | left)))]),
  |   |   |   |   VarExp(
  |   |   |   |   | FieldVar(
  |   |   |   |   |   SimpleVar(curr_elem),
  |   |   |   |   |   right))]),
  |   |   |   SeqExp[
  |   |   |   | CallExp(print,[
  |   |   |   |   StringExp("Syntax error: Cannot find beginning of sexp ending in '")]),
  |   |   |   | CallExp(print,[
  |   |   |   |   CallExp(token2s,[
  |   |   |   |   | VarExp(
  |   |   |   |   |   SimpleVar(end_token))])]),
  |   |   |   | CallExp(print,[
  |   |   |   |   StringExp("'\n")]),
  |   |   |   | NilExp]))])),
  | (env2s_short,[
  |   (env,true,env)],
  |   SOME(string),
  |   IfExp(
  |   | OpExp(EqOp,
  |   |   VarExp(
  |   |   | SimpleVar(env)),
  |   |   NilExp),
  |   | StringExp(""),
  |   | IfExp(
  |   |   OpExp(EqOp,
  |   |   | VarExp(
  |   |   |   FieldVar(
  |   |   |   | SimpleVar(env),
  |   |   |   | cdr)),
  |   |   | NilExp),
  |   |   VarExp(
  |   |   | FieldVar(
  |   |   |   FieldVar(
  |   |   |   | SimpleVar(env),
  |   |   |   | car),
  |   |   |   key)),
  |   |   CallExp(concat,[
  |   |   | VarExp(
  |   |   |   FieldVar(
  |   |   |   | FieldVar(
  |   |   |   |   SimpleVar(env),
  |   |   |   |   car),
  |   |   |   | key)),
  |   |   | CallExp(concat,[
  |   |   |   StringExp("  "),
  |   |   |   CallExp(env2s_short,[
  |   |   |   | VarExp(
  |   |   |   |   FieldVar(
  |   |   |   |   | SimpleVar(env),
  |   |   |   |   | cdr))])])])))),
  | (copy_value,[
  |   (src,true,sexp),
  |   (dst,true,sexp)],
  |   NONE,
  |   IfExp(
  |   | IfExp(
  |   |   IfExp(
  |   |   | IfExp(
  |   |   |   IfExp(
  |   |   |   | IfExp(
  |   |   |   |   CallExp(int_p,[
  |   |   |   |   | VarExp(
  |   |   |   |   |   SimpleVar(dst))]),
  |   |   |   |   IntExp(1),
  |   |   |   |   CallExp(bool_p,[
  |   |   |   |   | VarExp(
  |   |   |   |   |   SimpleVar(dst))])),
  |   |   |   | IntExp(1),
  |   |   |   | CallExp(str_p,[
  |   |   |   |   VarExp(
  |   |   |   |   | SimpleVar(dst))])),
  |   |   |   IntExp(1),
  |   |   |   CallExp(sym_p,[
  |   |   |   | VarExp(
  |   |   |   |   SimpleVar(dst))])),
  |   |   | IntExp(1),
  |   |   | CallExp(fun_p,[
  |   |   |   VarExp(
  |   |   |   | SimpleVar(dst))])),
  |   |   IntExp(1),
  |   |   CallExp(sexps_p,[
  |   |   | VarExp(
  |   |   |   SimpleVar(dst))])),
  |   | SeqExp[
  |   |   CallExp(print,[
  |   |   | StringExp("Cannot copy value into dst, as dst is not an empty value. Src: '")]),
  |   |   CallExp(print,[
  |   |   | CallExp(sexp2s,[
  |   |   |   VarExp(
  |   |   |   | SimpleVar(src))])]),
  |   |   CallExp(print,[
  |   |   | StringExp("', dst: '")]),
  |   |   CallExp(print,[
  |   |   | CallExp(sexp2s,[
  |   |   |   VarExp(
  |   |   |   | SimpleVar(dst))])]),
  |   |   CallExp(print,[
  |   |   | StringExp("'\n")])],
  |   | IfExp(
  |   |   CallExp(int_p,[
  |   |   | VarExp(
  |   |   |   SimpleVar(src))]),
  |   |   AssignExp(
  |   |   | FieldVar(
  |   |   |   SimpleVar(dst),
  |   |   |   int),
  |   |   | VarExp(
  |   |   |   FieldVar(
  |   |   |   | SimpleVar(src),
  |   |   |   | int))),
  |   |   IfExp(
  |   |   | CallExp(bool_p,[
  |   |   |   VarExp(
  |   |   |   | SimpleVar(src))]),
  |   |   | AssignExp(
  |   |   |   FieldVar(
  |   |   |   | SimpleVar(dst),
  |   |   |   | bool),
  |   |   |   VarExp(
  |   |   |   | FieldVar(
  |   |   |   |   SimpleVar(src),
  |   |   |   |   bool))),
  |   |   | IfExp(
  |   |   |   CallExp(str_p,[
  |   |   |   | VarExp(
  |   |   |   |   SimpleVar(src))]),
  |   |   |   AssignExp(
  |   |   |   | FieldVar(
  |   |   |   |   SimpleVar(dst),
  |   |   |   |   str),
  |   |   |   | VarExp(
  |   |   |   |   FieldVar(
  |   |   |   |   | SimpleVar(src),
  |   |   |   |   | str))),
  |   |   |   IfExp(
  |   |   |   | CallExp(fun_p,[
  |   |   |   |   VarExp(
  |   |   |   |   | SimpleVar(src))]),
  |   |   |   | AssignExp(
  |   |   |   |   FieldVar(
  |   |   |   |   | SimpleVar(dst),
  |   |   |   |   | fun),
  |   |   |   |   VarExp(
  |   |   |   |   | FieldVar(
  |   |   |   |   |   SimpleVar(src),
  |   |   |   |   |   fun))),
  |   |   |   | IfExp(
  |   |   |   |   CallExp(sym_p,[
  |   |   |   |   | VarExp(
  |   |   |   |   |   SimpleVar(src))]),
  |   |   |   |   AssignExp(
  |   |   |   |   | FieldVar(
  |   |   |   |   |   SimpleVar(dst),
  |   |   |   |   |   sym),
  |   |   |   |   | VarExp(
  |   |   |   |   |   FieldVar(
  |   |   |   |   |   | SimpleVar(src),
  |   |   |   |   |   | sym))),
  |   |   |   |   IfExp(
  |   |   |   |   | CallExp(sexps_p,[
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | SimpleVar(src))]),
  |   |   |   |   | AssignExp(
  |   |   |   |   |   FieldVar(
  |   |   |   |   |   | SimpleVar(dst),
  |   |   |   |   |   | sexps),
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   SimpleVar(src),
  |   |   |   |   |   |   sexps))),
  |   |   |   |   | SeqExp[
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | StringExp("Unknown src for copy_value: '")]),
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | CallExp(sexp2s,[
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | SimpleVar(src))])]),
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | StringExp("'\n")])])))))))),
  | (mk_internal_fun,[
  |   (name,true,string)],
  |   SOME(env_entry),
  |   RecordExp(env_entry,[
  |   | (key,
  |   |   VarExp(
  |   |   | SimpleVar(name))),
  |   | (value,
  |   |   CallExp(mk_fun_from_fun,[
  |   |   | RecordExp(Function,[
  |   |   |   (typ,
  |   |   |   | StringExp("internal")),
  |   |   |   (name,
  |   |   |   | VarExp(
  |   |   |   |   SimpleVar(name))),
  |   |   |   (pars,
  |   |   |   | NilExp),
  |   |   |   (body,
  |   |   |   | NilExp),
  |   |   |   (env,
  |   |   |   | NilExp)])]))]))],
  VarDec(initial_env,true,NONE,
  | RecordExp(env,[
  |   (car,
  |   | CallExp(mk_internal_fun,[
  |   |   StringExp("+")])),
  |   (cdr,
  |   | RecordExp(env,[
  |   |   (car,
  |   |   | CallExp(mk_internal_fun,[
  |   |   |   StringExp("-")])),
  |   |   (cdr,
  |   |   | RecordExp(env,[
  |   |   |   (car,
  |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   StringExp("*")])),
  |   |   |   (cdr,
  |   |   |   | RecordExp(env,[
  |   |   |   |   (car,
  |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   StringExp("/")])),
  |   |   |   |   (cdr,
  |   |   |   |   | RecordExp(env,[
  |   |   |   |   |   (car,
  |   |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   |   StringExp("^")])),
  |   |   |   |   |   (cdr,
  |   |   |   |   |   | RecordExp(env,[
  |   |   |   |   |   |   (car,
  |   |   |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   StringExp("<")])),
  |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   | RecordExp(env,[
  |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   StringExp("<=")])),
  |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   | RecordExp(env,[
  |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   StringExp("=")])),
  |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   | RecordExp(env,[
  |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   StringExp("!=")])),
  |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   | RecordExp(env,[
  |   |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   StringExp(">=")])),
  |   |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   |   | RecordExp(env,[
  |   |   |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   StringExp(">")])),
  |   |   |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   |   |   | RecordExp(env,[
  |   |   |   |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("or")])),
  |   |   |   |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   | RecordExp(env,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("and")])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   | RecordExp(env,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("notb")])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | RecordExp(env,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("orb")])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | RecordExp(env,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("andb")])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | RecordExp(env,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("ifb")])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | RecordExp(env,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("min")])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | RecordExp(env,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("max")])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | RecordExp(env,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("list")])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | RecordExp(env,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("cons")])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | RecordExp(env,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("car")])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | RecordExp(env,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("cdr")])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | RecordExp(env,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("progn")])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | RecordExp(env,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("map")])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | RecordExp(env,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("foldl")])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | RecordExp(env,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("foldr")])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | RecordExp(env,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("print")])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | RecordExp(env,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("read-char")])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | RecordExp(env,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("read-line")])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | RecordExp(env,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("newline")])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | RecordExp(env,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("<s")])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | RecordExp(env,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("<=s")])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | RecordExp(env,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("=s")])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | RecordExp(env,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("!=s")])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | RecordExp(env,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp(">=s")])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | RecordExp(env,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp(">s")])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | RecordExp(env,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("+s")])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | RecordExp(env,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("ord")])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | RecordExp(env,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("chr")])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | RecordExp(env,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("s->i")])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | RecordExp(env,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("i->s")])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | RecordExp(env,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("substring")])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | RecordExp(env,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("int?")])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | RecordExp(env,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("string?")])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | RecordExp(env,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("list?")])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | RecordExp(env,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("nil?")])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | RecordExp(env,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("fun?")])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | RecordExp(env,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("lambda")])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | RecordExp(env,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("let")])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | RecordExp(env,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("let*")])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | RecordExp(env,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("letrec")])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | RecordExp(env,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("define")])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | RecordExp(env,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("quote")])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | RecordExp(env,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("quasiquote")])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | RecordExp(env,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("unquote")])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | RecordExp(env,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("exit")])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | RecordExp(env,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("help")])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | NilExp)]))]))]))]))]))]))]))]))]))]))]))]))]))]))]))]))]))]))]))]))]))]))]))]))]))]))]))]))]))]))]))]))]))]))]))]))]))]))]))]))]))]))]))]))]))]))]))]))]))]))]))]))]))]))]))]))]))])),
  FunctionDec[
  | (lookup,[
  |   (id,true,string),
  |   (env,true,env)],
  |   SOME(sexp),
  |   IfExp(
  |   | OpExp(EqOp,
  |   |   VarExp(
  |   |   | SimpleVar(env)),
  |   |   NilExp),
  |   | SeqExp[
  |   |   CallExp(print,[
  |   |   | StringExp("Error: Could not find '")]),
  |   |   CallExp(print,[
  |   |   | VarExp(
  |   |   |   SimpleVar(id))]),
  |   |   CallExp(print,[
  |   |   | StringExp("' in environment.\n")]),
  |   |   NilExp],
  |   | LetExp([
  |   |   VarDec(curr_entry,true,NONE,
  |   |   | VarExp(
  |   |   |   FieldVar(
  |   |   |   | SimpleVar(env),
  |   |   |   | car)))],
  |   |   SeqExp[
  |   |   | IfExp(
  |   |   |   OpExp(EqOp,
  |   |   |   | VarExp(
  |   |   |   |   FieldVar(
  |   |   |   |   | SimpleVar(curr_entry),
  |   |   |   |   | key)),
  |   |   |   | VarExp(
  |   |   |   |   SimpleVar(id))),
  |   |   |   VarExp(
  |   |   |   | FieldVar(
  |   |   |   |   SimpleVar(curr_entry),
  |   |   |   |   value)),
  |   |   |   CallExp(lookup,[
  |   |   |   | VarExp(
  |   |   |   |   SimpleVar(id)),
  |   |   |   | VarExp(
  |   |   |   |   FieldVar(
  |   |   |   |   | SimpleVar(env),
  |   |   |   |   | cdr))]))]))),
  | (eval,[
  |   (sexp,true,sexp),
  |   (env,true,env)],
  |   SOME(sexp),
  |   IfExp(
  |   | CallExp(int_p,[
  |   |   VarExp(
  |   |   | SimpleVar(sexp))]),
  |   | VarExp(
  |   |   SimpleVar(sexp)),
  |   | IfExp(
  |   |   CallExp(str_p,[
  |   |   | VarExp(
  |   |   |   SimpleVar(sexp))]),
  |   |   VarExp(
  |   |   | SimpleVar(sexp)),
  |   |   IfExp(
  |   |   | CallExp(bool_p,[
  |   |   |   VarExp(
  |   |   |   | SimpleVar(sexp))]),
  |   |   | VarExp(
  |   |   |   SimpleVar(sexp)),
  |   |   | IfExp(
  |   |   |   CallExp(sym_p,[
  |   |   |   | VarExp(
  |   |   |   |   SimpleVar(sexp))]),
  |   |   |   CallExp(lookup,[
  |   |   |   | CallExp(get_sym,[
  |   |   |   |   VarExp(
  |   |   |   |   | SimpleVar(sexp))]),
  |   |   |   | VarExp(
  |   |   |   |   SimpleVar(env))]),
  |   |   |   IfExp(
  |   |   |   | CallExp(sexps_p,[
  |   |   |   |   VarExp(
  |   |   |   |   | SimpleVar(sexp))]),
  |   |   |   | LetExp([
  |   |   |   |   VarDec(sexps,true,NONE,
  |   |   |   |   | CallExp(get_sexps,[
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | SimpleVar(sexp))]))],
  |   |   |   |   SeqExp[
  |   |   |   |   | IfExp(
  |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   SimpleVar(sexps)),
  |   |   |   |   |   | NilExp),
  |   |   |   |   |   CallExp(mk_sexps,[
  |   |   |   |   |   | NilExp]),
  |   |   |   |   |   LetExp([
  |   |   |   |   |   | VarDec(head_sexp,true,NONE,
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   SimpleVar(sexps),
  |   |   |   |   |   |   |   car))),
  |   |   |   |   |   | VarDec(head,true,NONE,
  |   |   |   |   |   |   CallExp(eval,[
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   SimpleVar(head_sexp)),
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   SimpleVar(env))]))],
  |   |   |   |   |   | SeqExp[
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | CallExp(fun_p,[
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | SimpleVar(head))]),
  |   |   |   |   |   |   | LetExp([
  |   |   |   |   |   |   |   VarDec(fun,true,NONE,
  |   |   |   |   |   |   |   | CallExp(get_fun,[
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(head))]))],
  |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   | CallExp(apply_fun,[
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(fun)),
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   SimpleVar(sexps),
  |   |   |   |   |   |   |   |   |   cdr)),
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(env))])]),
  |   |   |   |   |   |   | SeqExp[
  |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   | StringExp("Tried to apply non-function: '")]),
  |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   | CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(head))])]),
  |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   | StringExp("'\n")]),
  |   |   |   |   |   |   |   NilExp])]))]),
  |   |   |   | SeqExp[
  |   |   |   |   CallExp(print,[
  |   |   |   |   | StringExp("Eval error: Unknown sexp: '")]),
  |   |   |   |   CallExp(print,[
  |   |   |   |   | CallExp(sexp2s,[
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | SimpleVar(sexp))])]),
  |   |   |   |   CallExp(print,[
  |   |   |   |   | StringExp("'\n")]),
  |   |   |   |   NilExp])))))),
  | (eval_sexps,[
  |   (sexps,true,sexps),
  |   (env,true,env)],
  |   SOME(sexps),
  |   IfExp(
  |   | OpExp(EqOp,
  |   |   VarExp(
  |   |   | SimpleVar(sexps)),
  |   |   NilExp),
  |   | NilExp,
  |   | RecordExp(sexps,[
  |   |   (car,
  |   |   | CallExp(eval,[
  |   |   |   VarExp(
  |   |   |   | FieldVar(
  |   |   |   |   SimpleVar(sexps),
  |   |   |   |   car)),
  |   |   |   VarExp(
  |   |   |   | SimpleVar(env))])),
  |   |   (cdr,
  |   |   | CallExp(eval_sexps,[
  |   |   |   VarExp(
  |   |   |   | FieldVar(
  |   |   |   |   SimpleVar(sexps),
  |   |   |   |   cdr)),
  |   |   |   VarExp(
  |   |   |   | SimpleVar(env))]))]))),
  | (apply_fun,[
  |   (fun,true,Function),
  |   (args,true,sexps),
  |   (env,true,env)],
  |   SOME(sexp),
  |   IfExp(
  |   | CallExp(lazy_fun_p,[
  |   |   VarExp(
  |   |   | SimpleVar(fun))]),
  |   | CallExp(apply_internal_lazy,[
  |   |   VarExp(
  |   |   | FieldVar(
  |   |   |   SimpleVar(fun),
  |   |   |   name)),
  |   |   VarExp(
  |   |   | SimpleVar(args)),
  |   |   VarExp(
  |   |   | SimpleVar(env))]),
  |   | CallExp(apply_fun_cbv,[
  |   |   VarExp(
  |   |   | SimpleVar(fun)),
  |   |   CallExp(eval_sexps,[
  |   |   | VarExp(
  |   |   |   SimpleVar(args)),
  |   |   | VarExp(
  |   |   |   SimpleVar(env))]),
  |   |   VarExp(
  |   |   | SimpleVar(env))]))),
  | (apply_fun_cbv,[
  |   (fun,true,Function),
  |   (args,true,sexps),
  |   (env,true,env)],
  |   SOME(sexp),
  |   IfExp(
  |   | OpExp(EqOp,
  |   |   VarExp(
  |   |   | FieldVar(
  |   |   |   SimpleVar(fun),
  |   |   |   typ)),
  |   |   StringExp("internal")),
  |   | CallExp(apply_internal_cbv,[
  |   |   VarExp(
  |   |   | FieldVar(
  |   |   |   SimpleVar(fun),
  |   |   |   name)),
  |   |   VarExp(
  |   |   | SimpleVar(args)),
  |   |   VarExp(
  |   |   | SimpleVar(env))]),
  |   | CallExp(apply_user_cbv,[
  |   |   VarExp(
  |   |   | SimpleVar(fun)),
  |   |   VarExp(
  |   |   | SimpleVar(args))]))),
  | (apply_user_cbv,[
  |   (fun,true,Function),
  |   (args,true,sexps)],
  |   SOME(sexp),
  |   LetExp([
  |   | VarDec(env,true,NONE,
  |   |   VarExp(
  |   |   | FieldVar(
  |   |   |   SimpleVar(fun),
  |   |   |   env))),
  |   | FunctionDec[
  |   |   (fill_env,[
  |   |   | (parameters,true,parameters),
  |   |   | (args,true,sexps)],
  |   |   | NONE,
  |   |   | IfExp(
  |   |   |   IfExp(
  |   |   |   | OpExp(NeqOp,
  |   |   |   |   VarExp(
  |   |   |   |   | SimpleVar(parameters)),
  |   |   |   |   NilExp),
  |   |   |   | OpExp(NeqOp,
  |   |   |   |   VarExp(
  |   |   |   |   | SimpleVar(args)),
  |   |   |   |   NilExp),
  |   |   |   | IntExp(0)),
  |   |   |   SeqExp[
  |   |   |   | AssignExp(
  |   |   |   |   SimpleVar(env),
  |   |   |   |   RecordExp(env,[
  |   |   |   |   | (car,
  |   |   |   |   |   RecordExp(env_entry,[
  |   |   |   |   |   | (key,
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   SimpleVar(parameters),
  |   |   |   |   |   |   |   car))),
  |   |   |   |   |   | (value,
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   |   |   car)))])),
  |   |   |   |   | (cdr,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | SimpleVar(env)))])),
  |   |   |   | CallExp(fill_env,[
  |   |   |   |   VarExp(
  |   |   |   |   | FieldVar(
  |   |   |   |   |   SimpleVar(parameters),
  |   |   |   |   |   cdr)),
  |   |   |   |   VarExp(
  |   |   |   |   | FieldVar(
  |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   cdr))])],
  |   |   |   IfExp(
  |   |   |   | IfExp(
  |   |   |   |   OpExp(EqOp,
  |   |   |   |   | VarExp(
  |   |   |   |   |   SimpleVar(parameters)),
  |   |   |   |   | NilExp),
  |   |   |   |   OpExp(NeqOp,
  |   |   |   |   | VarExp(
  |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   | NilExp),
  |   |   |   |   IntExp(0)),
  |   |   |   | SeqExp[
  |   |   |   |   CallExp(print,[
  |   |   |   |   | StringExp("Too many arguments for function ")]),
  |   |   |   |   CallExp(print,[
  |   |   |   |   | CallExp(Function2s,[
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | SimpleVar(fun))])]),
  |   |   |   |   CallExp(print,[
  |   |   |   |   | StringExp(". Next remaining arg: '")]),
  |   |   |   |   CallExp(print,[
  |   |   |   |   | CallExp(sexp2s,[
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   |   car))])]),
  |   |   |   |   CallExp(print,[
  |   |   |   |   | StringExp("'\n")])],
  |   |   |   | IfExp(
  |   |   |   |   IfExp(
  |   |   |   |   | OpExp(NeqOp,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | SimpleVar(parameters)),
  |   |   |   |   |   NilExp),
  |   |   |   |   | OpExp(EqOp,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   NilExp),
  |   |   |   |   | IntExp(0)),
  |   |   |   |   SeqExp[
  |   |   |   |   | CallExp(print,[
  |   |   |   |   |   StringExp("Too few arguments for function ")]),
  |   |   |   |   | CallExp(print,[
  |   |   |   |   |   CallExp(Function2s,[
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   SimpleVar(fun))])]),
  |   |   |   |   | CallExp(print,[
  |   |   |   |   |   StringExp(". Next remaining parameter: '")]),
  |   |   |   |   | CallExp(print,[
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   SimpleVar(parameters),
  |   |   |   |   |   |   car))]),
  |   |   |   |   | CallExp(print,[
  |   |   |   |   |   StringExp("'\n")])],
  |   |   |   |   SeqExp[]))))]],
  |   | SeqExp[
  |   |   CallExp(fill_env,[
  |   |   | VarExp(
  |   |   |   FieldVar(
  |   |   |   | SimpleVar(fun),
  |   |   |   | pars)),
  |   |   | VarExp(
  |   |   |   SimpleVar(args))]),
  |   |   CallExp(eval,[
  |   |   | VarExp(
  |   |   |   FieldVar(
  |   |   |   | SimpleVar(fun),
  |   |   |   | body)),
  |   |   | VarExp(
  |   |   |   SimpleVar(env))])])),
  | (lazy_fun_p,[
  |   (fun,true,Function)],
  |   SOME(int),
  |   LetExp([
  |   | VarDec(fun_name,true,NONE,
  |   |   VarExp(
  |   |   | FieldVar(
  |   |   |   SimpleVar(fun),
  |   |   |   name))),
  |   | VarDec(fun_typ,true,NONE,
  |   |   VarExp(
  |   |   | FieldVar(
  |   |   |   SimpleVar(fun),
  |   |   |   typ)))],
  |   | SeqExp[
  |   |   IfExp(
  |   |   | OpExp(EqOp,
  |   |   |   VarExp(
  |   |   |   | SimpleVar(fun_typ)),
  |   |   |   StringExp("internal")),
  |   |   | SeqExp[
  |   |   |   IfExp(
  |   |   |   | IfExp(
  |   |   |   |   IfExp(
  |   |   |   |   | IfExp(
  |   |   |   |   |   IfExp(
  |   |   |   |   |   | IfExp(
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | IfExp(
  |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   | IfExp(
  |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   SimpleVar(fun_name)),
  |   |   |   |   |   |   |   |   | StringExp("and")),
  |   |   |   |   |   |   |   |   IntExp(1),
  |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   SimpleVar(fun_name)),
  |   |   |   |   |   |   |   |   | StringExp("or"))),
  |   |   |   |   |   |   |   | IntExp(1),
  |   |   |   |   |   |   |   | OpExp(EqOp,
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(fun_name)),
  |   |   |   |   |   |   |   |   StringExp("ifb"))),
  |   |   |   |   |   |   |   IntExp(1),
  |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   SimpleVar(fun_name)),
  |   |   |   |   |   |   |   | StringExp("lambda"))),
  |   |   |   |   |   |   | IntExp(1),
  |   |   |   |   |   |   | OpExp(EqOp,
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | SimpleVar(fun_name)),
  |   |   |   |   |   |   |   StringExp("define"))),
  |   |   |   |   |   |   IntExp(1),
  |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   SimpleVar(fun_name)),
  |   |   |   |   |   |   | StringExp("let"))),
  |   |   |   |   |   | IntExp(1),
  |   |   |   |   |   | OpExp(EqOp,
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | SimpleVar(fun_name)),
  |   |   |   |   |   |   StringExp("let*"))),
  |   |   |   |   |   IntExp(1),
  |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   SimpleVar(fun_name)),
  |   |   |   |   |   | StringExp("letrec"))),
  |   |   |   |   | IntExp(1),
  |   |   |   |   | OpExp(EqOp,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | SimpleVar(fun_name)),
  |   |   |   |   |   StringExp("quote"))),
  |   |   |   |   IntExp(1),
  |   |   |   |   OpExp(EqOp,
  |   |   |   |   | VarExp(
  |   |   |   |   |   SimpleVar(fun_name)),
  |   |   |   |   | StringExp("quasiquote"))),
  |   |   |   | IntExp(1),
  |   |   |   | OpExp(EqOp,
  |   |   |   |   VarExp(
  |   |   |   |   | SimpleVar(fun_name)),
  |   |   |   |   StringExp("unquote")))],
  |   |   | IntExp(0))])),
  | (apply_internal_lazy,[
  |   (fun_name,true,string),
  |   (args,true,sexps),
  |   (env,true,env)],
  |   SOME(sexp),
  |   LetExp([
  |   | FunctionDec[
  |   |   (or,[
  |   |   | (args,true,sexps)],
  |   |   | SOME(sexp),
  |   |   | IfExp(
  |   |   |   OpExp(EqOp,
  |   |   |   | VarExp(
  |   |   |   |   SimpleVar(args)),
  |   |   |   | NilExp),
  |   |   |   CallExp(mk_bool,[
  |   |   |   | IntExp(0)]),
  |   |   |   LetExp([
  |   |   |   | VarDec(curr_arg,true,NONE,
  |   |   |   |   CallExp(eval,[
  |   |   |   |   | VarExp(
  |   |   |   |   |   FieldVar(
  |   |   |   |   |   | SimpleVar(args),
  |   |   |   |   |   | car)),
  |   |   |   |   | VarExp(
  |   |   |   |   |   SimpleVar(env))]))],
  |   |   |   | SeqExp[
  |   |   |   |   IfExp(
  |   |   |   |   | IfExp(
  |   |   |   |   |   CallExp(bool_p,[
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   SimpleVar(curr_arg))]),
  |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   | CallExp(get_bool,[
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | SimpleVar(curr_arg))]),
  |   |   |   |   |   | IntExp(0)),
  |   |   |   |   |   IntExp(0)),
  |   |   |   |   | CallExp(or,[
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   |   cdr))]),
  |   |   |   |   | VarExp(
  |   |   |   |   |   SimpleVar(curr_arg)))]))),
  |   |   (and,[
  |   |   | (args,true,sexps)],
  |   |   | SOME(sexp),
  |   |   | IfExp(
  |   |   |   OpExp(EqOp,
  |   |   |   | VarExp(
  |   |   |   |   SimpleVar(args)),
  |   |   |   | NilExp),
  |   |   |   CallExp(mk_bool,[
  |   |   |   | IntExp(1)]),
  |   |   |   LetExp([
  |   |   |   | VarDec(curr_arg,true,NONE,
  |   |   |   |   CallExp(eval,[
  |   |   |   |   | VarExp(
  |   |   |   |   |   FieldVar(
  |   |   |   |   |   | SimpleVar(args),
  |   |   |   |   |   | car)),
  |   |   |   |   | VarExp(
  |   |   |   |   |   SimpleVar(env))]))],
  |   |   |   | SeqExp[
  |   |   |   |   IfExp(
  |   |   |   |   | IfExp(
  |   |   |   |   |   CallExp(bool_p,[
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   SimpleVar(curr_arg))]),
  |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   | CallExp(get_bool,[
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | SimpleVar(curr_arg))]),
  |   |   |   |   |   | IntExp(0)),
  |   |   |   |   |   IntExp(0)),
  |   |   |   |   | CallExp(mk_bool,[
  |   |   |   |   |   IntExp(0)]),
  |   |   |   |   | IfExp(
  |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   | SimpleVar(args),
  |   |   |   |   |   |   | cdr)),
  |   |   |   |   |   | NilExp),
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | SimpleVar(curr_arg)),
  |   |   |   |   |   CallExp(and,[
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   | SimpleVar(args),
  |   |   |   |   |   |   | cdr))])))]))),
  |   |   (ifb,[
  |   |   | (args,true,sexps)],
  |   |   | SOME(sexp),
  |   |   | IfExp(
  |   |   |   IfExp(
  |   |   |   | IfExp(
  |   |   |   |   IfExp(
  |   |   |   |   | OpExp(EqOp,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   NilExp),
  |   |   |   |   | IntExp(1),
  |   |   |   |   | OpExp(EqOp,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   |   cdr)),
  |   |   |   |   |   NilExp)),
  |   |   |   |   IntExp(1),
  |   |   |   |   OpExp(EqOp,
  |   |   |   |   | VarExp(
  |   |   |   |   |   FieldVar(
  |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   |   cdr),
  |   |   |   |   |   | cdr)),
  |   |   |   |   | NilExp)),
  |   |   |   | IntExp(1),
  |   |   |   | SeqExp[
  |   |   |   |   IfExp(
  |   |   |   |   | OpExp(NeqOp,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   | SimpleVar(args),
  |   |   |   |   |   |   | cdr),
  |   |   |   |   |   |   cdr)),
  |   |   |   |   |   NilExp),
  |   |   |   |   | OpExp(NeqOp,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   |   |   cdr),
  |   |   |   |   |   |   | cdr),
  |   |   |   |   |   |   cdr)),
  |   |   |   |   |   NilExp),
  |   |   |   |   | IntExp(0))]),
  |   |   |   SeqExp[
  |   |   |   | CallExp(print,[
  |   |   |   |   StringExp("ifb needs exactly 3 arguments.\n")]),
  |   |   |   | NilExp],
  |   |   |   LetExp([
  |   |   |   | VarDec(cond_arg,true,NONE,
  |   |   |   |   CallExp(eval,[
  |   |   |   |   | VarExp(
  |   |   |   |   |   FieldVar(
  |   |   |   |   |   | SimpleVar(args),
  |   |   |   |   |   | car)),
  |   |   |   |   | VarExp(
  |   |   |   |   |   SimpleVar(env))])),
  |   |   |   | VarDec(then_sexp,true,NONE,
  |   |   |   |   VarExp(
  |   |   |   |   | FieldVar(
  |   |   |   |   |   FieldVar(
  |   |   |   |   |   | SimpleVar(args),
  |   |   |   |   |   | cdr),
  |   |   |   |   |   car))),
  |   |   |   | VarDec(else_sexp,true,NONE,
  |   |   |   |   VarExp(
  |   |   |   |   | FieldVar(
  |   |   |   |   |   FieldVar(
  |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   |   cdr),
  |   |   |   |   |   | cdr),
  |   |   |   |   |   car)))],
  |   |   |   | SeqExp[
  |   |   |   |   IfExp(
  |   |   |   |   | CallExp(bool_p,[
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | SimpleVar(cond_arg))]),
  |   |   |   |   | IfExp(
  |   |   |   |   |   CallExp(get_bool,[
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   SimpleVar(cond_arg))]),
  |   |   |   |   |   CallExp(eval,[
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   SimpleVar(then_sexp)),
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   SimpleVar(env))]),
  |   |   |   |   |   CallExp(eval,[
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   SimpleVar(else_sexp)),
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   SimpleVar(env))])),
  |   |   |   |   | SeqExp[
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | StringExp("Illegal argument as condition in ifb, sexp: '")]),
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | CallExp(sexp2s,[
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | SimpleVar(cond_arg))])]),
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | StringExp("'\n")]),
  |   |   |   |   |   NilExp])]))),
  |   |   (lambda,[
  |   |   | (args,true,sexps)],
  |   |   | SOME(sexp),
  |   |   | IfExp(
  |   |   |   IfExp(
  |   |   |   | IfExp(
  |   |   |   |   OpExp(EqOp,
  |   |   |   |   | VarExp(
  |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   | NilExp),
  |   |   |   |   IntExp(1),
  |   |   |   |   OpExp(EqOp,
  |   |   |   |   | VarExp(
  |   |   |   |   |   FieldVar(
  |   |   |   |   |   | SimpleVar(args),
  |   |   |   |   |   | cdr)),
  |   |   |   |   | NilExp)),
  |   |   |   | IntExp(1),
  |   |   |   | SeqExp[
  |   |   |   |   IfExp(
  |   |   |   |   | OpExp(NeqOp,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   |   cdr)),
  |   |   |   |   |   NilExp),
  |   |   |   |   | OpExp(NeqOp,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   | SimpleVar(args),
  |   |   |   |   |   |   | cdr),
  |   |   |   |   |   |   cdr)),
  |   |   |   |   |   NilExp),
  |   |   |   |   | IntExp(0))]),
  |   |   |   SeqExp[
  |   |   |   | CallExp(print,[
  |   |   |   |   StringExp("lambda needs exactly 2 arguments.\n")]),
  |   |   |   | NilExp],
  |   |   |   LetExp([
  |   |   |   | VarDec(parameters_sexp,true,NONE,
  |   |   |   |   VarExp(
  |   |   |   |   | FieldVar(
  |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   car))),
  |   |   |   | VarDec(body_sexp,true,NONE,
  |   |   |   |   VarExp(
  |   |   |   |   | FieldVar(
  |   |   |   |   |   FieldVar(
  |   |   |   |   |   | SimpleVar(args),
  |   |   |   |   |   | cdr),
  |   |   |   |   |   car)))],
  |   |   |   | SeqExp[
  |   |   |   |   IfExp(
  |   |   |   |   | CallExp(sexps_p,[
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | SimpleVar(parameters_sexp))]),
  |   |   |   |   | LetExp([
  |   |   |   |   |   VarDec(parameters,true,SOME(parameters),
  |   |   |   |   |   | NilExp),
  |   |   |   |   |   FunctionDec[
  |   |   |   |   |   | (fill_parameters,[
  |   |   |   |   |   |   (sexps,true,sexps)],
  |   |   |   |   |   |   NONE,
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | OpExp(NeqOp,
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | SimpleVar(sexps)),
  |   |   |   |   |   |   |   NilExp),
  |   |   |   |   |   |   | SeqExp[
  |   |   |   |   |   |   |   CallExp(fill_parameters,[
  |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   | SimpleVar(sexps),
  |   |   |   |   |   |   |   |   | cdr))]),
  |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   | CallExp(sym_p,[
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   SimpleVar(sexps),
  |   |   |   |   |   |   |   |   |   car))]),
  |   |   |   |   |   |   |   | AssignExp(
  |   |   |   |   |   |   |   |   SimpleVar(parameters),
  |   |   |   |   |   |   |   |   RecordExp(parameters,[
  |   |   |   |   |   |   |   |   | (car,
  |   |   |   |   |   |   |   |   |   CallExp(get_sym,[
  |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   | SimpleVar(sexps),
  |   |   |   |   |   |   |   |   |   |   | car))])),
  |   |   |   |   |   |   |   |   | (cdr,
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | SimpleVar(parameters)))])),
  |   |   |   |   |   |   |   | SeqExp[
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | StringExp("Illegal parameter in lambda expression: '")]),
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   |   SimpleVar(sexps),
  |   |   |   |   |   |   |   |   |   |   car))])]),
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | StringExp("'\n")])])]))]],
  |   |   |   |   |   SeqExp[
  |   |   |   |   |   | CallExp(fill_parameters,[
  |   |   |   |   |   |   CallExp(get_sexps,[
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   SimpleVar(parameters_sexp))])]),
  |   |   |   |   |   | CallExp(mk_fun,[
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | SimpleVar(parameters)),
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | SimpleVar(body_sexp)),
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | SimpleVar(env))])]),
  |   |   |   |   | SeqExp[
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | StringExp("Parameter list in lambda expression has to be a list: '")]),
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | CallExp(sexp2s,[
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | SimpleVar(parameters_sexp))])]),
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | StringExp("'\n")]),
  |   |   |   |   |   NilExp])]))),
  |   |   (let_,[
  |   |   | (args,true,sexps)],
  |   |   | SOME(sexp),
  |   |   | IfExp(
  |   |   |   IfExp(
  |   |   |   | IfExp(
  |   |   |   |   OpExp(EqOp,
  |   |   |   |   | VarExp(
  |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   | NilExp),
  |   |   |   |   IntExp(1),
  |   |   |   |   OpExp(EqOp,
  |   |   |   |   | VarExp(
  |   |   |   |   |   FieldVar(
  |   |   |   |   |   | SimpleVar(args),
  |   |   |   |   |   | cdr)),
  |   |   |   |   | NilExp)),
  |   |   |   | IntExp(1),
  |   |   |   | SeqExp[
  |   |   |   |   IfExp(
  |   |   |   |   | OpExp(NeqOp,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   |   cdr)),
  |   |   |   |   |   NilExp),
  |   |   |   |   | OpExp(NeqOp,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   | SimpleVar(args),
  |   |   |   |   |   |   | cdr),
  |   |   |   |   |   |   cdr)),
  |   |   |   |   |   NilExp),
  |   |   |   |   | IntExp(0))]),
  |   |   |   SeqExp[
  |   |   |   | CallExp(print,[
  |   |   |   |   StringExp("let needs exactly 2 arguments.\n")]),
  |   |   |   | NilExp],
  |   |   |   LetExp([
  |   |   |   | VarDec(bindings_sexp,true,NONE,
  |   |   |   |   VarExp(
  |   |   |   |   | FieldVar(
  |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   car))),
  |   |   |   | VarDec(body_sexp,true,NONE,
  |   |   |   |   VarExp(
  |   |   |   |   | FieldVar(
  |   |   |   |   |   FieldVar(
  |   |   |   |   |   | SimpleVar(args),
  |   |   |   |   |   | cdr),
  |   |   |   |   |   car))),
  |   |   |   | VarDec(body_env,true,NONE,
  |   |   |   |   VarExp(
  |   |   |   |   | SimpleVar(env))),
  |   |   |   | FunctionDec[
  |   |   |   |   (fill_env,[
  |   |   |   |   | (bindings,true,sexps)],
  |   |   |   |   | NONE,
  |   |   |   |   | IfExp(
  |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   SimpleVar(bindings)),
  |   |   |   |   |   | NilExp),
  |   |   |   |   |   LetExp([
  |   |   |   |   |   | VarDec(curr_binding_sexp,true,NONE,
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   SimpleVar(bindings),
  |   |   |   |   |   |   |   car)))],
  |   |   |   |   |   | SeqExp[
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | CallExp(sexps_p,[
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | SimpleVar(curr_binding_sexp))]),
  |   |   |   |   |   |   | LetExp([
  |   |   |   |   |   |   |   VarDec(curr_binding,true,NONE,
  |   |   |   |   |   |   |   | CallExp(get_sexps,[
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(curr_binding_sexp))]))],
  |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   | IfExp(
  |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   | IfExp(
  |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_binding)),
  |   |   |   |   |   |   |   |   |   | NilExp),
  |   |   |   |   |   |   |   |   |   IntExp(1),
  |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   | SimpleVar(curr_binding),
  |   |   |   |   |   |   |   |   |   |   | cdr)),
  |   |   |   |   |   |   |   |   |   | NilExp)),
  |   |   |   |   |   |   |   |   | IntExp(1),
  |   |   |   |   |   |   |   |   | SeqExp[
  |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   | OpExp(NeqOp,
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_binding),
  |   |   |   |   |   |   |   |   |   |   |   cdr)),
  |   |   |   |   |   |   |   |   |   |   NilExp),
  |   |   |   |   |   |   |   |   |   | OpExp(NeqOp,
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_binding),
  |   |   |   |   |   |   |   |   |   |   |   cdr)),
  |   |   |   |   |   |   |   |   |   |   NilExp),
  |   |   |   |   |   |   |   |   |   | IntExp(0))]),
  |   |   |   |   |   |   |   |   LetExp([
  |   |   |   |   |   |   |   |   | VarDec(name,true,NONE,
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_binding),
  |   |   |   |   |   |   |   |   |   |   car))),
  |   |   |   |   |   |   |   |   | VarDec(value_sexp,true,NONE,
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   | SimpleVar(curr_binding),
  |   |   |   |   |   |   |   |   |   |   | cdr),
  |   |   |   |   |   |   |   |   |   |   car)))],
  |   |   |   |   |   |   |   |   | SeqExp[
  |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   | CallExp(sym_p,[
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | SimpleVar(name))]),
  |   |   |   |   |   |   |   |   |   | SeqExp[
  |   |   |   |   |   |   |   |   |   |   AssignExp(
  |   |   |   |   |   |   |   |   |   |   | SimpleVar(body_env),
  |   |   |   |   |   |   |   |   |   |   | RecordExp(env,[
  |   |   |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   |   |   | RecordExp(env_entry,[
  |   |   |   |   |   |   |   |   |   |   |   |   (key,
  |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(get_sym,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(name))])),
  |   |   |   |   |   |   |   |   |   |   |   |   (value,
  |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(eval,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(value_sexp)),
  |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(env))]))])),
  |   |   |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(body_env)))])),
  |   |   |   |   |   |   |   |   |   |   CallExp(fill_env,[
  |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(bindings),
  |   |   |   |   |   |   |   |   |   |   |   | cdr))])],
  |   |   |   |   |   |   |   |   |   | SeqExp[
  |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   | StringExp("Name in binding in let has to be a symbol: '")]),
  |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   | CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(name))])]),
  |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   | StringExp("'\n")])])]),
  |   |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   |   | CallExp(print,[
  |   |   |   |   |   |   |   |   |   StringExp("Binding in let binding have to be of length 2: '")]),
  |   |   |   |   |   |   |   |   | CallExp(print,[
  |   |   |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_binding_sexp))])]),
  |   |   |   |   |   |   |   |   | CallExp(print,[
  |   |   |   |   |   |   |   |   |   StringExp("'\n")])])]),
  |   |   |   |   |   |   | SeqExp[
  |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   | StringExp("Illegal binding in let bindings: '")]),
  |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   | CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(curr_binding_sexp))])]),
  |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   | StringExp("'\n")])])])))]],
  |   |   |   | SeqExp[
  |   |   |   |   IfExp(
  |   |   |   |   | CallExp(sexps_p,[
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | SimpleVar(bindings_sexp))]),
  |   |   |   |   | SeqExp[
  |   |   |   |   |   CallExp(fill_env,[
  |   |   |   |   |   | CallExp(get_sexps,[
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | SimpleVar(bindings_sexp))])]),
  |   |   |   |   |   CallExp(eval,[
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   SimpleVar(body_sexp)),
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   SimpleVar(body_env))])],
  |   |   |   |   | SeqExp[
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | StringExp("Bindings list in let expression has to be a list: '")]),
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | CallExp(sexp2s,[
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | SimpleVar(bindings_sexp))])]),
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | StringExp("'\n")]),
  |   |   |   |   |   NilExp])]))),
  |   |   (letstar,[
  |   |   | (args,true,sexps)],
  |   |   | SOME(sexp),
  |   |   | IfExp(
  |   |   |   IfExp(
  |   |   |   | IfExp(
  |   |   |   |   OpExp(EqOp,
  |   |   |   |   | VarExp(
  |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   | NilExp),
  |   |   |   |   IntExp(1),
  |   |   |   |   OpExp(EqOp,
  |   |   |   |   | VarExp(
  |   |   |   |   |   FieldVar(
  |   |   |   |   |   | SimpleVar(args),
  |   |   |   |   |   | cdr)),
  |   |   |   |   | NilExp)),
  |   |   |   | IntExp(1),
  |   |   |   | SeqExp[
  |   |   |   |   IfExp(
  |   |   |   |   | OpExp(NeqOp,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   |   cdr)),
  |   |   |   |   |   NilExp),
  |   |   |   |   | OpExp(NeqOp,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   | SimpleVar(args),
  |   |   |   |   |   |   | cdr),
  |   |   |   |   |   |   cdr)),
  |   |   |   |   |   NilExp),
  |   |   |   |   | IntExp(0))]),
  |   |   |   SeqExp[
  |   |   |   | CallExp(print,[
  |   |   |   |   StringExp("let* needs exactly 2 arguments.\n")]),
  |   |   |   | NilExp],
  |   |   |   LetExp([
  |   |   |   | VarDec(bindings_sexp,true,NONE,
  |   |   |   |   VarExp(
  |   |   |   |   | FieldVar(
  |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   car))),
  |   |   |   | VarDec(body_sexp,true,NONE,
  |   |   |   |   VarExp(
  |   |   |   |   | FieldVar(
  |   |   |   |   |   FieldVar(
  |   |   |   |   |   | SimpleVar(args),
  |   |   |   |   |   | cdr),
  |   |   |   |   |   car))),
  |   |   |   | VarDec(body_env,true,NONE,
  |   |   |   |   VarExp(
  |   |   |   |   | SimpleVar(env))),
  |   |   |   | FunctionDec[
  |   |   |   |   (fill_env,[
  |   |   |   |   | (bindings,true,sexps)],
  |   |   |   |   | NONE,
  |   |   |   |   | IfExp(
  |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   SimpleVar(bindings)),
  |   |   |   |   |   | NilExp),
  |   |   |   |   |   LetExp([
  |   |   |   |   |   | VarDec(curr_binding_sexp,true,NONE,
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   SimpleVar(bindings),
  |   |   |   |   |   |   |   car)))],
  |   |   |   |   |   | SeqExp[
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | CallExp(sexps_p,[
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | SimpleVar(curr_binding_sexp))]),
  |   |   |   |   |   |   | LetExp([
  |   |   |   |   |   |   |   VarDec(curr_binding,true,NONE,
  |   |   |   |   |   |   |   | CallExp(get_sexps,[
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(curr_binding_sexp))]))],
  |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   | IfExp(
  |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   | IfExp(
  |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_binding)),
  |   |   |   |   |   |   |   |   |   | NilExp),
  |   |   |   |   |   |   |   |   |   IntExp(1),
  |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   | SimpleVar(curr_binding),
  |   |   |   |   |   |   |   |   |   |   | cdr)),
  |   |   |   |   |   |   |   |   |   | NilExp)),
  |   |   |   |   |   |   |   |   | IntExp(1),
  |   |   |   |   |   |   |   |   | SeqExp[
  |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   | OpExp(NeqOp,
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_binding),
  |   |   |   |   |   |   |   |   |   |   |   cdr)),
  |   |   |   |   |   |   |   |   |   |   NilExp),
  |   |   |   |   |   |   |   |   |   | OpExp(NeqOp,
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_binding),
  |   |   |   |   |   |   |   |   |   |   |   cdr)),
  |   |   |   |   |   |   |   |   |   |   NilExp),
  |   |   |   |   |   |   |   |   |   | IntExp(0))]),
  |   |   |   |   |   |   |   |   LetExp([
  |   |   |   |   |   |   |   |   | VarDec(name,true,NONE,
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_binding),
  |   |   |   |   |   |   |   |   |   |   car))),
  |   |   |   |   |   |   |   |   | VarDec(value_sexp,true,NONE,
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   | SimpleVar(curr_binding),
  |   |   |   |   |   |   |   |   |   |   | cdr),
  |   |   |   |   |   |   |   |   |   |   car)))],
  |   |   |   |   |   |   |   |   | SeqExp[
  |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   | CallExp(sym_p,[
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | SimpleVar(name))]),
  |   |   |   |   |   |   |   |   |   | SeqExp[
  |   |   |   |   |   |   |   |   |   |   AssignExp(
  |   |   |   |   |   |   |   |   |   |   | SimpleVar(body_env),
  |   |   |   |   |   |   |   |   |   |   | RecordExp(env,[
  |   |   |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   |   |   | RecordExp(env_entry,[
  |   |   |   |   |   |   |   |   |   |   |   |   (key,
  |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(get_sym,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(name))])),
  |   |   |   |   |   |   |   |   |   |   |   |   (value,
  |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(eval,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(value_sexp)),
  |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(body_env))]))])),
  |   |   |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(body_env)))])),
  |   |   |   |   |   |   |   |   |   |   CallExp(fill_env,[
  |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(bindings),
  |   |   |   |   |   |   |   |   |   |   |   | cdr))])],
  |   |   |   |   |   |   |   |   |   | SeqExp[
  |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   | StringExp("Name in binding in let* has to be a symbol: '")]),
  |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   | CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(name))])]),
  |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   | StringExp("'\n")])])]),
  |   |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   |   | CallExp(print,[
  |   |   |   |   |   |   |   |   |   StringExp("Binding in let* binding have to be of length 2: '")]),
  |   |   |   |   |   |   |   |   | CallExp(print,[
  |   |   |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_binding_sexp))])]),
  |   |   |   |   |   |   |   |   | CallExp(print,[
  |   |   |   |   |   |   |   |   |   StringExp("'\n")])])]),
  |   |   |   |   |   |   | SeqExp[
  |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   | StringExp("Illegal binding in let* bindings: '")]),
  |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   | CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(curr_binding_sexp))])]),
  |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   | StringExp("'\n")])])])))]],
  |   |   |   | SeqExp[
  |   |   |   |   IfExp(
  |   |   |   |   | CallExp(sexps_p,[
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | SimpleVar(bindings_sexp))]),
  |   |   |   |   | SeqExp[
  |   |   |   |   |   CallExp(fill_env,[
  |   |   |   |   |   | CallExp(get_sexps,[
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | SimpleVar(bindings_sexp))])]),
  |   |   |   |   |   CallExp(eval,[
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   SimpleVar(body_sexp)),
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   SimpleVar(body_env))])],
  |   |   |   |   | SeqExp[
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | StringExp("Bindings list in let* expression has to be a list: '")]),
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | CallExp(sexp2s,[
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | SimpleVar(bindings_sexp))])]),
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | StringExp("'\n")]),
  |   |   |   |   |   NilExp])]))),
  |   |   (letrec,[
  |   |   | (args,true,sexps)],
  |   |   | SOME(sexp),
  |   |   | IfExp(
  |   |   |   IfExp(
  |   |   |   | IfExp(
  |   |   |   |   OpExp(EqOp,
  |   |   |   |   | VarExp(
  |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   | NilExp),
  |   |   |   |   IntExp(1),
  |   |   |   |   OpExp(EqOp,
  |   |   |   |   | VarExp(
  |   |   |   |   |   FieldVar(
  |   |   |   |   |   | SimpleVar(args),
  |   |   |   |   |   | cdr)),
  |   |   |   |   | NilExp)),
  |   |   |   | IntExp(1),
  |   |   |   | SeqExp[
  |   |   |   |   IfExp(
  |   |   |   |   | OpExp(NeqOp,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   |   cdr)),
  |   |   |   |   |   NilExp),
  |   |   |   |   | OpExp(NeqOp,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   | SimpleVar(args),
  |   |   |   |   |   |   | cdr),
  |   |   |   |   |   |   cdr)),
  |   |   |   |   |   NilExp),
  |   |   |   |   | IntExp(0))]),
  |   |   |   SeqExp[
  |   |   |   | CallExp(print,[
  |   |   |   |   StringExp("letrec needs exactly 2 arguments.\n")]),
  |   |   |   | NilExp],
  |   |   |   LetExp([
  |   |   |   | VarDec(bindings_sexp,true,NONE,
  |   |   |   |   VarExp(
  |   |   |   |   | FieldVar(
  |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   car))),
  |   |   |   | VarDec(body_sexp,true,NONE,
  |   |   |   |   VarExp(
  |   |   |   |   | FieldVar(
  |   |   |   |   |   FieldVar(
  |   |   |   |   |   | SimpleVar(args),
  |   |   |   |   |   | cdr),
  |   |   |   |   |   car))),
  |   |   |   | TypeDec[
  |   |   |   |   (partial,
  |   |   |   |   | RecordTy[
  |   |   |   |   |   (value,true,sexp),
  |   |   |   |   |   (env_entry,true,env_entry),
  |   |   |   |   |   (value_sexp,true,sexp)]),
  |   |   |   |   (partials,
  |   |   |   |   | RecordTy[
  |   |   |   |   |   (car,true,partial),
  |   |   |   |   |   (cdr,true,partials)])],
  |   |   |   | FunctionDec[
  |   |   |   |   (get_env_extension,[
  |   |   |   |   | (bindings,true,sexps)],
  |   |   |   |   | SOME(partials),
  |   |   |   |   | IfExp(
  |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   SimpleVar(bindings)),
  |   |   |   |   |   | NilExp),
  |   |   |   |   |   NilExp,
  |   |   |   |   |   LetExp([
  |   |   |   |   |   | VarDec(curr_binding_sexp,true,NONE,
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   SimpleVar(bindings),
  |   |   |   |   |   |   |   car)))],
  |   |   |   |   |   | SeqExp[
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | CallExp(sexps_p,[
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | SimpleVar(curr_binding_sexp))]),
  |   |   |   |   |   |   | LetExp([
  |   |   |   |   |   |   |   VarDec(curr_binding,true,NONE,
  |   |   |   |   |   |   |   | CallExp(get_sexps,[
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(curr_binding_sexp))]))],
  |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   | IfExp(
  |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   | IfExp(
  |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_binding)),
  |   |   |   |   |   |   |   |   |   | NilExp),
  |   |   |   |   |   |   |   |   |   IntExp(1),
  |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   | SimpleVar(curr_binding),
  |   |   |   |   |   |   |   |   |   |   | cdr)),
  |   |   |   |   |   |   |   |   |   | NilExp)),
  |   |   |   |   |   |   |   |   | IntExp(1),
  |   |   |   |   |   |   |   |   | SeqExp[
  |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   | OpExp(NeqOp,
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_binding),
  |   |   |   |   |   |   |   |   |   |   |   cdr)),
  |   |   |   |   |   |   |   |   |   |   NilExp),
  |   |   |   |   |   |   |   |   |   | OpExp(NeqOp,
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_binding),
  |   |   |   |   |   |   |   |   |   |   |   cdr)),
  |   |   |   |   |   |   |   |   |   |   NilExp),
  |   |   |   |   |   |   |   |   |   | IntExp(0))]),
  |   |   |   |   |   |   |   |   LetExp([
  |   |   |   |   |   |   |   |   | VarDec(name,true,NONE,
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_binding),
  |   |   |   |   |   |   |   |   |   |   car))),
  |   |   |   |   |   |   |   |   | VarDec(value_sexp,true,NONE,
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   | SimpleVar(curr_binding),
  |   |   |   |   |   |   |   |   |   |   | cdr),
  |   |   |   |   |   |   |   |   |   |   car)))],
  |   |   |   |   |   |   |   |   | SeqExp[
  |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   | CallExp(sym_p,[
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | SimpleVar(name))]),
  |   |   |   |   |   |   |   |   |   | LetExp([
  |   |   |   |   |   |   |   |   |   |   VarDec(value,true,NONE,
  |   |   |   |   |   |   |   |   |   |   | CallExp(mk_mt_sexp,[]))],
  |   |   |   |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   |   |   |   | RecordExp(partials,[
  |   |   |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   |   |   | RecordExp(partial,[
  |   |   |   |   |   |   |   |   |   |   |   |   (value,
  |   |   |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(value))),
  |   |   |   |   |   |   |   |   |   |   |   |   (env_entry,
  |   |   |   |   |   |   |   |   |   |   |   |   | RecordExp(env_entry,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   (key,
  |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(get_sym,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(name))])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   (value,
  |   |   |   |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(value)))])),
  |   |   |   |   |   |   |   |   |   |   |   |   (value_sexp,
  |   |   |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(value_sexp)))])),
  |   |   |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   |   |   | CallExp(get_env_extension,[
  |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(bindings),
  |   |   |   |   |   |   |   |   |   |   |   |   |   cdr))]))])]),
  |   |   |   |   |   |   |   |   |   | SeqExp[
  |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   | StringExp("Name in binding in letrec has to be a symbol: '")]),
  |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   | CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(name))])]),
  |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   | StringExp("'\n")]),
  |   |   |   |   |   |   |   |   |   |   NilExp])]),
  |   |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   |   | CallExp(print,[
  |   |   |   |   |   |   |   |   |   StringExp("Binding in letrec binding have to be of length 2: '")]),
  |   |   |   |   |   |   |   |   | CallExp(print,[
  |   |   |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_binding_sexp))])]),
  |   |   |   |   |   |   |   |   | CallExp(print,[
  |   |   |   |   |   |   |   |   |   StringExp("'\n")]),
  |   |   |   |   |   |   |   |   | NilExp])]),
  |   |   |   |   |   |   | SeqExp[
  |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   | StringExp("Illegal binding in letrec bindings: '")]),
  |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   | CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(curr_binding_sexp))])]),
  |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   | StringExp("'\n")]),
  |   |   |   |   |   |   |   NilExp])]))),
  |   |   |   |   (fill_body_env,[
  |   |   |   |   | (partials,true,partials)],
  |   |   |   |   | SOME(env),
  |   |   |   |   | IfExp(
  |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   SimpleVar(partials)),
  |   |   |   |   |   | NilExp),
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | SimpleVar(env)),
  |   |   |   |   |   RecordExp(env,[
  |   |   |   |   |   | (car,
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   | SimpleVar(partials),
  |   |   |   |   |   |   |   | car),
  |   |   |   |   |   |   |   env_entry))),
  |   |   |   |   |   | (cdr,
  |   |   |   |   |   |   CallExp(fill_body_env,[
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   | SimpleVar(partials),
  |   |   |   |   |   |   |   | cdr))]))])))],
  |   |   |   | VarDec(extension,true,NONE,
  |   |   |   |   IfExp(
  |   |   |   |   | CallExp(sexps_p,[
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | SimpleVar(bindings_sexp))]),
  |   |   |   |   | CallExp(get_env_extension,[
  |   |   |   |   |   CallExp(get_sexps,[
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   SimpleVar(bindings_sexp))])]),
  |   |   |   |   | SeqExp[
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | StringExp("Bindings list in letrec expression has to be a list: '")]),
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | CallExp(sexp2s,[
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | SimpleVar(bindings_sexp))])]),
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | StringExp("'\n")]),
  |   |   |   |   |   NilExp])),
  |   |   |   | VarDec(body_env,true,NONE,
  |   |   |   |   CallExp(fill_body_env,[
  |   |   |   |   | VarExp(
  |   |   |   |   |   SimpleVar(extension))])),
  |   |   |   | FunctionDec[
  |   |   |   |   (complete_partials,[
  |   |   |   |   | (partials,true,partials)],
  |   |   |   |   | NONE,
  |   |   |   |   | IfExp(
  |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   SimpleVar(partials)),
  |   |   |   |   |   | NilExp),
  |   |   |   |   |   LetExp([
  |   |   |   |   |   | VarDec(value_sexp,true,NONE,
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   | SimpleVar(partials),
  |   |   |   |   |   |   |   | car),
  |   |   |   |   |   |   |   value_sexp))),
  |   |   |   |   |   | VarDec(placeholder_value,true,NONE,
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   | SimpleVar(partials),
  |   |   |   |   |   |   |   | car),
  |   |   |   |   |   |   |   value))),
  |   |   |   |   |   | VarDec(actual_value,true,NONE,
  |   |   |   |   |   |   CallExp(eval,[
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   SimpleVar(value_sexp)),
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   SimpleVar(body_env))]))],
  |   |   |   |   |   | SeqExp[
  |   |   |   |   |   |   CallExp(copy_value,[
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   SimpleVar(actual_value)),
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   SimpleVar(placeholder_value))]),
  |   |   |   |   |   |   CallExp(complete_partials,[
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   | SimpleVar(partials),
  |   |   |   |   |   |   |   | cdr))])])))]],
  |   |   |   | SeqExp[
  |   |   |   |   CallExp(complete_partials,[
  |   |   |   |   | VarExp(
  |   |   |   |   |   SimpleVar(extension))]),
  |   |   |   |   CallExp(eval,[
  |   |   |   |   | VarExp(
  |   |   |   |   |   SimpleVar(body_sexp)),
  |   |   |   |   | VarExp(
  |   |   |   |   |   SimpleVar(body_env))])]))),
  |   |   (quote,[
  |   |   | (args,true,sexps)],
  |   |   | SOME(sexp),
  |   |   | IfExp(
  |   |   |   IfExp(
  |   |   |   | OpExp(EqOp,
  |   |   |   |   VarExp(
  |   |   |   |   | SimpleVar(args)),
  |   |   |   |   NilExp),
  |   |   |   | IntExp(1),
  |   |   |   | SeqExp[
  |   |   |   |   IfExp(
  |   |   |   |   | OpExp(NeqOp,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   NilExp),
  |   |   |   |   | OpExp(NeqOp,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   |   cdr)),
  |   |   |   |   |   NilExp),
  |   |   |   |   | IntExp(0))]),
  |   |   |   SeqExp[
  |   |   |   | CallExp(print,[
  |   |   |   |   StringExp("quote needs exactly 1 argument.\n")]),
  |   |   |   | NilExp],
  |   |   |   VarExp(
  |   |   |   | FieldVar(
  |   |   |   |   SimpleVar(args),
  |   |   |   |   car)))),
  |   |   (define,[
  |   |   | (args,true,sexps)],
  |   |   | SOME(sexp),
  |   |   | IfExp(
  |   |   |   IfExp(
  |   |   |   | IfExp(
  |   |   |   |   OpExp(EqOp,
  |   |   |   |   | VarExp(
  |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   | NilExp),
  |   |   |   |   IntExp(1),
  |   |   |   |   OpExp(EqOp,
  |   |   |   |   | VarExp(
  |   |   |   |   |   FieldVar(
  |   |   |   |   |   | SimpleVar(args),
  |   |   |   |   |   | cdr)),
  |   |   |   |   | NilExp)),
  |   |   |   | IntExp(1),
  |   |   |   | SeqExp[
  |   |   |   |   IfExp(
  |   |   |   |   | OpExp(NeqOp,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   |   cdr)),
  |   |   |   |   |   NilExp),
  |   |   |   |   | OpExp(NeqOp,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   | SimpleVar(args),
  |   |   |   |   |   |   | cdr),
  |   |   |   |   |   |   cdr)),
  |   |   |   |   |   NilExp),
  |   |   |   |   | IntExp(0))]),
  |   |   |   SeqExp[
  |   |   |   | CallExp(print,[
  |   |   |   |   StringExp("define needs exactly 2 arguments.\n")]),
  |   |   |   | NilExp],
  |   |   |   LetExp([
  |   |   |   | VarDec(name,true,NONE,
  |   |   |   |   VarExp(
  |   |   |   |   | FieldVar(
  |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   car))),
  |   |   |   | VarDec(body,true,NONE,
  |   |   |   |   VarExp(
  |   |   |   |   | FieldVar(
  |   |   |   |   |   FieldVar(
  |   |   |   |   |   | SimpleVar(args),
  |   |   |   |   |   | cdr),
  |   |   |   |   |   car)))],
  |   |   |   | SeqExp[
  |   |   |   |   IfExp(
  |   |   |   |   | CallExp(not,[
  |   |   |   |   |   CallExp(sym_p,[
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   SimpleVar(name))])]),
  |   |   |   |   | SeqExp[
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | StringExp("Name in define has to be a symbol: '")]),
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | CallExp(sexp2s,[
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | SimpleVar(name))])]),
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | StringExp("'\n")]),
  |   |   |   |   |   NilExp],
  |   |   |   |   | SeqExp[
  |   |   |   |   |   AssignExp(
  |   |   |   |   |   | SimpleVar(initial_env),
  |   |   |   |   |   | RecordExp(env,[
  |   |   |   |   |   |   (car,
  |   |   |   |   |   |   | RecordExp(env_entry,[
  |   |   |   |   |   |   |   (key,
  |   |   |   |   |   |   |   | CallExp(get_sym,[
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(name))])),
  |   |   |   |   |   |   |   (value,
  |   |   |   |   |   |   |   | CallExp(eval,[
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(body)),
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(env))]))])),
  |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   SimpleVar(initial_env)))])),
  |   |   |   |   |   CallExp(mk_sexps,[
  |   |   |   |   |   | NilExp])])]))),
  |   |   (quasiquote,[
  |   |   | (args,true,sexps)],
  |   |   | SOME(sexp),
  |   |   | LetExp([
  |   |   |   FunctionDec[
  |   |   |   | (quasi,[
  |   |   |   |   (args,true,sexps),
  |   |   |   |   (level,true,int)],
  |   |   |   |   SOME(sexp),
  |   |   |   |   IfExp(
  |   |   |   |   | IfExp(
  |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   | NilExp),
  |   |   |   |   |   IntExp(1),
  |   |   |   |   |   SeqExp[
  |   |   |   |   |   | IfExp(
  |   |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   | SimpleVar(args),
  |   |   |   |   |   |   |   | cdr)),
  |   |   |   |   |   |   | NilExp),
  |   |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   |   |   |   cdr),
  |   |   |   |   |   |   |   | cdr)),
  |   |   |   |   |   |   | NilExp),
  |   |   |   |   |   |   IntExp(0))]),
  |   |   |   |   | SeqExp[
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | StringExp("quasiquote needs exactly 1 argument.\n")]),
  |   |   |   |   |   NilExp],
  |   |   |   |   | IfExp(
  |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   SimpleVar(level)),
  |   |   |   |   |   | IntExp(0)),
  |   |   |   |   |   CallExp(eval,[
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   | SimpleVar(args),
  |   |   |   |   |   |   | car)),
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   SimpleVar(env))]),
  |   |   |   |   |   IfExp(
  |   |   |   |   |   | CallExp(sexps_p,[
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   |   |   car))]),
  |   |   |   |   |   | LetExp([
  |   |   |   |   |   |   VarDec(ss,true,NONE,
  |   |   |   |   |   |   | CallExp(get_sexps,[
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   |   |   |   car))]))],
  |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   | IfExp(
  |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   SimpleVar(ss)),
  |   |   |   |   |   |   |   | NilExp),
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   |   |   |   car)),
  |   |   |   |   |   |   |   LetExp([
  |   |   |   |   |   |   |   | VarDec(head,true,NONE,
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   SimpleVar(ss),
  |   |   |   |   |   |   |   |   |   car)))],
  |   |   |   |   |   |   |   | SeqExp[
  |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   | IfExp(
  |   |   |   |   |   |   |   |   |   CallExp(sym_p,[
  |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   SimpleVar(head))]),
  |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   | CallExp(get_sym,[
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | SimpleVar(head))]),
  |   |   |   |   |   |   |   |   |   | StringExp("unquote")),
  |   |   |   |   |   |   |   |   |   IntExp(0)),
  |   |   |   |   |   |   |   |   | LetExp([
  |   |   |   |   |   |   |   |   |   VarDec(unquote_val,true,NONE,
  |   |   |   |   |   |   |   |   |   | CallExp(lookup,[
  |   |   |   |   |   |   |   |   |   |   CallExp(get_sym,[
  |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(head))]),
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | SimpleVar(env))]))],
  |   |   |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   |   |   | IfExp(
  |   |   |   |   |   |   |   |   |   |   CallExp(fun_p,[
  |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(unquote_val))]),
  |   |   |   |   |   |   |   |   |   |   LetExp([
  |   |   |   |   |   |   |   |   |   |   | VarDec(unquote_fun,true,NONE,
  |   |   |   |   |   |   |   |   |   |   |   CallExp(get_fun,[
  |   |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(unquote_val))]))],
  |   |   |   |   |   |   |   |   |   |   | SeqExp[
  |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   | OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(unquote_fun),
  |   |   |   |   |   |   |   |   |   |   |   |   |   typ)),
  |   |   |   |   |   |   |   |   |   |   |   |   StringExp("internal")),
  |   |   |   |   |   |   |   |   |   |   |   | IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(level)),
  |   |   |   |   |   |   |   |   |   |   |   |   | IntExp(1)),
  |   |   |   |   |   |   |   |   |   |   |   |   CallExp(unquote,[
  |   |   |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(ss),
  |   |   |   |   |   |   |   |   |   |   |   |   |   | cdr)),
  |   |   |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(level))]),
  |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_sexps,[
  |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(quasi_tail,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(ss)),
  |   |   |   |   |   |   |   |   |   |   |   |   |   OpExp(MinusOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(level)),
  |   |   |   |   |   |   |   |   |   |   |   |   |   | IntExp(1))])])),
  |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_sexps,[
  |   |   |   |   |   |   |   |   |   |   |   |   CallExp(quasi_tail,[
  |   |   |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(ss)),
  |   |   |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(level))])]))]),
  |   |   |   |   |   |   |   |   |   |   CallExp(mk_sexps,[
  |   |   |   |   |   |   |   |   |   |   | CallExp(quasi_tail,[
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(ss)),
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(level))])]))]),
  |   |   |   |   |   |   |   |   | IfExp(
  |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   | CallExp(sym_p,[
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | SimpleVar(head))]),
  |   |   |   |   |   |   |   |   |   | OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   CallExp(get_sym,[
  |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(head))]),
  |   |   |   |   |   |   |   |   |   |   StringExp("quasiquote")),
  |   |   |   |   |   |   |   |   |   | IntExp(0)),
  |   |   |   |   |   |   |   |   |   LetExp([
  |   |   |   |   |   |   |   |   |   | VarDec(quasiquote_val,true,NONE,
  |   |   |   |   |   |   |   |   |   |   CallExp(lookup,[
  |   |   |   |   |   |   |   |   |   |   | CallExp(get_sym,[
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(head))]),
  |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(env))]))],
  |   |   |   |   |   |   |   |   |   | SeqExp[
  |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   | CallExp(fun_p,[
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(quasiquote_val))]),
  |   |   |   |   |   |   |   |   |   |   | LetExp([
  |   |   |   |   |   |   |   |   |   |   |   VarDec(quasiquote_fun,true,NONE,
  |   |   |   |   |   |   |   |   |   |   |   | CallExp(get_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(quasiquote_val))]))],
  |   |   |   |   |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   |   |   |   |   | IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(quasiquote_fun),
  |   |   |   |   |   |   |   |   |   |   |   |   |   | typ)),
  |   |   |   |   |   |   |   |   |   |   |   |   | StringExp("internal")),
  |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_sexps,[
  |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(quasi_tail,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(ss)),
  |   |   |   |   |   |   |   |   |   |   |   |   |   OpExp(PlusOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(level)),
  |   |   |   |   |   |   |   |   |   |   |   |   |   | IntExp(1))])]),
  |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_sexps,[
  |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(quasi_tail,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(ss)),
  |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(level))])]))]),
  |   |   |   |   |   |   |   |   |   |   | CallExp(mk_sexps,[
  |   |   |   |   |   |   |   |   |   |   |   CallExp(quasi_tail,[
  |   |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(ss)),
  |   |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(level))])]))]),
  |   |   |   |   |   |   |   |   |   CallExp(mk_sexps,[
  |   |   |   |   |   |   |   |   |   | CallExp(quasi_tail,[
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | SimpleVar(ss)),
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | SimpleVar(level))])])))]))]),
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   | SimpleVar(args),
  |   |   |   |   |   |   | car)))))),
  |   |   |   | (unquote,[
  |   |   |   |   (args,true,sexps),
  |   |   |   |   (level,true,int)],
  |   |   |   |   SOME(sexp),
  |   |   |   |   IfExp(
  |   |   |   |   | IfExp(
  |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   | NilExp),
  |   |   |   |   |   IntExp(1),
  |   |   |   |   |   SeqExp[
  |   |   |   |   |   | IfExp(
  |   |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   | SimpleVar(args),
  |   |   |   |   |   |   |   | cdr)),
  |   |   |   |   |   |   | NilExp),
  |   |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   |   |   |   cdr),
  |   |   |   |   |   |   |   | cdr)),
  |   |   |   |   |   |   | NilExp),
  |   |   |   |   |   |   IntExp(0))]),
  |   |   |   |   | SeqExp[
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | StringExp("unquote needs exactly 1 argument.\n")]),
  |   |   |   |   |   NilExp],
  |   |   |   |   | CallExp(quasi,[
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   OpExp(MinusOp,
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   SimpleVar(level)),
  |   |   |   |   |   | IntExp(1))]))),
  |   |   |   | (quasi_tail,[
  |   |   |   |   (args,true,sexps),
  |   |   |   |   (level,true,int)],
  |   |   |   |   SOME(sexps),
  |   |   |   |   IfExp(
  |   |   |   |   | OpExp(EqOp,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   NilExp),
  |   |   |   |   | NilExp,
  |   |   |   |   | RecordExp(sexps,[
  |   |   |   |   |   (car,
  |   |   |   |   |   | CallExp(quasi,[
  |   |   |   |   |   |   RecordExp(sexps,[
  |   |   |   |   |   |   | (car,
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   |   |   |   car))),
  |   |   |   |   |   |   | (cdr,
  |   |   |   |   |   |   |   NilExp)]),
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | SimpleVar(level))])),
  |   |   |   |   |   (cdr,
  |   |   |   |   |   | CallExp(quasi_tail,[
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   |   |   cdr)),
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | SimpleVar(level))]))])))]],
  |   |   |   SeqExp[
  |   |   |   | CallExp(quasi,[
  |   |   |   |   VarExp(
  |   |   |   |   | SimpleVar(args)),
  |   |   |   |   IntExp(1)])])),
  |   |   (unquote,[
  |   |   | (args,true,sexps)],
  |   |   | SOME(sexp),
  |   |   | SeqExp[
  |   |   |   CallExp(print,[
  |   |   |   | StringExp("Misplaced unquote around '")]),
  |   |   |   CallExp(print,[
  |   |   |   | CallExp(sexps2s,[
  |   |   |   |   VarExp(
  |   |   |   |   | SimpleVar(args))])]),
  |   |   |   CallExp(print,[
  |   |   |   | StringExp("'. Unquote can only be used inside quasiquotes\n")]),
  |   |   |   CallExp(mk_sexps,[
  |   |   |   | NilExp])])]],
  |   | SeqExp[
  |   |   IfExp(
  |   |   | OpExp(EqOp,
  |   |   |   VarExp(
  |   |   |   | SimpleVar(fun_name)),
  |   |   |   StringExp("ifb")),
  |   |   | CallExp(ifb,[
  |   |   |   VarExp(
  |   |   |   | SimpleVar(args))]),
  |   |   | IfExp(
  |   |   |   OpExp(EqOp,
  |   |   |   | VarExp(
  |   |   |   |   SimpleVar(fun_name)),
  |   |   |   | StringExp("or")),
  |   |   |   CallExp(or,[
  |   |   |   | VarExp(
  |   |   |   |   SimpleVar(args))]),
  |   |   |   IfExp(
  |   |   |   | OpExp(EqOp,
  |   |   |   |   VarExp(
  |   |   |   |   | SimpleVar(fun_name)),
  |   |   |   |   StringExp("and")),
  |   |   |   | CallExp(and,[
  |   |   |   |   VarExp(
  |   |   |   |   | SimpleVar(args))]),
  |   |   |   | IfExp(
  |   |   |   |   OpExp(EqOp,
  |   |   |   |   | VarExp(
  |   |   |   |   |   SimpleVar(fun_name)),
  |   |   |   |   | StringExp("lambda")),
  |   |   |   |   CallExp(lambda,[
  |   |   |   |   | VarExp(
  |   |   |   |   |   SimpleVar(args))]),
  |   |   |   |   IfExp(
  |   |   |   |   | OpExp(EqOp,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | SimpleVar(fun_name)),
  |   |   |   |   |   StringExp("let")),
  |   |   |   |   | CallExp(let_,[
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | SimpleVar(args))]),
  |   |   |   |   | IfExp(
  |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   SimpleVar(fun_name)),
  |   |   |   |   |   | StringExp("let*")),
  |   |   |   |   |   CallExp(letstar,[
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   SimpleVar(args))]),
  |   |   |   |   |   IfExp(
  |   |   |   |   |   | OpExp(EqOp,
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | SimpleVar(fun_name)),
  |   |   |   |   |   |   StringExp("letrec")),
  |   |   |   |   |   | CallExp(letrec,[
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | SimpleVar(args))]),
  |   |   |   |   |   | IfExp(
  |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   SimpleVar(fun_name)),
  |   |   |   |   |   |   | StringExp("define")),
  |   |   |   |   |   |   CallExp(define,[
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   SimpleVar(args))]),
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | OpExp(EqOp,
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | SimpleVar(fun_name)),
  |   |   |   |   |   |   |   StringExp("quote")),
  |   |   |   |   |   |   | CallExp(quote,[
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | SimpleVar(args))]),
  |   |   |   |   |   |   | IfExp(
  |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   SimpleVar(fun_name)),
  |   |   |   |   |   |   |   | StringExp("quasiquote")),
  |   |   |   |   |   |   |   CallExp(quasiquote,[
  |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   SimpleVar(args))]),
  |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   | OpExp(EqOp,
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(fun_name)),
  |   |   |   |   |   |   |   |   StringExp("unquote")),
  |   |   |   |   |   |   |   | CallExp(unquote,[
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(args))]),
  |   |   |   |   |   |   |   | SeqExp[
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | StringExp("Interpreter error: Unknown internal lazy function '")]),
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   SimpleVar(fun_name))]),
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | StringExp("' --- Perhaps it has not been implemented yet.\n")]),
  |   |   |   |   |   |   |   |   NilExp])))))))))))])),
  | (apply_internal_cbv,[
  |   (fun_name,true,string),
  |   (args,true,sexps),
  |   (env,true,env)],
  |   SOME(sexp),
  |   LetExp([
  |   | FunctionDec[
  |   |   (plus,[
  |   |   | (args,true,sexps)],
  |   |   | SOME(int),
  |   |   | IfExp(
  |   |   |   OpExp(EqOp,
  |   |   |   | VarExp(
  |   |   |   |   SimpleVar(args)),
  |   |   |   | NilExp),
  |   |   |   IntExp(0),
  |   |   |   LetExp([
  |   |   |   | VarDec(curr_arg,true,NONE,
  |   |   |   |   VarExp(
  |   |   |   |   | FieldVar(
  |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   car)))],
  |   |   |   | SeqExp[
  |   |   |   |   IfExp(
  |   |   |   |   | CallExp(int_p,[
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | SimpleVar(curr_arg))]),
  |   |   |   |   | OpExp(PlusOp,
  |   |   |   |   |   CallExp(get_int,[
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   SimpleVar(curr_arg))]),
  |   |   |   |   |   CallExp(plus,[
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   | SimpleVar(args),
  |   |   |   |   |   |   | cdr))])),
  |   |   |   |   | SeqExp[
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | StringExp("Illegal argument to + (or tail of -), value: '")]),
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | CallExp(sexp2s,[
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | SimpleVar(curr_arg))])]),
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | StringExp("'\n")]),
  |   |   |   |   |   IntExp(0)])]))),
  |   |   (minus,[
  |   |   | (args,true,sexps)],
  |   |   | SOME(int),
  |   |   | IfExp(
  |   |   |   OpExp(EqOp,
  |   |   |   | VarExp(
  |   |   |   |   SimpleVar(args)),
  |   |   |   | NilExp),
  |   |   |   IntExp(0),
  |   |   |   LetExp([
  |   |   |   | VarDec(curr_arg,true,NONE,
  |   |   |   |   VarExp(
  |   |   |   |   | FieldVar(
  |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   car)))],
  |   |   |   | SeqExp[
  |   |   |   |   IfExp(
  |   |   |   |   | CallExp(int_p,[
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | SimpleVar(curr_arg))]),
  |   |   |   |   | OpExp(MinusOp,
  |   |   |   |   |   CallExp(get_int,[
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   SimpleVar(curr_arg))]),
  |   |   |   |   |   CallExp(plus,[
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   | SimpleVar(args),
  |   |   |   |   |   |   | cdr))])),
  |   |   |   |   | SeqExp[
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | StringExp("Illegal argument to -, value: '")]),
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | CallExp(sexp2s,[
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | SimpleVar(curr_arg))])]),
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | StringExp("'\n")]),
  |   |   |   |   |   IntExp(0)])]))),
  |   |   (times,[
  |   |   | (args,true,sexps)],
  |   |   | SOME(int),
  |   |   | IfExp(
  |   |   |   OpExp(EqOp,
  |   |   |   | VarExp(
  |   |   |   |   SimpleVar(args)),
  |   |   |   | NilExp),
  |   |   |   IntExp(1),
  |   |   |   LetExp([
  |   |   |   | VarDec(curr_arg,true,NONE,
  |   |   |   |   VarExp(
  |   |   |   |   | FieldVar(
  |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   car)))],
  |   |   |   | SeqExp[
  |   |   |   |   IfExp(
  |   |   |   |   | CallExp(int_p,[
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | SimpleVar(curr_arg))]),
  |   |   |   |   | OpExp(TimesOp,
  |   |   |   |   |   CallExp(get_int,[
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   SimpleVar(curr_arg))]),
  |   |   |   |   |   CallExp(times,[
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   | SimpleVar(args),
  |   |   |   |   |   |   | cdr))])),
  |   |   |   |   | SeqExp[
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | StringExp("Illegal argument to * (or tail of /), value: '")]),
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | CallExp(sexp2s,[
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | SimpleVar(curr_arg))])]),
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | StringExp("'\n")]),
  |   |   |   |   |   IntExp(0)])]))),
  |   |   (div,[
  |   |   | (args,true,sexps)],
  |   |   | SOME(int),
  |   |   | IfExp(
  |   |   |   OpExp(EqOp,
  |   |   |   | VarExp(
  |   |   |   |   SimpleVar(args)),
  |   |   |   | NilExp),
  |   |   |   SeqExp[
  |   |   |   | CallExp(print,[
  |   |   |   |   StringExp("Cannot apply / to 0 arguments.\n")]),
  |   |   |   | IntExp(1)],
  |   |   |   LetExp([
  |   |   |   | VarDec(curr_arg,true,NONE,
  |   |   |   |   VarExp(
  |   |   |   |   | FieldVar(
  |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   car)))],
  |   |   |   | SeqExp[
  |   |   |   |   IfExp(
  |   |   |   |   | CallExp(int_p,[
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | SimpleVar(curr_arg))]),
  |   |   |   |   | OpExp(DivideOp,
  |   |   |   |   |   CallExp(get_int,[
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   SimpleVar(curr_arg))]),
  |   |   |   |   |   CallExp(times,[
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   | SimpleVar(args),
  |   |   |   |   |   |   | cdr))])),
  |   |   |   |   | SeqExp[
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | StringExp("Illegal argument to /, value: '")]),
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | CallExp(sexp2s,[
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | SimpleVar(curr_arg))])]),
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | StringExp("'\n")]),
  |   |   |   |   |   IntExp(0)])]))),
  |   |   (expt,[
  |   |   | (args,true,sexps)],
  |   |   | SOME(int),
  |   |   | IfExp(
  |   |   |   OpExp(EqOp,
  |   |   |   | VarExp(
  |   |   |   |   SimpleVar(args)),
  |   |   |   | NilExp),
  |   |   |   IntExp(1),
  |   |   |   LetExp([
  |   |   |   | VarDec(curr_arg,true,NONE,
  |   |   |   |   VarExp(
  |   |   |   |   | FieldVar(
  |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   car)))],
  |   |   |   | SeqExp[
  |   |   |   |   IfExp(
  |   |   |   |   | CallExp(int_p,[
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | SimpleVar(curr_arg))]),
  |   |   |   |   | OpExp(ExponentOp,
  |   |   |   |   |   CallExp(get_int,[
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   SimpleVar(curr_arg))]),
  |   |   |   |   |   CallExp(expt,[
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   | SimpleVar(args),
  |   |   |   |   |   |   | cdr))])),
  |   |   |   |   | SeqExp[
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | StringExp("Illegal argument to ^, value: '")]),
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | CallExp(sexp2s,[
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | SimpleVar(curr_arg))])]),
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | StringExp("'\n")]),
  |   |   |   |   |   IntExp(0)])]))),
  |   |   (lt_int,[
  |   |   | (args,true,sexps)],
  |   |   | SOME(int),
  |   |   | LetExp([
  |   |   |   FunctionDec[
  |   |   |   | (aux,[
  |   |   |   |   (head,true,int),
  |   |   |   |   (args,true,sexps)],
  |   |   |   |   SOME(int),
  |   |   |   |   IfExp(
  |   |   |   |   | OpExp(EqOp,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   NilExp),
  |   |   |   |   | IntExp(1),
  |   |   |   |   | LetExp([
  |   |   |   |   |   VarDec(curr_arg,true,NONE,
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   | SimpleVar(args),
  |   |   |   |   |   |   | car)))],
  |   |   |   |   |   SeqExp[
  |   |   |   |   |   | IfExp(
  |   |   |   |   |   |   CallExp(int_p,[
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   SimpleVar(curr_arg))]),
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | CallExp(aux,[
  |   |   |   |   |   |   |   CallExp(get_int,[
  |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   SimpleVar(curr_arg))]),
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   |   |   |   cdr))]),
  |   |   |   |   |   |   | OpExp(LtOp,
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | SimpleVar(head)),
  |   |   |   |   |   |   |   CallExp(get_int,[
  |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   SimpleVar(curr_arg))])),
  |   |   |   |   |   |   | IntExp(0)),
  |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   | CallExp(print,[
  |   |   |   |   |   |   |   StringExp("Illegal argument to <, value: '")]),
  |   |   |   |   |   |   | CallExp(print,[
  |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   SimpleVar(curr_arg))])]),
  |   |   |   |   |   |   | CallExp(print,[
  |   |   |   |   |   |   |   StringExp("'\n")]),
  |   |   |   |   |   |   | IntExp(0)])])))]],
  |   |   |   SeqExp[
  |   |   |   | IfExp(
  |   |   |   |   OpExp(EqOp,
  |   |   |   |   | VarExp(
  |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   | NilExp),
  |   |   |   |   IntExp(1),
  |   |   |   |   LetExp([
  |   |   |   |   | VarDec(curr_arg,true,NONE,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   |   car)))],
  |   |   |   |   | SeqExp[
  |   |   |   |   |   IfExp(
  |   |   |   |   |   | CallExp(int_p,[
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | SimpleVar(curr_arg))]),
  |   |   |   |   |   | CallExp(aux,[
  |   |   |   |   |   |   CallExp(get_int,[
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   SimpleVar(curr_arg))]),
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   |   |   cdr))]),
  |   |   |   |   |   | SeqExp[
  |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   | StringExp("Illegal argument to <, value: '")]),
  |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   | CallExp(sexp2s,[
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | SimpleVar(curr_arg))])]),
  |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   | StringExp("'\n")]),
  |   |   |   |   |   |   IntExp(0)])]))])),
  |   |   (leq_int,[
  |   |   | (args,true,sexps)],
  |   |   | SOME(int),
  |   |   | LetExp([
  |   |   |   FunctionDec[
  |   |   |   | (aux,[
  |   |   |   |   (head,true,int),
  |   |   |   |   (args,true,sexps)],
  |   |   |   |   SOME(int),
  |   |   |   |   IfExp(
  |   |   |   |   | OpExp(EqOp,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   NilExp),
  |   |   |   |   | IntExp(1),
  |   |   |   |   | LetExp([
  |   |   |   |   |   VarDec(curr_arg,true,NONE,
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   | SimpleVar(args),
  |   |   |   |   |   |   | car)))],
  |   |   |   |   |   SeqExp[
  |   |   |   |   |   | IfExp(
  |   |   |   |   |   |   CallExp(int_p,[
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   SimpleVar(curr_arg))]),
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | CallExp(aux,[
  |   |   |   |   |   |   |   CallExp(get_int,[
  |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   SimpleVar(curr_arg))]),
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   |   |   |   cdr))]),
  |   |   |   |   |   |   | OpExp(LeOp,
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | SimpleVar(head)),
  |   |   |   |   |   |   |   CallExp(get_int,[
  |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   SimpleVar(curr_arg))])),
  |   |   |   |   |   |   | IntExp(0)),
  |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   | CallExp(print,[
  |   |   |   |   |   |   |   StringExp("Illegal argument to <=, value: '")]),
  |   |   |   |   |   |   | CallExp(print,[
  |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   SimpleVar(curr_arg))])]),
  |   |   |   |   |   |   | CallExp(print,[
  |   |   |   |   |   |   |   StringExp("'\n")]),
  |   |   |   |   |   |   | IntExp(0)])])))]],
  |   |   |   SeqExp[
  |   |   |   | IfExp(
  |   |   |   |   OpExp(EqOp,
  |   |   |   |   | VarExp(
  |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   | NilExp),
  |   |   |   |   IntExp(1),
  |   |   |   |   LetExp([
  |   |   |   |   | VarDec(curr_arg,true,NONE,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   |   car)))],
  |   |   |   |   | SeqExp[
  |   |   |   |   |   IfExp(
  |   |   |   |   |   | CallExp(int_p,[
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | SimpleVar(curr_arg))]),
  |   |   |   |   |   | CallExp(aux,[
  |   |   |   |   |   |   CallExp(get_int,[
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   SimpleVar(curr_arg))]),
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   |   |   cdr))]),
  |   |   |   |   |   | SeqExp[
  |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   | StringExp("Illegal argument to <=, value: '")]),
  |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   | CallExp(sexp2s,[
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | SimpleVar(curr_arg))])]),
  |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   | StringExp("'\n")]),
  |   |   |   |   |   |   IntExp(0)])]))])),
  |   |   (eq_int,[
  |   |   | (args,true,sexps)],
  |   |   | SOME(int),
  |   |   | LetExp([
  |   |   |   FunctionDec[
  |   |   |   | (aux,[
  |   |   |   |   (head,true,int),
  |   |   |   |   (args,true,sexps)],
  |   |   |   |   SOME(int),
  |   |   |   |   IfExp(
  |   |   |   |   | OpExp(EqOp,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   NilExp),
  |   |   |   |   | IntExp(1),
  |   |   |   |   | LetExp([
  |   |   |   |   |   VarDec(curr_arg,true,NONE,
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   | SimpleVar(args),
  |   |   |   |   |   |   | car)))],
  |   |   |   |   |   SeqExp[
  |   |   |   |   |   | IfExp(
  |   |   |   |   |   |   CallExp(int_p,[
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   SimpleVar(curr_arg))]),
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | CallExp(aux,[
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | SimpleVar(head)),
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   |   |   |   cdr))]),
  |   |   |   |   |   |   | OpExp(EqOp,
  |   |   |   |   |   |   |   CallExp(get_int,[
  |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   SimpleVar(curr_arg))]),
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | SimpleVar(head))),
  |   |   |   |   |   |   | IntExp(0)),
  |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   | CallExp(print,[
  |   |   |   |   |   |   |   StringExp("Illegal argument to =, value: '")]),
  |   |   |   |   |   |   | CallExp(print,[
  |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   SimpleVar(curr_arg))])]),
  |   |   |   |   |   |   | CallExp(print,[
  |   |   |   |   |   |   |   StringExp("'\n")]),
  |   |   |   |   |   |   | IntExp(0)])])))]],
  |   |   |   SeqExp[
  |   |   |   | IfExp(
  |   |   |   |   OpExp(EqOp,
  |   |   |   |   | VarExp(
  |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   | NilExp),
  |   |   |   |   IntExp(1),
  |   |   |   |   LetExp([
  |   |   |   |   | VarDec(curr_arg,true,NONE,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   |   car)))],
  |   |   |   |   | SeqExp[
  |   |   |   |   |   IfExp(
  |   |   |   |   |   | CallExp(int_p,[
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | SimpleVar(curr_arg))]),
  |   |   |   |   |   | CallExp(aux,[
  |   |   |   |   |   |   CallExp(get_int,[
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   SimpleVar(curr_arg))]),
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   |   |   cdr))]),
  |   |   |   |   |   | SeqExp[
  |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   | StringExp("Illegal argument to =, value: '")]),
  |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   | CallExp(sexp2s,[
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | SimpleVar(curr_arg))])]),
  |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   | StringExp("'\n")]),
  |   |   |   |   |   |   IntExp(0)])]))])),
  |   |   (neq_int,[
  |   |   | (args,true,sexps)],
  |   |   | SOME(int),
  |   |   | LetExp([
  |   |   |   FunctionDec[
  |   |   |   | (aux,[
  |   |   |   |   (head,true,int),
  |   |   |   |   (args,true,sexps)],
  |   |   |   |   SOME(int),
  |   |   |   |   IfExp(
  |   |   |   |   | OpExp(EqOp,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   NilExp),
  |   |   |   |   | IntExp(1),
  |   |   |   |   | LetExp([
  |   |   |   |   |   VarDec(curr_arg,true,NONE,
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   | SimpleVar(args),
  |   |   |   |   |   |   | car)))],
  |   |   |   |   |   SeqExp[
  |   |   |   |   |   | IfExp(
  |   |   |   |   |   |   CallExp(int_p,[
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   SimpleVar(curr_arg))]),
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | CallExp(aux,[
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | SimpleVar(head)),
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   |   |   |   cdr))]),
  |   |   |   |   |   |   | OpExp(NeqOp,
  |   |   |   |   |   |   |   CallExp(get_int,[
  |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   SimpleVar(curr_arg))]),
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | SimpleVar(head))),
  |   |   |   |   |   |   | IntExp(0)),
  |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   | CallExp(print,[
  |   |   |   |   |   |   |   StringExp("Illegal argument to !=, value: '")]),
  |   |   |   |   |   |   | CallExp(print,[
  |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   SimpleVar(curr_arg))])]),
  |   |   |   |   |   |   | CallExp(print,[
  |   |   |   |   |   |   |   StringExp("'\n")]),
  |   |   |   |   |   |   | IntExp(0)])])))]],
  |   |   |   SeqExp[
  |   |   |   | IfExp(
  |   |   |   |   OpExp(EqOp,
  |   |   |   |   | VarExp(
  |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   | NilExp),
  |   |   |   |   IntExp(1),
  |   |   |   |   LetExp([
  |   |   |   |   | VarDec(curr_arg,true,NONE,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   |   car)))],
  |   |   |   |   | SeqExp[
  |   |   |   |   |   IfExp(
  |   |   |   |   |   | CallExp(int_p,[
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | SimpleVar(curr_arg))]),
  |   |   |   |   |   | CallExp(aux,[
  |   |   |   |   |   |   CallExp(get_int,[
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   SimpleVar(curr_arg))]),
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   |   |   cdr))]),
  |   |   |   |   |   | SeqExp[
  |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   | StringExp("Illegal argument to !=, value: '")]),
  |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   | CallExp(sexp2s,[
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | SimpleVar(curr_arg))])]),
  |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   | StringExp("'\n")]),
  |   |   |   |   |   |   IntExp(0)])]))])),
  |   |   (geq_int,[
  |   |   | (args,true,sexps)],
  |   |   | SOME(int),
  |   |   | LetExp([
  |   |   |   FunctionDec[
  |   |   |   | (aux,[
  |   |   |   |   (head,true,int),
  |   |   |   |   (args,true,sexps)],
  |   |   |   |   SOME(int),
  |   |   |   |   IfExp(
  |   |   |   |   | OpExp(EqOp,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   NilExp),
  |   |   |   |   | IntExp(1),
  |   |   |   |   | LetExp([
  |   |   |   |   |   VarDec(curr_arg,true,NONE,
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   | SimpleVar(args),
  |   |   |   |   |   |   | car)))],
  |   |   |   |   |   SeqExp[
  |   |   |   |   |   | IfExp(
  |   |   |   |   |   |   CallExp(int_p,[
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   SimpleVar(curr_arg))]),
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | CallExp(aux,[
  |   |   |   |   |   |   |   CallExp(get_int,[
  |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   SimpleVar(curr_arg))]),
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   |   |   |   cdr))]),
  |   |   |   |   |   |   | OpExp(GeOp,
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | SimpleVar(head)),
  |   |   |   |   |   |   |   CallExp(get_int,[
  |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   SimpleVar(curr_arg))])),
  |   |   |   |   |   |   | IntExp(0)),
  |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   | CallExp(print,[
  |   |   |   |   |   |   |   StringExp("Illegal argument to >=, value: '")]),
  |   |   |   |   |   |   | CallExp(print,[
  |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   SimpleVar(curr_arg))])]),
  |   |   |   |   |   |   | CallExp(print,[
  |   |   |   |   |   |   |   StringExp("'\n")]),
  |   |   |   |   |   |   | IntExp(0)])])))]],
  |   |   |   SeqExp[
  |   |   |   | IfExp(
  |   |   |   |   OpExp(EqOp,
  |   |   |   |   | VarExp(
  |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   | NilExp),
  |   |   |   |   IntExp(1),
  |   |   |   |   LetExp([
  |   |   |   |   | VarDec(curr_arg,true,NONE,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   |   car)))],
  |   |   |   |   | SeqExp[
  |   |   |   |   |   IfExp(
  |   |   |   |   |   | CallExp(int_p,[
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | SimpleVar(curr_arg))]),
  |   |   |   |   |   | CallExp(aux,[
  |   |   |   |   |   |   CallExp(get_int,[
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   SimpleVar(curr_arg))]),
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   |   |   cdr))]),
  |   |   |   |   |   | SeqExp[
  |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   | StringExp("Illegal argument to >=, value: '")]),
  |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   | CallExp(sexp2s,[
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | SimpleVar(curr_arg))])]),
  |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   | StringExp("'\n")]),
  |   |   |   |   |   |   IntExp(0)])]))])),
  |   |   (gt_int,[
  |   |   | (args,true,sexps)],
  |   |   | SOME(int),
  |   |   | LetExp([
  |   |   |   FunctionDec[
  |   |   |   | (aux,[
  |   |   |   |   (head,true,int),
  |   |   |   |   (args,true,sexps)],
  |   |   |   |   SOME(int),
  |   |   |   |   IfExp(
  |   |   |   |   | OpExp(EqOp,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   NilExp),
  |   |   |   |   | IntExp(1),
  |   |   |   |   | LetExp([
  |   |   |   |   |   VarDec(curr_arg,true,NONE,
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   | SimpleVar(args),
  |   |   |   |   |   |   | car)))],
  |   |   |   |   |   SeqExp[
  |   |   |   |   |   | IfExp(
  |   |   |   |   |   |   CallExp(int_p,[
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   SimpleVar(curr_arg))]),
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | CallExp(aux,[
  |   |   |   |   |   |   |   CallExp(get_int,[
  |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   SimpleVar(curr_arg))]),
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   |   |   |   cdr))]),
  |   |   |   |   |   |   | OpExp(GtOp,
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | SimpleVar(head)),
  |   |   |   |   |   |   |   CallExp(get_int,[
  |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   SimpleVar(curr_arg))])),
  |   |   |   |   |   |   | IntExp(0)),
  |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   | CallExp(print,[
  |   |   |   |   |   |   |   StringExp("Illegal argument to >, value: '")]),
  |   |   |   |   |   |   | CallExp(print,[
  |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   SimpleVar(curr_arg))])]),
  |   |   |   |   |   |   | CallExp(print,[
  |   |   |   |   |   |   |   StringExp("'\n")]),
  |   |   |   |   |   |   | IntExp(0)])])))]],
  |   |   |   SeqExp[
  |   |   |   | IfExp(
  |   |   |   |   OpExp(EqOp,
  |   |   |   |   | VarExp(
  |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   | NilExp),
  |   |   |   |   IntExp(1),
  |   |   |   |   LetExp([
  |   |   |   |   | VarDec(curr_arg,true,NONE,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   |   car)))],
  |   |   |   |   | SeqExp[
  |   |   |   |   |   IfExp(
  |   |   |   |   |   | CallExp(int_p,[
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | SimpleVar(curr_arg))]),
  |   |   |   |   |   | CallExp(aux,[
  |   |   |   |   |   |   CallExp(get_int,[
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   SimpleVar(curr_arg))]),
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   |   |   cdr))]),
  |   |   |   |   |   | SeqExp[
  |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   | StringExp("Illegal argument to >, value: '")]),
  |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   | CallExp(sexp2s,[
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | SimpleVar(curr_arg))])]),
  |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   | StringExp("'\n")]),
  |   |   |   |   |   |   IntExp(0)])]))])),
  |   |   (min,[
  |   |   | (args,true,sexps)],
  |   |   | SOME(int),
  |   |   | IfExp(
  |   |   |   OpExp(EqOp,
  |   |   |   | VarExp(
  |   |   |   |   SimpleVar(args)),
  |   |   |   | NilExp),
  |   |   |   SeqExp[
  |   |   |   | CallExp(print,[
  |   |   |   |   StringExp("Cannot apply min to 0 arguments\n")]),
  |   |   |   | IntExp(0)],
  |   |   |   LetExp([
  |   |   |   | VarDec(curr_arg,true,NONE,
  |   |   |   |   VarExp(
  |   |   |   |   | FieldVar(
  |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   car)))],
  |   |   |   | SeqExp[
  |   |   |   |   IfExp(
  |   |   |   |   | CallExp(int_p,[
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | SimpleVar(curr_arg))]),
  |   |   |   |   | IfExp(
  |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   | SimpleVar(args),
  |   |   |   |   |   |   | cdr)),
  |   |   |   |   |   | NilExp),
  |   |   |   |   |   LetExp([
  |   |   |   |   |   | VarDec(min_rst,true,NONE,
  |   |   |   |   |   |   CallExp(min,[
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   | SimpleVar(args),
  |   |   |   |   |   |   |   | cdr))]))],
  |   |   |   |   |   | SeqExp[
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | OpExp(LtOp,
  |   |   |   |   |   |   |   CallExp(get_int,[
  |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   SimpleVar(curr_arg))]),
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | SimpleVar(min_rst))),
  |   |   |   |   |   |   | CallExp(get_int,[
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | SimpleVar(curr_arg))]),
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   SimpleVar(min_rst)))]),
  |   |   |   |   |   CallExp(get_int,[
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   SimpleVar(curr_arg))])),
  |   |   |   |   | SeqExp[
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | StringExp("Illegal argument to min, value: '")]),
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | CallExp(sexp2s,[
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | SimpleVar(curr_arg))])]),
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | StringExp("'\n")]),
  |   |   |   |   |   IntExp(0)])]))),
  |   |   (max,[
  |   |   | (args,true,sexps)],
  |   |   | SOME(int),
  |   |   | IfExp(
  |   |   |   OpExp(EqOp,
  |   |   |   | VarExp(
  |   |   |   |   SimpleVar(args)),
  |   |   |   | NilExp),
  |   |   |   SeqExp[
  |   |   |   | CallExp(print,[
  |   |   |   |   StringExp("Cannot apply max to 0 arguments\n")]),
  |   |   |   | IntExp(0)],
  |   |   |   LetExp([
  |   |   |   | VarDec(curr_arg,true,NONE,
  |   |   |   |   VarExp(
  |   |   |   |   | FieldVar(
  |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   car)))],
  |   |   |   | SeqExp[
  |   |   |   |   IfExp(
  |   |   |   |   | CallExp(int_p,[
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | SimpleVar(curr_arg))]),
  |   |   |   |   | IfExp(
  |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   | SimpleVar(args),
  |   |   |   |   |   |   | cdr)),
  |   |   |   |   |   | NilExp),
  |   |   |   |   |   LetExp([
  |   |   |   |   |   | VarDec(max_rst,true,NONE,
  |   |   |   |   |   |   CallExp(max,[
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   | SimpleVar(args),
  |   |   |   |   |   |   |   | cdr))]))],
  |   |   |   |   |   | SeqExp[
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | OpExp(GtOp,
  |   |   |   |   |   |   |   CallExp(get_int,[
  |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   SimpleVar(curr_arg))]),
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | SimpleVar(max_rst))),
  |   |   |   |   |   |   | CallExp(get_int,[
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | SimpleVar(curr_arg))]),
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   SimpleVar(max_rst)))]),
  |   |   |   |   |   CallExp(get_int,[
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   SimpleVar(curr_arg))])),
  |   |   |   |   | SeqExp[
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | StringExp("Illegal argument to min, value: '")]),
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | CallExp(sexp2s,[
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | SimpleVar(curr_arg))])]),
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | StringExp("'\n")]),
  |   |   |   |   |   IntExp(0)])]))),
  |   |   (progn,[
  |   |   | (args,true,sexps)],
  |   |   | SOME(sexp),
  |   |   | IfExp(
  |   |   |   OpExp(EqOp,
  |   |   |   | VarExp(
  |   |   |   |   SimpleVar(args)),
  |   |   |   | NilExp),
  |   |   |   SeqExp[
  |   |   |   | CallExp(print,[
  |   |   |   |   StringExp("Cannot apply progn to 0 arguments.\n")]),
  |   |   |   | NilExp],
  |   |   |   LetExp([
  |   |   |   | VarDec(curr_arg,true,NONE,
  |   |   |   |   VarExp(
  |   |   |   |   | FieldVar(
  |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   car)))],
  |   |   |   | SeqExp[
  |   |   |   |   IfExp(
  |   |   |   |   | OpExp(EqOp,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   |   cdr)),
  |   |   |   |   |   NilExp),
  |   |   |   |   | VarExp(
  |   |   |   |   |   SimpleVar(curr_arg)),
  |   |   |   |   | CallExp(progn,[
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   |   cdr))]))]))),
  |   |   (map,[
  |   |   | (args,true,sexps)],
  |   |   | SOME(sexps),
  |   |   | IfExp(
  |   |   |   IfExp(
  |   |   |   | OpExp(EqOp,
  |   |   |   |   VarExp(
  |   |   |   |   | SimpleVar(args)),
  |   |   |   |   NilExp),
  |   |   |   | IntExp(1),
  |   |   |   | SeqExp[
  |   |   |   |   IfExp(
  |   |   |   |   | OpExp(NeqOp,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   |   cdr)),
  |   |   |   |   |   NilExp),
  |   |   |   |   | OpExp(NeqOp,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   | SimpleVar(args),
  |   |   |   |   |   |   | cdr),
  |   |   |   |   |   |   cdr)),
  |   |   |   |   |   NilExp),
  |   |   |   |   | IntExp(0))]),
  |   |   |   SeqExp[
  |   |   |   | CallExp(print,[
  |   |   |   |   StringExp("map needs exactly 2 arguments.\n")]),
  |   |   |   | NilExp],
  |   |   |   LetExp([
  |   |   |   | VarDec(fun_arg,true,NONE,
  |   |   |   |   VarExp(
  |   |   |   |   | FieldVar(
  |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   car))),
  |   |   |   | VarDec(lst_arg,true,NONE,
  |   |   |   |   VarExp(
  |   |   |   |   | FieldVar(
  |   |   |   |   |   FieldVar(
  |   |   |   |   |   | SimpleVar(args),
  |   |   |   |   |   | cdr),
  |   |   |   |   |   car))),
  |   |   |   | FunctionDec[
  |   |   |   |   (aux,[
  |   |   |   |   | (args,true,sexps)],
  |   |   |   |   | SOME(sexps),
  |   |   |   |   | IfExp(
  |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   | NilExp),
  |   |   |   |   |   NilExp,
  |   |   |   |   |   RecordExp(sexps,[
  |   |   |   |   |   | (car,
  |   |   |   |   |   |   CallExp(apply_fun_cbv,[
  |   |   |   |   |   |   | CallExp(get_fun,[
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | SimpleVar(fun_arg))]),
  |   |   |   |   |   |   | RecordExp(sexps,[
  |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   | SimpleVar(args),
  |   |   |   |   |   |   |   |   | car))),
  |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   | NilExp)]),
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   SimpleVar(env))])),
  |   |   |   |   |   | (cdr,
  |   |   |   |   |   |   CallExp(aux,[
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   | SimpleVar(args),
  |   |   |   |   |   |   |   | cdr))]))])))]],
  |   |   |   | SeqExp[
  |   |   |   |   IfExp(
  |   |   |   |   | CallExp(fun_p,[
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | SimpleVar(fun_arg))]),
  |   |   |   |   | IfExp(
  |   |   |   |   |   CallExp(sexps_p,[
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   SimpleVar(lst_arg))]),
  |   |   |   |   |   CallExp(aux,[
  |   |   |   |   |   | CallExp(get_sexps,[
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | SimpleVar(lst_arg))])]),
  |   |   |   |   |   SeqExp[
  |   |   |   |   |   | CallExp(print,[
  |   |   |   |   |   |   StringExp("Illegal list argument to map, value: '")]),
  |   |   |   |   |   | CallExp(print,[
  |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   SimpleVar(lst_arg))])]),
  |   |   |   |   |   | CallExp(print,[
  |   |   |   |   |   |   StringExp("'\n")]),
  |   |   |   |   |   | NilExp]),
  |   |   |   |   | SeqExp[
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | StringExp("Illegal function argument to map, value: '")]),
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | CallExp(sexp2s,[
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | SimpleVar(fun_arg))])]),
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | StringExp("'\n")]),
  |   |   |   |   |   NilExp])]))),
  |   |   (foldr,[
  |   |   | (args,true,sexps)],
  |   |   | SOME(sexp),
  |   |   | IfExp(
  |   |   |   IfExp(
  |   |   |   | IfExp(
  |   |   |   |   OpExp(EqOp,
  |   |   |   |   | VarExp(
  |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   | NilExp),
  |   |   |   |   IntExp(1),
  |   |   |   |   OpExp(EqOp,
  |   |   |   |   | VarExp(
  |   |   |   |   |   FieldVar(
  |   |   |   |   |   | SimpleVar(args),
  |   |   |   |   |   | cdr)),
  |   |   |   |   | NilExp)),
  |   |   |   | IntExp(1),
  |   |   |   | SeqExp[
  |   |   |   |   IfExp(
  |   |   |   |   | OpExp(NeqOp,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   | SimpleVar(args),
  |   |   |   |   |   |   | cdr),
  |   |   |   |   |   |   cdr)),
  |   |   |   |   |   NilExp),
  |   |   |   |   | OpExp(NeqOp,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   |   |   cdr),
  |   |   |   |   |   |   | cdr),
  |   |   |   |   |   |   cdr)),
  |   |   |   |   |   NilExp),
  |   |   |   |   | IntExp(0))]),
  |   |   |   SeqExp[
  |   |   |   | CallExp(print,[
  |   |   |   |   StringExp("foldr needs exactly 3 arguments.\n")]),
  |   |   |   | NilExp],
  |   |   |   LetExp([
  |   |   |   | VarDec(fun_arg,true,NONE,
  |   |   |   |   VarExp(
  |   |   |   |   | FieldVar(
  |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   car))),
  |   |   |   | VarDec(init_arg,true,NONE,
  |   |   |   |   VarExp(
  |   |   |   |   | FieldVar(
  |   |   |   |   |   FieldVar(
  |   |   |   |   |   | SimpleVar(args),
  |   |   |   |   |   | cdr),
  |   |   |   |   |   car))),
  |   |   |   | VarDec(lst_arg,true,NONE,
  |   |   |   |   VarExp(
  |   |   |   |   | FieldVar(
  |   |   |   |   |   FieldVar(
  |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   |   cdr),
  |   |   |   |   |   | cdr),
  |   |   |   |   |   car))),
  |   |   |   | FunctionDec[
  |   |   |   |   (aux,[
  |   |   |   |   | (lst,true,sexps)],
  |   |   |   |   | SOME(sexp),
  |   |   |   |   | IfExp(
  |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   SimpleVar(lst)),
  |   |   |   |   |   | NilExp),
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | SimpleVar(init_arg)),
  |   |   |   |   |   CallExp(apply_fun_cbv,[
  |   |   |   |   |   | CallExp(get_fun,[
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | SimpleVar(fun_arg))]),
  |   |   |   |   |   | RecordExp(sexps,[
  |   |   |   |   |   |   (car,
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   | SimpleVar(lst),
  |   |   |   |   |   |   |   | car))),
  |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   | RecordExp(sexps,[
  |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   | CallExp(aux,[
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   SimpleVar(lst),
  |   |   |   |   |   |   |   |   |   cdr))])),
  |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   | NilExp)]))]),
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   SimpleVar(env))])))]],
  |   |   |   | SeqExp[
  |   |   |   |   IfExp(
  |   |   |   |   | CallExp(fun_p,[
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | SimpleVar(fun_arg))]),
  |   |   |   |   | IfExp(
  |   |   |   |   |   CallExp(sexps_p,[
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   SimpleVar(lst_arg))]),
  |   |   |   |   |   CallExp(aux,[
  |   |   |   |   |   | CallExp(get_sexps,[
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | SimpleVar(lst_arg))])]),
  |   |   |   |   |   SeqExp[
  |   |   |   |   |   | CallExp(print,[
  |   |   |   |   |   |   StringExp("Illegal list argument to foldr, value: '")]),
  |   |   |   |   |   | CallExp(print,[
  |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   SimpleVar(lst_arg))])]),
  |   |   |   |   |   | CallExp(print,[
  |   |   |   |   |   |   StringExp("'\n")]),
  |   |   |   |   |   | NilExp]),
  |   |   |   |   | SeqExp[
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | StringExp("Illegal function argument to foldr, value: '")]),
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | CallExp(sexp2s,[
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | SimpleVar(fun_arg))])]),
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | StringExp("'\n")]),
  |   |   |   |   |   NilExp])]))),
  |   |   (foldl,[
  |   |   | (args,true,sexps)],
  |   |   | SOME(sexp),
  |   |   | IfExp(
  |   |   |   IfExp(
  |   |   |   | IfExp(
  |   |   |   |   OpExp(EqOp,
  |   |   |   |   | VarExp(
  |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   | NilExp),
  |   |   |   |   IntExp(1),
  |   |   |   |   OpExp(EqOp,
  |   |   |   |   | VarExp(
  |   |   |   |   |   FieldVar(
  |   |   |   |   |   | SimpleVar(args),
  |   |   |   |   |   | cdr)),
  |   |   |   |   | NilExp)),
  |   |   |   | IntExp(1),
  |   |   |   | SeqExp[
  |   |   |   |   IfExp(
  |   |   |   |   | OpExp(NeqOp,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   | SimpleVar(args),
  |   |   |   |   |   |   | cdr),
  |   |   |   |   |   |   cdr)),
  |   |   |   |   |   NilExp),
  |   |   |   |   | OpExp(NeqOp,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   |   |   cdr),
  |   |   |   |   |   |   | cdr),
  |   |   |   |   |   |   cdr)),
  |   |   |   |   |   NilExp),
  |   |   |   |   | IntExp(0))]),
  |   |   |   SeqExp[
  |   |   |   | CallExp(print,[
  |   |   |   |   StringExp("foldl needs exactly 3 arguments.\n")]),
  |   |   |   | NilExp],
  |   |   |   LetExp([
  |   |   |   | VarDec(fun_arg,true,NONE,
  |   |   |   |   VarExp(
  |   |   |   |   | FieldVar(
  |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   car))),
  |   |   |   | VarDec(init_arg,true,NONE,
  |   |   |   |   VarExp(
  |   |   |   |   | FieldVar(
  |   |   |   |   |   FieldVar(
  |   |   |   |   |   | SimpleVar(args),
  |   |   |   |   |   | cdr),
  |   |   |   |   |   car))),
  |   |   |   | VarDec(lst_arg,true,NONE,
  |   |   |   |   VarExp(
  |   |   |   |   | FieldVar(
  |   |   |   |   |   FieldVar(
  |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   |   cdr),
  |   |   |   |   |   | cdr),
  |   |   |   |   |   car))),
  |   |   |   | FunctionDec[
  |   |   |   |   (aux,[
  |   |   |   |   | (lst,true,sexps),
  |   |   |   |   | (acc,true,sexp)],
  |   |   |   |   | SOME(sexp),
  |   |   |   |   | IfExp(
  |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   SimpleVar(lst)),
  |   |   |   |   |   | NilExp),
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | SimpleVar(acc)),
  |   |   |   |   |   CallExp(aux,[
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   | SimpleVar(lst),
  |   |   |   |   |   |   | cdr)),
  |   |   |   |   |   | CallExp(apply_fun_cbv,[
  |   |   |   |   |   |   CallExp(get_fun,[
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   SimpleVar(fun_arg))]),
  |   |   |   |   |   |   RecordExp(sexps,[
  |   |   |   |   |   |   | (car,
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   SimpleVar(lst),
  |   |   |   |   |   |   |   |   car))),
  |   |   |   |   |   |   | (cdr,
  |   |   |   |   |   |   |   RecordExp(sexps,[
  |   |   |   |   |   |   |   | (car,
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(acc))),
  |   |   |   |   |   |   |   | (cdr,
  |   |   |   |   |   |   |   |   NilExp)]))]),
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | SimpleVar(env))])])))]],
  |   |   |   | SeqExp[
  |   |   |   |   IfExp(
  |   |   |   |   | CallExp(fun_p,[
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | SimpleVar(fun_arg))]),
  |   |   |   |   | IfExp(
  |   |   |   |   |   CallExp(sexps_p,[
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   SimpleVar(lst_arg))]),
  |   |   |   |   |   CallExp(aux,[
  |   |   |   |   |   | CallExp(get_sexps,[
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | SimpleVar(lst_arg))]),
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   SimpleVar(init_arg))]),
  |   |   |   |   |   SeqExp[
  |   |   |   |   |   | CallExp(print,[
  |   |   |   |   |   |   StringExp("Illegal list argument to foldl, value: '")]),
  |   |   |   |   |   | CallExp(print,[
  |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   SimpleVar(lst_arg))])]),
  |   |   |   |   |   | CallExp(print,[
  |   |   |   |   |   |   StringExp("'\n")]),
  |   |   |   |   |   | NilExp]),
  |   |   |   |   | SeqExp[
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | StringExp("Illegal function argument to foldl, value: '")]),
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | CallExp(sexp2s,[
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | SimpleVar(fun_arg))])]),
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | StringExp("'\n")]),
  |   |   |   |   |   NilExp])]))),
  |   |   (orb,[
  |   |   | (args,true,sexps)],
  |   |   | SOME(int),
  |   |   | IfExp(
  |   |   |   OpExp(EqOp,
  |   |   |   | VarExp(
  |   |   |   |   SimpleVar(args)),
  |   |   |   | NilExp),
  |   |   |   IntExp(0),
  |   |   |   LetExp([
  |   |   |   | VarDec(curr_arg,true,NONE,
  |   |   |   |   VarExp(
  |   |   |   |   | FieldVar(
  |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   car)))],
  |   |   |   | SeqExp[
  |   |   |   |   IfExp(
  |   |   |   |   | CallExp(bool_p,[
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | SimpleVar(curr_arg))]),
  |   |   |   |   | IfExp(
  |   |   |   |   |   CallExp(orb,[
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   | SimpleVar(args),
  |   |   |   |   |   |   | cdr))]),
  |   |   |   |   |   IntExp(1),
  |   |   |   |   |   CallExp(get_bool,[
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   SimpleVar(curr_arg))])),
  |   |   |   |   | SeqExp[
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | StringExp("Illegal argument to orb, value: '")]),
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | CallExp(sexp2s,[
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | SimpleVar(curr_arg))])]),
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | StringExp("'\n")]),
  |   |   |   |   |   IntExp(0)])]))),
  |   |   (andb,[
  |   |   | (args,true,sexps)],
  |   |   | SOME(int),
  |   |   | IfExp(
  |   |   |   OpExp(EqOp,
  |   |   |   | VarExp(
  |   |   |   |   SimpleVar(args)),
  |   |   |   | NilExp),
  |   |   |   IntExp(1),
  |   |   |   LetExp([
  |   |   |   | VarDec(curr_arg,true,NONE,
  |   |   |   |   VarExp(
  |   |   |   |   | FieldVar(
  |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   car)))],
  |   |   |   | SeqExp[
  |   |   |   |   IfExp(
  |   |   |   |   | CallExp(bool_p,[
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | SimpleVar(curr_arg))]),
  |   |   |   |   | IfExp(
  |   |   |   |   |   CallExp(andb,[
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   | SimpleVar(args),
  |   |   |   |   |   |   | cdr))]),
  |   |   |   |   |   CallExp(get_bool,[
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   SimpleVar(curr_arg))]),
  |   |   |   |   |   IntExp(0)),
  |   |   |   |   | SeqExp[
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | StringExp("Illegal argument to andb, value: '")]),
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | CallExp(sexp2s,[
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | SimpleVar(curr_arg))])]),
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | StringExp("'\n")]),
  |   |   |   |   |   IntExp(0)])]))),
  |   |   (notb,[
  |   |   | (args,true,sexps)],
  |   |   | SOME(int),
  |   |   | IfExp(
  |   |   |   OpExp(EqOp,
  |   |   |   | VarExp(
  |   |   |   |   SimpleVar(args)),
  |   |   |   | NilExp),
  |   |   |   SeqExp[
  |   |   |   | CallExp(print,[
  |   |   |   |   StringExp("Cannot apply notb to 0 arguments.\n")]),
  |   |   |   | IntExp(0)],
  |   |   |   LetExp([
  |   |   |   | VarDec(curr_arg,true,NONE,
  |   |   |   |   VarExp(
  |   |   |   |   | FieldVar(
  |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   car)))],
  |   |   |   | SeqExp[
  |   |   |   |   IfExp(
  |   |   |   |   | IfExp(
  |   |   |   |   |   CallExp(bool_p,[
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   SimpleVar(curr_arg))]),
  |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   | SimpleVar(args),
  |   |   |   |   |   |   | cdr)),
  |   |   |   |   |   | NilExp),
  |   |   |   |   |   IntExp(0)),
  |   |   |   |   | CallExp(not,[
  |   |   |   |   |   CallExp(get_bool,[
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   SimpleVar(curr_arg))])]),
  |   |   |   |   | IfExp(
  |   |   |   |   |   CallExp(bool_p,[
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   SimpleVar(curr_arg))]),
  |   |   |   |   |   SeqExp[
  |   |   |   |   |   | CallExp(print,[
  |   |   |   |   |   |   StringExp("Illegal argument to notb, value: '")]),
  |   |   |   |   |   | CallExp(print,[
  |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   SimpleVar(curr_arg))])]),
  |   |   |   |   |   | CallExp(print,[
  |   |   |   |   |   |   StringExp("'\n")]),
  |   |   |   |   |   | IntExp(0)],
  |   |   |   |   |   SeqExp[
  |   |   |   |   |   | CallExp(print,[
  |   |   |   |   |   |   StringExp("Cannot apply notb to more than 1 argument.\n")]),
  |   |   |   |   |   | IntExp(0)]))]))),
  |   |   (lt_str,[
  |   |   | (args,true,sexps)],
  |   |   | SOME(int),
  |   |   | LetExp([
  |   |   |   FunctionDec[
  |   |   |   | (aux,[
  |   |   |   |   (head,true,string),
  |   |   |   |   (args,true,sexps)],
  |   |   |   |   SOME(int),
  |   |   |   |   IfExp(
  |   |   |   |   | OpExp(EqOp,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   NilExp),
  |   |   |   |   | IntExp(1),
  |   |   |   |   | LetExp([
  |   |   |   |   |   VarDec(curr_arg,true,NONE,
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   | SimpleVar(args),
  |   |   |   |   |   |   | car)))],
  |   |   |   |   |   SeqExp[
  |   |   |   |   |   | IfExp(
  |   |   |   |   |   |   CallExp(str_p,[
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   SimpleVar(curr_arg))]),
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | CallExp(aux,[
  |   |   |   |   |   |   |   CallExp(get_str,[
  |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   SimpleVar(curr_arg))]),
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   |   |   |   cdr))]),
  |   |   |   |   |   |   | OpExp(LtOp,
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | SimpleVar(head)),
  |   |   |   |   |   |   |   CallExp(get_str,[
  |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   SimpleVar(curr_arg))])),
  |   |   |   |   |   |   | IntExp(0)),
  |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   | CallExp(print,[
  |   |   |   |   |   |   |   StringExp("Illegal argument to <s, value: '")]),
  |   |   |   |   |   |   | CallExp(print,[
  |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   SimpleVar(curr_arg))])]),
  |   |   |   |   |   |   | CallExp(print,[
  |   |   |   |   |   |   |   StringExp("'\n")]),
  |   |   |   |   |   |   | IntExp(0)])])))]],
  |   |   |   SeqExp[
  |   |   |   | IfExp(
  |   |   |   |   OpExp(EqOp,
  |   |   |   |   | VarExp(
  |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   | NilExp),
  |   |   |   |   IntExp(1),
  |   |   |   |   LetExp([
  |   |   |   |   | VarDec(curr_arg,true,NONE,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   |   car)))],
  |   |   |   |   | SeqExp[
  |   |   |   |   |   IfExp(
  |   |   |   |   |   | CallExp(str_p,[
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | SimpleVar(curr_arg))]),
  |   |   |   |   |   | CallExp(aux,[
  |   |   |   |   |   |   CallExp(get_str,[
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   SimpleVar(curr_arg))]),
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   |   |   cdr))]),
  |   |   |   |   |   | SeqExp[
  |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   | StringExp("Illegal argument to <s, value: '")]),
  |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   | CallExp(sexp2s,[
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | SimpleVar(curr_arg))])]),
  |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   | StringExp("'\n")]),
  |   |   |   |   |   |   IntExp(0)])]))])),
  |   |   (leq_str,[
  |   |   | (args,true,sexps)],
  |   |   | SOME(int),
  |   |   | LetExp([
  |   |   |   FunctionDec[
  |   |   |   | (aux,[
  |   |   |   |   (head,true,string),
  |   |   |   |   (args,true,sexps)],
  |   |   |   |   SOME(int),
  |   |   |   |   IfExp(
  |   |   |   |   | OpExp(EqOp,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   NilExp),
  |   |   |   |   | IntExp(1),
  |   |   |   |   | LetExp([
  |   |   |   |   |   VarDec(curr_arg,true,NONE,
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   | SimpleVar(args),
  |   |   |   |   |   |   | car)))],
  |   |   |   |   |   SeqExp[
  |   |   |   |   |   | IfExp(
  |   |   |   |   |   |   CallExp(str_p,[
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   SimpleVar(curr_arg))]),
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | CallExp(aux,[
  |   |   |   |   |   |   |   CallExp(get_str,[
  |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   SimpleVar(curr_arg))]),
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   |   |   |   cdr))]),
  |   |   |   |   |   |   | OpExp(LeOp,
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | SimpleVar(head)),
  |   |   |   |   |   |   |   CallExp(get_str,[
  |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   SimpleVar(curr_arg))])),
  |   |   |   |   |   |   | IntExp(0)),
  |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   | CallExp(print,[
  |   |   |   |   |   |   |   StringExp("Illegal argument to <=s, value: '")]),
  |   |   |   |   |   |   | CallExp(print,[
  |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   SimpleVar(curr_arg))])]),
  |   |   |   |   |   |   | CallExp(print,[
  |   |   |   |   |   |   |   StringExp("'\n")]),
  |   |   |   |   |   |   | IntExp(0)])])))]],
  |   |   |   SeqExp[
  |   |   |   | IfExp(
  |   |   |   |   OpExp(EqOp,
  |   |   |   |   | VarExp(
  |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   | NilExp),
  |   |   |   |   IntExp(1),
  |   |   |   |   LetExp([
  |   |   |   |   | VarDec(curr_arg,true,NONE,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   |   car)))],
  |   |   |   |   | SeqExp[
  |   |   |   |   |   IfExp(
  |   |   |   |   |   | CallExp(str_p,[
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | SimpleVar(curr_arg))]),
  |   |   |   |   |   | CallExp(aux,[
  |   |   |   |   |   |   CallExp(get_str,[
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   SimpleVar(curr_arg))]),
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   |   |   cdr))]),
  |   |   |   |   |   | SeqExp[
  |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   | StringExp("Illegal argument to <=s, value: '")]),
  |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   | CallExp(sexp2s,[
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | SimpleVar(curr_arg))])]),
  |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   | StringExp("'\n")]),
  |   |   |   |   |   |   IntExp(0)])]))])),
  |   |   (eq_str,[
  |   |   | (args,true,sexps)],
  |   |   | SOME(int),
  |   |   | LetExp([
  |   |   |   FunctionDec[
  |   |   |   | (aux,[
  |   |   |   |   (head,true,string),
  |   |   |   |   (args,true,sexps)],
  |   |   |   |   SOME(int),
  |   |   |   |   IfExp(
  |   |   |   |   | OpExp(EqOp,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   NilExp),
  |   |   |   |   | IntExp(1),
  |   |   |   |   | LetExp([
  |   |   |   |   |   VarDec(curr_arg,true,NONE,
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   | SimpleVar(args),
  |   |   |   |   |   |   | car)))],
  |   |   |   |   |   SeqExp[
  |   |   |   |   |   | IfExp(
  |   |   |   |   |   |   CallExp(str_p,[
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   SimpleVar(curr_arg))]),
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | CallExp(aux,[
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | SimpleVar(head)),
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   |   |   |   cdr))]),
  |   |   |   |   |   |   | OpExp(EqOp,
  |   |   |   |   |   |   |   CallExp(get_str,[
  |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   SimpleVar(curr_arg))]),
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | SimpleVar(head))),
  |   |   |   |   |   |   | IntExp(0)),
  |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   | CallExp(print,[
  |   |   |   |   |   |   |   StringExp("Illegal argument to =s, value: '")]),
  |   |   |   |   |   |   | CallExp(print,[
  |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   SimpleVar(curr_arg))])]),
  |   |   |   |   |   |   | CallExp(print,[
  |   |   |   |   |   |   |   StringExp("'\n")]),
  |   |   |   |   |   |   | IntExp(0)])])))]],
  |   |   |   SeqExp[
  |   |   |   | IfExp(
  |   |   |   |   OpExp(EqOp,
  |   |   |   |   | VarExp(
  |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   | NilExp),
  |   |   |   |   IntExp(1),
  |   |   |   |   LetExp([
  |   |   |   |   | VarDec(curr_arg,true,NONE,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   |   car)))],
  |   |   |   |   | SeqExp[
  |   |   |   |   |   IfExp(
  |   |   |   |   |   | CallExp(str_p,[
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | SimpleVar(curr_arg))]),
  |   |   |   |   |   | CallExp(aux,[
  |   |   |   |   |   |   CallExp(get_str,[
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   SimpleVar(curr_arg))]),
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   |   |   cdr))]),
  |   |   |   |   |   | SeqExp[
  |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   | StringExp("Illegal argument to =s, value: '")]),
  |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   | CallExp(sexp2s,[
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | SimpleVar(curr_arg))])]),
  |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   | StringExp("'\n")]),
  |   |   |   |   |   |   IntExp(0)])]))])),
  |   |   (neq_str,[
  |   |   | (args,true,sexps)],
  |   |   | SOME(int),
  |   |   | LetExp([
  |   |   |   FunctionDec[
  |   |   |   | (aux,[
  |   |   |   |   (head,true,string),
  |   |   |   |   (args,true,sexps)],
  |   |   |   |   SOME(int),
  |   |   |   |   IfExp(
  |   |   |   |   | OpExp(EqOp,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   NilExp),
  |   |   |   |   | IntExp(1),
  |   |   |   |   | LetExp([
  |   |   |   |   |   VarDec(curr_arg,true,NONE,
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   | SimpleVar(args),
  |   |   |   |   |   |   | car)))],
  |   |   |   |   |   SeqExp[
  |   |   |   |   |   | IfExp(
  |   |   |   |   |   |   CallExp(str_p,[
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   SimpleVar(curr_arg))]),
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | CallExp(aux,[
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | SimpleVar(head)),
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   |   |   |   cdr))]),
  |   |   |   |   |   |   | OpExp(NeqOp,
  |   |   |   |   |   |   |   CallExp(get_str,[
  |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   SimpleVar(curr_arg))]),
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | SimpleVar(head))),
  |   |   |   |   |   |   | IntExp(0)),
  |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   | CallExp(print,[
  |   |   |   |   |   |   |   StringExp("Illegal argument to !=s, value: '")]),
  |   |   |   |   |   |   | CallExp(print,[
  |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   SimpleVar(curr_arg))])]),
  |   |   |   |   |   |   | CallExp(print,[
  |   |   |   |   |   |   |   StringExp("'\n")]),
  |   |   |   |   |   |   | IntExp(0)])])))]],
  |   |   |   SeqExp[
  |   |   |   | IfExp(
  |   |   |   |   OpExp(EqOp,
  |   |   |   |   | VarExp(
  |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   | NilExp),
  |   |   |   |   IntExp(1),
  |   |   |   |   LetExp([
  |   |   |   |   | VarDec(curr_arg,true,NONE,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   |   car)))],
  |   |   |   |   | SeqExp[
  |   |   |   |   |   IfExp(
  |   |   |   |   |   | CallExp(str_p,[
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | SimpleVar(curr_arg))]),
  |   |   |   |   |   | CallExp(aux,[
  |   |   |   |   |   |   CallExp(get_str,[
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   SimpleVar(curr_arg))]),
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   |   |   cdr))]),
  |   |   |   |   |   | SeqExp[
  |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   | StringExp("Illegal argument to !=s, value: '")]),
  |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   | CallExp(sexp2s,[
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | SimpleVar(curr_arg))])]),
  |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   | StringExp("'\n")]),
  |   |   |   |   |   |   IntExp(0)])]))])),
  |   |   (geq_str,[
  |   |   | (args,true,sexps)],
  |   |   | SOME(int),
  |   |   | LetExp([
  |   |   |   FunctionDec[
  |   |   |   | (aux,[
  |   |   |   |   (head,true,string),
  |   |   |   |   (args,true,sexps)],
  |   |   |   |   SOME(int),
  |   |   |   |   IfExp(
  |   |   |   |   | OpExp(EqOp,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   NilExp),
  |   |   |   |   | IntExp(1),
  |   |   |   |   | LetExp([
  |   |   |   |   |   VarDec(curr_arg,true,NONE,
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   | SimpleVar(args),
  |   |   |   |   |   |   | car)))],
  |   |   |   |   |   SeqExp[
  |   |   |   |   |   | IfExp(
  |   |   |   |   |   |   CallExp(str_p,[
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   SimpleVar(curr_arg))]),
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | CallExp(aux,[
  |   |   |   |   |   |   |   CallExp(get_str,[
  |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   SimpleVar(curr_arg))]),
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   |   |   |   cdr))]),
  |   |   |   |   |   |   | OpExp(GeOp,
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | SimpleVar(head)),
  |   |   |   |   |   |   |   CallExp(get_str,[
  |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   SimpleVar(curr_arg))])),
  |   |   |   |   |   |   | IntExp(0)),
  |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   | CallExp(print,[
  |   |   |   |   |   |   |   StringExp("Illegal argument to >=s, value: '")]),
  |   |   |   |   |   |   | CallExp(print,[
  |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   SimpleVar(curr_arg))])]),
  |   |   |   |   |   |   | CallExp(print,[
  |   |   |   |   |   |   |   StringExp("'\n")]),
  |   |   |   |   |   |   | IntExp(0)])])))]],
  |   |   |   SeqExp[
  |   |   |   | IfExp(
  |   |   |   |   OpExp(EqOp,
  |   |   |   |   | VarExp(
  |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   | NilExp),
  |   |   |   |   IntExp(1),
  |   |   |   |   LetExp([
  |   |   |   |   | VarDec(curr_arg,true,NONE,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   |   car)))],
  |   |   |   |   | SeqExp[
  |   |   |   |   |   IfExp(
  |   |   |   |   |   | CallExp(str_p,[
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | SimpleVar(curr_arg))]),
  |   |   |   |   |   | CallExp(aux,[
  |   |   |   |   |   |   CallExp(get_str,[
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   SimpleVar(curr_arg))]),
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   |   |   cdr))]),
  |   |   |   |   |   | SeqExp[
  |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   | StringExp("Illegal argument to >=s, value: '")]),
  |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   | CallExp(sexp2s,[
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | SimpleVar(curr_arg))])]),
  |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   | StringExp("'\n")]),
  |   |   |   |   |   |   IntExp(0)])]))])),
  |   |   (gt_str,[
  |   |   | (args,true,sexps)],
  |   |   | SOME(int),
  |   |   | LetExp([
  |   |   |   FunctionDec[
  |   |   |   | (aux,[
  |   |   |   |   (head,true,string),
  |   |   |   |   (args,true,sexps)],
  |   |   |   |   SOME(int),
  |   |   |   |   IfExp(
  |   |   |   |   | OpExp(EqOp,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   NilExp),
  |   |   |   |   | IntExp(1),
  |   |   |   |   | LetExp([
  |   |   |   |   |   VarDec(curr_arg,true,NONE,
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   | SimpleVar(args),
  |   |   |   |   |   |   | car)))],
  |   |   |   |   |   SeqExp[
  |   |   |   |   |   | IfExp(
  |   |   |   |   |   |   CallExp(str_p,[
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   SimpleVar(curr_arg))]),
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | CallExp(aux,[
  |   |   |   |   |   |   |   CallExp(get_str,[
  |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   SimpleVar(curr_arg))]),
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   |   |   |   cdr))]),
  |   |   |   |   |   |   | OpExp(GtOp,
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | SimpleVar(head)),
  |   |   |   |   |   |   |   CallExp(get_str,[
  |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   SimpleVar(curr_arg))])),
  |   |   |   |   |   |   | IntExp(0)),
  |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   | CallExp(print,[
  |   |   |   |   |   |   |   StringExp("Illegal argument to >s, value: '")]),
  |   |   |   |   |   |   | CallExp(print,[
  |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   SimpleVar(curr_arg))])]),
  |   |   |   |   |   |   | CallExp(print,[
  |   |   |   |   |   |   |   StringExp("'\n")]),
  |   |   |   |   |   |   | IntExp(0)])])))]],
  |   |   |   SeqExp[
  |   |   |   | IfExp(
  |   |   |   |   OpExp(EqOp,
  |   |   |   |   | VarExp(
  |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   | NilExp),
  |   |   |   |   IntExp(1),
  |   |   |   |   LetExp([
  |   |   |   |   | VarDec(curr_arg,true,NONE,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   |   car)))],
  |   |   |   |   | SeqExp[
  |   |   |   |   |   IfExp(
  |   |   |   |   |   | CallExp(str_p,[
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | SimpleVar(curr_arg))]),
  |   |   |   |   |   | CallExp(aux,[
  |   |   |   |   |   |   CallExp(get_str,[
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   SimpleVar(curr_arg))]),
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   |   |   cdr))]),
  |   |   |   |   |   | SeqExp[
  |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   | StringExp("Illegal argument to >s, value: '")]),
  |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   | CallExp(sexp2s,[
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | SimpleVar(curr_arg))])]),
  |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   | StringExp("'\n")]),
  |   |   |   |   |   |   IntExp(0)])]))])),
  |   |   (append_str,[
  |   |   | (args,true,sexps)],
  |   |   | SOME(string),
  |   |   | IfExp(
  |   |   |   OpExp(EqOp,
  |   |   |   | VarExp(
  |   |   |   |   SimpleVar(args)),
  |   |   |   | NilExp),
  |   |   |   StringExp(""),
  |   |   |   LetExp([
  |   |   |   | VarDec(curr_arg,true,NONE,
  |   |   |   |   VarExp(
  |   |   |   |   | FieldVar(
  |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   car)))],
  |   |   |   | SeqExp[
  |   |   |   |   IfExp(
  |   |   |   |   | CallExp(str_p,[
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | SimpleVar(curr_arg))]),
  |   |   |   |   | CallExp(concat,[
  |   |   |   |   |   CallExp(get_str,[
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   SimpleVar(curr_arg))]),
  |   |   |   |   |   CallExp(append_str,[
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   | SimpleVar(args),
  |   |   |   |   |   |   | cdr))])]),
  |   |   |   |   | SeqExp[
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | StringExp("Illegal argument to +s, value: '")]),
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | CallExp(sexp2s,[
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | SimpleVar(curr_arg))])]),
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | StringExp("'\n")]),
  |   |   |   |   |   StringExp("")])]))),
  |   |   (str_to_int,[
  |   |   | (args,true,sexps)],
  |   |   | SOME(int),
  |   |   | IfExp(
  |   |   |   IfExp(
  |   |   |   | OpExp(EqOp,
  |   |   |   |   VarExp(
  |   |   |   |   | SimpleVar(args)),
  |   |   |   |   NilExp),
  |   |   |   | IntExp(1),
  |   |   |   | SeqExp[
  |   |   |   |   IfExp(
  |   |   |   |   | OpExp(NeqOp,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   |   cdr)),
  |   |   |   |   |   NilExp),
  |   |   |   |   | OpExp(NeqOp,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   | SimpleVar(args),
  |   |   |   |   |   |   | cdr),
  |   |   |   |   |   |   cdr)),
  |   |   |   |   |   NilExp),
  |   |   |   |   | IntExp(0))]),
  |   |   |   SeqExp[
  |   |   |   | CallExp(print,[
  |   |   |   |   StringExp("s->i needs exactly 1 argument.\n")]),
  |   |   |   | IntExp(0)],
  |   |   |   LetExp([
  |   |   |   | VarDec(curr_arg,true,NONE,
  |   |   |   |   VarExp(
  |   |   |   |   | FieldVar(
  |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   car)))],
  |   |   |   | SeqExp[
  |   |   |   |   IfExp(
  |   |   |   |   | CallExp(str_p,[
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | SimpleVar(curr_arg))]),
  |   |   |   |   | CallExp(s2i,[
  |   |   |   |   |   CallExp(get_str,[
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   SimpleVar(curr_arg))])]),
  |   |   |   |   | SeqExp[
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | StringExp("Illegal argument to s->i, value: '")]),
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | CallExp(sexp2s,[
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | SimpleVar(curr_arg))])]),
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | StringExp("'\n")]),
  |   |   |   |   |   IntExp(0)])]))),
  |   |   (int_to_str,[
  |   |   | (args,true,sexps)],
  |   |   | SOME(string),
  |   |   | IfExp(
  |   |   |   IfExp(
  |   |   |   | OpExp(EqOp,
  |   |   |   |   VarExp(
  |   |   |   |   | SimpleVar(args)),
  |   |   |   |   NilExp),
  |   |   |   | IntExp(1),
  |   |   |   | SeqExp[
  |   |   |   |   IfExp(
  |   |   |   |   | OpExp(NeqOp,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   |   cdr)),
  |   |   |   |   |   NilExp),
  |   |   |   |   | OpExp(NeqOp,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   | SimpleVar(args),
  |   |   |   |   |   |   | cdr),
  |   |   |   |   |   |   cdr)),
  |   |   |   |   |   NilExp),
  |   |   |   |   | IntExp(0))]),
  |   |   |   SeqExp[
  |   |   |   | CallExp(print,[
  |   |   |   |   StringExp("i->s needs exactly 1 argument.\n")]),
  |   |   |   | StringExp("")],
  |   |   |   LetExp([
  |   |   |   | VarDec(curr_arg,true,NONE,
  |   |   |   |   VarExp(
  |   |   |   |   | FieldVar(
  |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   car)))],
  |   |   |   | SeqExp[
  |   |   |   |   IfExp(
  |   |   |   |   | CallExp(int_p,[
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | SimpleVar(curr_arg))]),
  |   |   |   |   | CallExp(i2s,[
  |   |   |   |   |   CallExp(get_int,[
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   SimpleVar(curr_arg))])]),
  |   |   |   |   | SeqExp[
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | StringExp("Illegal argument to i->s, value: '")]),
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | CallExp(sexp2s,[
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | SimpleVar(curr_arg))])]),
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | StringExp("'\n")]),
  |   |   |   |   |   StringExp("")])]))),
  |   |   (substring_,[
  |   |   | (args,true,sexps)],
  |   |   | SOME(string),
  |   |   | IfExp(
  |   |   |   IfExp(
  |   |   |   | IfExp(
  |   |   |   |   IfExp(
  |   |   |   |   | OpExp(EqOp,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   NilExp),
  |   |   |   |   | IntExp(1),
  |   |   |   |   | OpExp(EqOp,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   |   cdr)),
  |   |   |   |   |   NilExp)),
  |   |   |   |   IntExp(1),
  |   |   |   |   OpExp(EqOp,
  |   |   |   |   | VarExp(
  |   |   |   |   |   FieldVar(
  |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   |   cdr),
  |   |   |   |   |   | cdr)),
  |   |   |   |   | NilExp)),
  |   |   |   | IntExp(1),
  |   |   |   | SeqExp[
  |   |   |   |   IfExp(
  |   |   |   |   | OpExp(NeqOp,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   | SimpleVar(args),
  |   |   |   |   |   |   | cdr),
  |   |   |   |   |   |   cdr)),
  |   |   |   |   |   NilExp),
  |   |   |   |   | OpExp(NeqOp,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   |   |   cdr),
  |   |   |   |   |   |   | cdr),
  |   |   |   |   |   |   cdr)),
  |   |   |   |   |   NilExp),
  |   |   |   |   | IntExp(0))]),
  |   |   |   SeqExp[
  |   |   |   | CallExp(print,[
  |   |   |   |   StringExp("substring needs exactly 3 arguments.\n")]),
  |   |   |   | StringExp("")],
  |   |   |   LetExp([
  |   |   |   | VarDec(str_arg,true,NONE,
  |   |   |   |   VarExp(
  |   |   |   |   | FieldVar(
  |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   car))),
  |   |   |   | VarDec(idx_arg,true,NONE,
  |   |   |   |   VarExp(
  |   |   |   |   | FieldVar(
  |   |   |   |   |   FieldVar(
  |   |   |   |   |   | SimpleVar(args),
  |   |   |   |   |   | cdr),
  |   |   |   |   |   car))),
  |   |   |   | VarDec(len_arg,true,NONE,
  |   |   |   |   VarExp(
  |   |   |   |   | FieldVar(
  |   |   |   |   |   FieldVar(
  |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   |   cdr),
  |   |   |   |   |   | cdr),
  |   |   |   |   |   car)))],
  |   |   |   | SeqExp[
  |   |   |   |   IfExp(
  |   |   |   |   | IfExp(
  |   |   |   |   |   IfExp(
  |   |   |   |   |   | CallExp(str_p,[
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | SimpleVar(str_arg))]),
  |   |   |   |   |   | CallExp(int_p,[
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | SimpleVar(idx_arg))]),
  |   |   |   |   |   | IntExp(0)),
  |   |   |   |   |   CallExp(int_p,[
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   SimpleVar(len_arg))]),
  |   |   |   |   |   IntExp(0)),
  |   |   |   |   | CallExp(substring,[
  |   |   |   |   |   CallExp(get_str,[
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   SimpleVar(str_arg))]),
  |   |   |   |   |   CallExp(get_int,[
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   SimpleVar(idx_arg))]),
  |   |   |   |   |   CallExp(get_int,[
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   SimpleVar(len_arg))])]),
  |   |   |   |   | SeqExp[
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | StringExp("Illegal argument to substring, values: '")]),
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | CallExp(sexp2s,[
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | SimpleVar(str_arg))])]),
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | StringExp("', '")]),
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | CallExp(sexp2s,[
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | SimpleVar(idx_arg))])]),
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | StringExp("', '")]),
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | CallExp(sexp2s,[
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | SimpleVar(len_arg))])]),
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | StringExp("'\n")]),
  |   |   |   |   |   StringExp("")])]))),
  |   |   (print_,[
  |   |   | (args,true,sexps)],
  |   |   | SOME(sexps),
  |   |   | IfExp(
  |   |   |   OpExp(EqOp,
  |   |   |   | VarExp(
  |   |   |   |   SimpleVar(args)),
  |   |   |   | NilExp),
  |   |   |   NilExp,
  |   |   |   LetExp([
  |   |   |   | VarDec(curr_arg,true,NONE,
  |   |   |   |   VarExp(
  |   |   |   |   | FieldVar(
  |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   car)))],
  |   |   |   | SeqExp[
  |   |   |   |   IfExp(
  |   |   |   |   | CallExp(str_p,[
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | SimpleVar(curr_arg))]),
  |   |   |   |   | CallExp(print,[
  |   |   |   |   |   CallExp(get_str,[
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   SimpleVar(curr_arg))])]),
  |   |   |   |   | CallExp(print,[
  |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   SimpleVar(curr_arg))])])),
  |   |   |   |   CallExp(print_,[
  |   |   |   |   | VarExp(
  |   |   |   |   |   FieldVar(
  |   |   |   |   |   | SimpleVar(args),
  |   |   |   |   |   | cdr))])]))),
  |   |   (newline,[
  |   |   | (args,true,sexps)],
  |   |   | SOME(sexps),
  |   |   | IfExp(
  |   |   |   OpExp(EqOp,
  |   |   |   | VarExp(
  |   |   |   |   SimpleVar(args)),
  |   |   |   | NilExp),
  |   |   |   SeqExp[
  |   |   |   | CallExp(print,[
  |   |   |   |   StringExp("\n")]),
  |   |   |   | NilExp],
  |   |   |   SeqExp[
  |   |   |   | CallExp(print,[
  |   |   |   |   StringExp("newline takes exactly 0 arguments.\n")]),
  |   |   |   | NilExp])),
  |   |   (read_char_,[
  |   |   | (args,true,sexps)],
  |   |   | SOME(string),
  |   |   | IfExp(
  |   |   |   OpExp(EqOp,
  |   |   |   | VarExp(
  |   |   |   |   SimpleVar(args)),
  |   |   |   | NilExp),
  |   |   |   CallExp(getchar,[]),
  |   |   |   SeqExp[
  |   |   |   | CallExp(print,[
  |   |   |   |   StringExp("read-char takes exactly 0 arguments.\n")]),
  |   |   |   | StringExp("")])),
  |   |   (read_line_,[
  |   |   | (args,true,sexps)],
  |   |   | SOME(string),
  |   |   | IfExp(
  |   |   |   OpExp(EqOp,
  |   |   |   | VarExp(
  |   |   |   |   SimpleVar(args)),
  |   |   |   | NilExp),
  |   |   |   LetExp([
  |   |   |   | VarDec(nxt_char,true,NONE,
  |   |   |   |   CallExp(getchar,[])),
  |   |   |   | VarDec(res,true,NONE,
  |   |   |   |   VarExp(
  |   |   |   |   | SimpleVar(nxt_char)))],
  |   |   |   | SeqExp[
  |   |   |   |   WhileExp(
  |   |   |   |   | OpExp(NeqOp,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | SimpleVar(nxt_char)),
  |   |   |   |   |   StringExp("\n")),
  |   |   |   |   | SeqExp[
  |   |   |   |   |   AssignExp(
  |   |   |   |   |   | SimpleVar(nxt_char),
  |   |   |   |   |   | CallExp(getchar,[])),
  |   |   |   |   |   AssignExp(
  |   |   |   |   |   | SimpleVar(res),
  |   |   |   |   |   | CallExp(concat,[
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | SimpleVar(res)),
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | SimpleVar(nxt_char))]))]),
  |   |   |   |   VarExp(
  |   |   |   |   | SimpleVar(res))]),
  |   |   |   SeqExp[
  |   |   |   | CallExp(print,[
  |   |   |   |   StringExp("read-line takes exactly 0 arguments.\n")]),
  |   |   |   | StringExp("")])),
  |   |   (ord_,[
  |   |   | (args,true,sexps)],
  |   |   | SOME(int),
  |   |   | IfExp(
  |   |   |   IfExp(
  |   |   |   | OpExp(EqOp,
  |   |   |   |   VarExp(
  |   |   |   |   | SimpleVar(args)),
  |   |   |   |   NilExp),
  |   |   |   | IntExp(1),
  |   |   |   | SeqExp[
  |   |   |   |   IfExp(
  |   |   |   |   | OpExp(NeqOp,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   |   cdr)),
  |   |   |   |   |   NilExp),
  |   |   |   |   | OpExp(NeqOp,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   | SimpleVar(args),
  |   |   |   |   |   |   | cdr),
  |   |   |   |   |   |   cdr)),
  |   |   |   |   |   NilExp),
  |   |   |   |   | IntExp(0))]),
  |   |   |   SeqExp[
  |   |   |   | CallExp(print,[
  |   |   |   |   StringExp("ord needs exactly 1 argument.\n")]),
  |   |   |   | IntExp(0)],
  |   |   |   LetExp([
  |   |   |   | VarDec(curr_arg,true,NONE,
  |   |   |   |   VarExp(
  |   |   |   |   | FieldVar(
  |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   car)))],
  |   |   |   | SeqExp[
  |   |   |   |   IfExp(
  |   |   |   |   | CallExp(str_p,[
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | SimpleVar(curr_arg))]),
  |   |   |   |   | CallExp(ord,[
  |   |   |   |   |   CallExp(get_str,[
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   SimpleVar(curr_arg))])]),
  |   |   |   |   | SeqExp[
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | StringExp("Illegal argument to ord, value: '")]),
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | CallExp(sexp2s,[
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | SimpleVar(curr_arg))])]),
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | StringExp("'\n")]),
  |   |   |   |   |   IntExp(0)])]))),
  |   |   (chr_,[
  |   |   | (args,true,sexps)],
  |   |   | SOME(string),
  |   |   | IfExp(
  |   |   |   IfExp(
  |   |   |   | OpExp(EqOp,
  |   |   |   |   VarExp(
  |   |   |   |   | SimpleVar(args)),
  |   |   |   |   NilExp),
  |   |   |   | IntExp(1),
  |   |   |   | SeqExp[
  |   |   |   |   IfExp(
  |   |   |   |   | OpExp(NeqOp,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   |   cdr)),
  |   |   |   |   |   NilExp),
  |   |   |   |   | OpExp(NeqOp,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   | SimpleVar(args),
  |   |   |   |   |   |   | cdr),
  |   |   |   |   |   |   cdr)),
  |   |   |   |   |   NilExp),
  |   |   |   |   | IntExp(0))]),
  |   |   |   SeqExp[
  |   |   |   | CallExp(print,[
  |   |   |   |   StringExp("chr needs exactly 1 argument.\n")]),
  |   |   |   | StringExp("")],
  |   |   |   LetExp([
  |   |   |   | VarDec(curr_arg,true,NONE,
  |   |   |   |   VarExp(
  |   |   |   |   | FieldVar(
  |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   car)))],
  |   |   |   | SeqExp[
  |   |   |   |   IfExp(
  |   |   |   |   | CallExp(int_p,[
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | SimpleVar(curr_arg))]),
  |   |   |   |   | CallExp(chr,[
  |   |   |   |   |   CallExp(get_int,[
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   SimpleVar(curr_arg))])]),
  |   |   |   |   | SeqExp[
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | StringExp("Illegal argument to chr, value: '")]),
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | CallExp(sexp2s,[
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | SimpleVar(curr_arg))])]),
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | StringExp("'\n")]),
  |   |   |   |   |   StringExp("")])]))),
  |   |   (list,[
  |   |   | (args,true,sexps)],
  |   |   | SOME(sexps),
  |   |   | VarExp(
  |   |   |   SimpleVar(args))),
  |   |   (cons,[
  |   |   | (args,true,sexps)],
  |   |   | SOME(sexps),
  |   |   | IfExp(
  |   |   |   OpExp(EqOp,
  |   |   |   | VarExp(
  |   |   |   |   SimpleVar(args)),
  |   |   |   | NilExp),
  |   |   |   SeqExp[
  |   |   |   | CallExp(print,[
  |   |   |   |   StringExp("Cannot apply cons to 0 arguments\n")]),
  |   |   |   | NilExp],
  |   |   |   LetExp([
  |   |   |   | VarDec(curr_arg,true,NONE,
  |   |   |   |   VarExp(
  |   |   |   |   | FieldVar(
  |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   car)))],
  |   |   |   | SeqExp[
  |   |   |   |   IfExp(
  |   |   |   |   | OpExp(EqOp,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   |   cdr)),
  |   |   |   |   |   NilExp),
  |   |   |   |   | IfExp(
  |   |   |   |   |   CallExp(sexps_p,[
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   SimpleVar(curr_arg))]),
  |   |   |   |   |   CallExp(get_sexps,[
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   SimpleVar(curr_arg))]),
  |   |   |   |   |   SeqExp[
  |   |   |   |   |   | CallExp(print,[
  |   |   |   |   |   |   StringExp("Last argument to cons has to be a list. It was '")]),
  |   |   |   |   |   | CallExp(print,[
  |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   SimpleVar(curr_arg))])]),
  |   |   |   |   |   | CallExp(print,[
  |   |   |   |   |   |   StringExp("'\n")]),
  |   |   |   |   |   | NilExp]),
  |   |   |   |   | RecordExp(sexps,[
  |   |   |   |   |   (car,
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   SimpleVar(curr_arg))),
  |   |   |   |   |   (cdr,
  |   |   |   |   |   | CallExp(cons,[
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   |   |   cdr))]))]))]))),
  |   |   (car,[
  |   |   | (args,true,sexps)],
  |   |   | SOME(sexp),
  |   |   | IfExp(
  |   |   |   IfExp(
  |   |   |   | OpExp(EqOp,
  |   |   |   |   VarExp(
  |   |   |   |   | SimpleVar(args)),
  |   |   |   |   NilExp),
  |   |   |   | IntExp(1),
  |   |   |   | SeqExp[
  |   |   |   |   IfExp(
  |   |   |   |   | OpExp(NeqOp,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   |   cdr)),
  |   |   |   |   |   NilExp),
  |   |   |   |   | OpExp(NeqOp,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   | SimpleVar(args),
  |   |   |   |   |   |   | cdr),
  |   |   |   |   |   |   cdr)),
  |   |   |   |   |   NilExp),
  |   |   |   |   | IntExp(0))]),
  |   |   |   SeqExp[
  |   |   |   | CallExp(print,[
  |   |   |   |   StringExp("car needs exactly 1 argument\n")]),
  |   |   |   | NilExp],
  |   |   |   LetExp([
  |   |   |   | VarDec(curr_arg,true,NONE,
  |   |   |   |   VarExp(
  |   |   |   |   | FieldVar(
  |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   car)))],
  |   |   |   | SeqExp[
  |   |   |   |   IfExp(
  |   |   |   |   | CallExp(sexps_p,[
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | SimpleVar(curr_arg))]),
  |   |   |   |   | LetExp([
  |   |   |   |   |   VarDec(curr_arg_content,true,NONE,
  |   |   |   |   |   | CallExp(get_sexps,[
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | SimpleVar(curr_arg))]))],
  |   |   |   |   |   SeqExp[
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   | SimpleVar(curr_arg_content),
  |   |   |   |   |   |   | car))]),
  |   |   |   |   | SeqExp[
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | StringExp("Illegal argument to car, value: '")]),
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | CallExp(sexp2s,[
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | SimpleVar(curr_arg))])]),
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | StringExp("'\n")]),
  |   |   |   |   |   NilExp])]))),
  |   |   (cdr,[
  |   |   | (args,true,sexps)],
  |   |   | SOME(sexps),
  |   |   | IfExp(
  |   |   |   IfExp(
  |   |   |   | OpExp(EqOp,
  |   |   |   |   VarExp(
  |   |   |   |   | SimpleVar(args)),
  |   |   |   |   NilExp),
  |   |   |   | IntExp(1),
  |   |   |   | SeqExp[
  |   |   |   |   IfExp(
  |   |   |   |   | OpExp(NeqOp,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   |   cdr)),
  |   |   |   |   |   NilExp),
  |   |   |   |   | OpExp(NeqOp,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   | SimpleVar(args),
  |   |   |   |   |   |   | cdr),
  |   |   |   |   |   |   cdr)),
  |   |   |   |   |   NilExp),
  |   |   |   |   | IntExp(0))]),
  |   |   |   SeqExp[
  |   |   |   | CallExp(print,[
  |   |   |   |   StringExp("cdr needs exactly 1 argument\n")]),
  |   |   |   | NilExp],
  |   |   |   LetExp([
  |   |   |   | VarDec(curr_arg,true,NONE,
  |   |   |   |   VarExp(
  |   |   |   |   | FieldVar(
  |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   car)))],
  |   |   |   | SeqExp[
  |   |   |   |   IfExp(
  |   |   |   |   | CallExp(sexps_p,[
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | SimpleVar(curr_arg))]),
  |   |   |   |   | LetExp([
  |   |   |   |   |   VarDec(curr_arg_content,true,NONE,
  |   |   |   |   |   | CallExp(get_sexps,[
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | SimpleVar(curr_arg))]))],
  |   |   |   |   |   SeqExp[
  |   |   |   |   |   | IfExp(
  |   |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   SimpleVar(curr_arg_content)),
  |   |   |   |   |   |   | NilExp),
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   SimpleVar(curr_arg_content),
  |   |   |   |   |   |   |   cdr)),
  |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   | CallExp(print,[
  |   |   |   |   |   |   |   StringExp("Cannot apply cdr to an empty list\n")]),
  |   |   |   |   |   |   | NilExp])]),
  |   |   |   |   | SeqExp[
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | StringExp("Illegal argument to cdr, value: '")]),
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | CallExp(sexp2s,[
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | SimpleVar(curr_arg))])]),
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | StringExp("'\n")]),
  |   |   |   |   |   NilExp])]))),
  |   |   (intp,[
  |   |   | (args,true,sexps)],
  |   |   | SOME(int),
  |   |   | IfExp(
  |   |   |   IfExp(
  |   |   |   | OpExp(EqOp,
  |   |   |   |   VarExp(
  |   |   |   |   | SimpleVar(args)),
  |   |   |   |   NilExp),
  |   |   |   | IntExp(1),
  |   |   |   | SeqExp[
  |   |   |   |   IfExp(
  |   |   |   |   | OpExp(NeqOp,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   |   cdr)),
  |   |   |   |   |   NilExp),
  |   |   |   |   | OpExp(NeqOp,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   | SimpleVar(args),
  |   |   |   |   |   |   | cdr),
  |   |   |   |   |   |   cdr)),
  |   |   |   |   |   NilExp),
  |   |   |   |   | IntExp(0))]),
  |   |   |   SeqExp[
  |   |   |   | CallExp(print,[
  |   |   |   |   StringExp("int? needs exactly 1 argument.\n")]),
  |   |   |   | IntExp(0)],
  |   |   |   LetExp([
  |   |   |   | VarDec(curr_arg,true,NONE,
  |   |   |   |   VarExp(
  |   |   |   |   | FieldVar(
  |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   car)))],
  |   |   |   | SeqExp[
  |   |   |   |   CallExp(int_p,[
  |   |   |   |   | VarExp(
  |   |   |   |   |   SimpleVar(curr_arg))])]))),
  |   |   (stringp,[
  |   |   | (args,true,sexps)],
  |   |   | SOME(int),
  |   |   | IfExp(
  |   |   |   IfExp(
  |   |   |   | OpExp(EqOp,
  |   |   |   |   VarExp(
  |   |   |   |   | SimpleVar(args)),
  |   |   |   |   NilExp),
  |   |   |   | IntExp(1),
  |   |   |   | SeqExp[
  |   |   |   |   IfExp(
  |   |   |   |   | OpExp(NeqOp,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   |   cdr)),
  |   |   |   |   |   NilExp),
  |   |   |   |   | OpExp(NeqOp,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   | SimpleVar(args),
  |   |   |   |   |   |   | cdr),
  |   |   |   |   |   |   cdr)),
  |   |   |   |   |   NilExp),
  |   |   |   |   | IntExp(0))]),
  |   |   |   SeqExp[
  |   |   |   | CallExp(print,[
  |   |   |   |   StringExp("string? needs exactly 1 argument.\n")]),
  |   |   |   | IntExp(0)],
  |   |   |   LetExp([
  |   |   |   | VarDec(curr_arg,true,NONE,
  |   |   |   |   VarExp(
  |   |   |   |   | FieldVar(
  |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   car)))],
  |   |   |   | SeqExp[
  |   |   |   |   CallExp(str_p,[
  |   |   |   |   | VarExp(
  |   |   |   |   |   SimpleVar(curr_arg))])]))),
  |   |   (listp,[
  |   |   | (args,true,sexps)],
  |   |   | SOME(int),
  |   |   | IfExp(
  |   |   |   IfExp(
  |   |   |   | OpExp(EqOp,
  |   |   |   |   VarExp(
  |   |   |   |   | SimpleVar(args)),
  |   |   |   |   NilExp),
  |   |   |   | IntExp(1),
  |   |   |   | SeqExp[
  |   |   |   |   IfExp(
  |   |   |   |   | OpExp(NeqOp,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   |   cdr)),
  |   |   |   |   |   NilExp),
  |   |   |   |   | OpExp(NeqOp,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   | SimpleVar(args),
  |   |   |   |   |   |   | cdr),
  |   |   |   |   |   |   cdr)),
  |   |   |   |   |   NilExp),
  |   |   |   |   | IntExp(0))]),
  |   |   |   SeqExp[
  |   |   |   | CallExp(print,[
  |   |   |   |   StringExp("list? needs exactly 1 argument.\n")]),
  |   |   |   | IntExp(0)],
  |   |   |   LetExp([
  |   |   |   | VarDec(curr_arg,true,NONE,
  |   |   |   |   VarExp(
  |   |   |   |   | FieldVar(
  |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   car)))],
  |   |   |   | SeqExp[
  |   |   |   |   CallExp(sexps_p,[
  |   |   |   |   | VarExp(
  |   |   |   |   |   SimpleVar(curr_arg))])]))),
  |   |   (nilp,[
  |   |   | (args,true,sexps)],
  |   |   | SOME(int),
  |   |   | IfExp(
  |   |   |   IfExp(
  |   |   |   | OpExp(EqOp,
  |   |   |   |   VarExp(
  |   |   |   |   | SimpleVar(args)),
  |   |   |   |   NilExp),
  |   |   |   | IntExp(1),
  |   |   |   | SeqExp[
  |   |   |   |   IfExp(
  |   |   |   |   | OpExp(NeqOp,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   |   cdr)),
  |   |   |   |   |   NilExp),
  |   |   |   |   | OpExp(NeqOp,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   | SimpleVar(args),
  |   |   |   |   |   |   | cdr),
  |   |   |   |   |   |   cdr)),
  |   |   |   |   |   NilExp),
  |   |   |   |   | IntExp(0))]),
  |   |   |   SeqExp[
  |   |   |   | CallExp(print,[
  |   |   |   |   StringExp("nil? needs exactly 1 argument.\n")]),
  |   |   |   | IntExp(0)],
  |   |   |   LetExp([
  |   |   |   | VarDec(curr_arg,true,NONE,
  |   |   |   |   VarExp(
  |   |   |   |   | FieldVar(
  |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   car)))],
  |   |   |   | SeqExp[
  |   |   |   |   IfExp(
  |   |   |   |   | CallExp(sexps_p,[
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | SimpleVar(curr_arg))]),
  |   |   |   |   | OpExp(EqOp,
  |   |   |   |   |   CallExp(get_sexps,[
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   SimpleVar(curr_arg))]),
  |   |   |   |   |   NilExp),
  |   |   |   |   | IntExp(0))]))),
  |   |   (funp,[
  |   |   | (args,true,sexps)],
  |   |   | SOME(int),
  |   |   | IfExp(
  |   |   |   IfExp(
  |   |   |   | OpExp(EqOp,
  |   |   |   |   VarExp(
  |   |   |   |   | SimpleVar(args)),
  |   |   |   |   NilExp),
  |   |   |   | IntExp(1),
  |   |   |   | SeqExp[
  |   |   |   |   IfExp(
  |   |   |   |   | OpExp(NeqOp,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   |   cdr)),
  |   |   |   |   |   NilExp),
  |   |   |   |   | OpExp(NeqOp,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   | SimpleVar(args),
  |   |   |   |   |   |   | cdr),
  |   |   |   |   |   |   cdr)),
  |   |   |   |   |   NilExp),
  |   |   |   |   | IntExp(0))]),
  |   |   |   SeqExp[
  |   |   |   | CallExp(print,[
  |   |   |   |   StringExp("fun? needs exactly 1 argument.\n")]),
  |   |   |   | IntExp(0)],
  |   |   |   LetExp([
  |   |   |   | VarDec(curr_arg,true,NONE,
  |   |   |   |   VarExp(
  |   |   |   |   | FieldVar(
  |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   car)))],
  |   |   |   | SeqExp[
  |   |   |   |   CallExp(fun_p,[
  |   |   |   |   | VarExp(
  |   |   |   |   |   SimpleVar(curr_arg))])]))),
  |   |   (exit_,[
  |   |   | (args,true,sexps)],
  |   |   | SOME(sexps),
  |   |   | IfExp(
  |   |   |   IfExp(
  |   |   |   | OpExp(NeqOp,
  |   |   |   |   VarExp(
  |   |   |   |   | SimpleVar(args)),
  |   |   |   |   NilExp),
  |   |   |   | OpExp(NeqOp,
  |   |   |   |   VarExp(
  |   |   |   |   | FieldVar(
  |   |   |   |   |   SimpleVar(args),
  |   |   |   |   |   cdr)),
  |   |   |   |   NilExp),
  |   |   |   | IntExp(0)),
  |   |   |   SeqExp[
  |   |   |   | CallExp(print,[
  |   |   |   |   StringExp("exit cannot be used with more that 1 argument.\n")]),
  |   |   |   | NilExp],
  |   |   |   IfExp(
  |   |   |   | OpExp(EqOp,
  |   |   |   |   VarExp(
  |   |   |   |   | SimpleVar(args)),
  |   |   |   |   NilExp),
  |   |   |   | SeqExp[
  |   |   |   |   CallExp(exit,[
  |   |   |   |   | IntExp(0)]),
  |   |   |   |   NilExp],
  |   |   |   | LetExp([
  |   |   |   |   VarDec(curr_arg,true,NONE,
  |   |   |   |   | VarExp(
  |   |   |   |   |   FieldVar(
  |   |   |   |   |   | SimpleVar(args),
  |   |   |   |   |   | car)))],
  |   |   |   |   SeqExp[
  |   |   |   |   | IfExp(
  |   |   |   |   |   CallExp(int_p,[
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   SimpleVar(curr_arg))]),
  |   |   |   |   |   SeqExp[
  |   |   |   |   |   | CallExp(exit,[
  |   |   |   |   |   |   CallExp(get_int,[
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   SimpleVar(curr_arg))])]),
  |   |   |   |   |   | NilExp],
  |   |   |   |   |   SeqExp[
  |   |   |   |   |   | CallExp(print,[
  |   |   |   |   |   |   StringExp("Illegal argument to exit, value: '")]),
  |   |   |   |   |   | CallExp(print,[
  |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   SimpleVar(curr_arg))])]),
  |   |   |   |   |   | CallExp(print,[
  |   |   |   |   |   |   StringExp("'\n")]),
  |   |   |   |   |   | NilExp])])))),
  |   |   (help,[
  |   |   | (args,true,sexps)],
  |   |   | SOME(sexps),
  |   |   | SeqExp[
  |   |   |   CallExp(print,[
  |   |   |   | StringExp("All available entries in the environment at this point are:\n")]),
  |   |   |   CallExp(print,[
  |   |   |   | CallExp(env2s_short,[
  |   |   |   |   VarExp(
  |   |   |   |   | SimpleVar(env))])]),
  |   |   |   CallExp(print,[
  |   |   |   | StringExp("\nI hope you find something useful. Oh, and execute '(exit)' to exit.\n")]),
  |   |   |   NilExp])]],
  |   | SeqExp[
  |   |   IfExp(
  |   |   | OpExp(EqOp,
  |   |   |   VarExp(
  |   |   |   | SimpleVar(fun_name)),
  |   |   |   StringExp("+")),
  |   |   | CallExp(mk_int,[
  |   |   |   CallExp(plus,[
  |   |   |   | VarExp(
  |   |   |   |   SimpleVar(args))])]),
  |   |   | IfExp(
  |   |   |   OpExp(EqOp,
  |   |   |   | VarExp(
  |   |   |   |   SimpleVar(fun_name)),
  |   |   |   | StringExp("-")),
  |   |   |   CallExp(mk_int,[
  |   |   |   | CallExp(minus,[
  |   |   |   |   VarExp(
  |   |   |   |   | SimpleVar(args))])]),
  |   |   |   IfExp(
  |   |   |   | OpExp(EqOp,
  |   |   |   |   VarExp(
  |   |   |   |   | SimpleVar(fun_name)),
  |   |   |   |   StringExp("*")),
  |   |   |   | CallExp(mk_int,[
  |   |   |   |   CallExp(times,[
  |   |   |   |   | VarExp(
  |   |   |   |   |   SimpleVar(args))])]),
  |   |   |   | IfExp(
  |   |   |   |   OpExp(EqOp,
  |   |   |   |   | VarExp(
  |   |   |   |   |   SimpleVar(fun_name)),
  |   |   |   |   | StringExp("/")),
  |   |   |   |   CallExp(mk_int,[
  |   |   |   |   | CallExp(div,[
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | SimpleVar(args))])]),
  |   |   |   |   IfExp(
  |   |   |   |   | OpExp(EqOp,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | SimpleVar(fun_name)),
  |   |   |   |   |   StringExp("^")),
  |   |   |   |   | CallExp(mk_int,[
  |   |   |   |   |   CallExp(expt,[
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   SimpleVar(args))])]),
  |   |   |   |   | IfExp(
  |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   SimpleVar(fun_name)),
  |   |   |   |   |   | StringExp("<")),
  |   |   |   |   |   CallExp(mk_bool,[
  |   |   |   |   |   | CallExp(lt_int,[
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | SimpleVar(args))])]),
  |   |   |   |   |   IfExp(
  |   |   |   |   |   | OpExp(EqOp,
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | SimpleVar(fun_name)),
  |   |   |   |   |   |   StringExp("<=")),
  |   |   |   |   |   | CallExp(mk_bool,[
  |   |   |   |   |   |   CallExp(leq_int,[
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   SimpleVar(args))])]),
  |   |   |   |   |   | IfExp(
  |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   SimpleVar(fun_name)),
  |   |   |   |   |   |   | StringExp("=")),
  |   |   |   |   |   |   CallExp(mk_bool,[
  |   |   |   |   |   |   | CallExp(eq_int,[
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | SimpleVar(args))])]),
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | OpExp(EqOp,
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | SimpleVar(fun_name)),
  |   |   |   |   |   |   |   StringExp("!=")),
  |   |   |   |   |   |   | CallExp(mk_bool,[
  |   |   |   |   |   |   |   CallExp(neq_int,[
  |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   SimpleVar(args))])]),
  |   |   |   |   |   |   | IfExp(
  |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   SimpleVar(fun_name)),
  |   |   |   |   |   |   |   | StringExp(">=")),
  |   |   |   |   |   |   |   CallExp(mk_bool,[
  |   |   |   |   |   |   |   | CallExp(geq_int,[
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(args))])]),
  |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   | OpExp(EqOp,
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | SimpleVar(fun_name)),
  |   |   |   |   |   |   |   |   StringExp(">")),
  |   |   |   |   |   |   |   | CallExp(mk_bool,[
  |   |   |   |   |   |   |   |   CallExp(gt_int,[
  |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   SimpleVar(args))])]),
  |   |   |   |   |   |   |   | IfExp(
  |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   SimpleVar(fun_name)),
  |   |   |   |   |   |   |   |   | StringExp("min")),
  |   |   |   |   |   |   |   |   CallExp(mk_int,[
  |   |   |   |   |   |   |   |   | CallExp(min,[
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | SimpleVar(args))])]),
  |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   | OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | SimpleVar(fun_name)),
  |   |   |   |   |   |   |   |   |   StringExp("max")),
  |   |   |   |   |   |   |   |   | CallExp(mk_int,[
  |   |   |   |   |   |   |   |   |   CallExp(max,[
  |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   SimpleVar(args))])]),
  |   |   |   |   |   |   |   |   | IfExp(
  |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_name)),
  |   |   |   |   |   |   |   |   |   | StringExp("progn")),
  |   |   |   |   |   |   |   |   |   CallExp(progn,[
  |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   SimpleVar(args))]),
  |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   | OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | SimpleVar(fun_name)),
  |   |   |   |   |   |   |   |   |   |   StringExp("map")),
  |   |   |   |   |   |   |   |   |   | CallExp(mk_sexps,[
  |   |   |   |   |   |   |   |   |   |   CallExp(map,[
  |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args))])]),
  |   |   |   |   |   |   |   |   |   | IfExp(
  |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_name)),
  |   |   |   |   |   |   |   |   |   |   | StringExp("foldr")),
  |   |   |   |   |   |   |   |   |   |   CallExp(foldr,[
  |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args))]),
  |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   | OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(fun_name)),
  |   |   |   |   |   |   |   |   |   |   |   StringExp("foldl")),
  |   |   |   |   |   |   |   |   |   |   | CallExp(foldl,[
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(args))]),
  |   |   |   |   |   |   |   |   |   |   | IfExp(
  |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_name)),
  |   |   |   |   |   |   |   |   |   |   |   | StringExp("orb")),
  |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_bool,[
  |   |   |   |   |   |   |   |   |   |   |   | CallExp(orb,[
  |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(args))])]),
  |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   | OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(fun_name)),
  |   |   |   |   |   |   |   |   |   |   |   |   StringExp("andb")),
  |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_bool,[
  |   |   |   |   |   |   |   |   |   |   |   |   CallExp(andb,[
  |   |   |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args))])]),
  |   |   |   |   |   |   |   |   |   |   |   | IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_name)),
  |   |   |   |   |   |   |   |   |   |   |   |   | StringExp("notb")),
  |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_bool,[
  |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(andb,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(args))])]),
  |   |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   | OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(fun_name)),
  |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("<s")),
  |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_bool,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(lt_str,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args))])]),
  |   |   |   |   |   |   |   |   |   |   |   |   | IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_name)),
  |   |   |   |   |   |   |   |   |   |   |   |   |   | StringExp("<=s")),
  |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_bool,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(leq_str,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(args))])]),
  |   |   |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   | OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(fun_name)),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("=s")),
  |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_bool,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(eq_str,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args))])]),
  |   |   |   |   |   |   |   |   |   |   |   |   |   | IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_name)),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | StringExp("!=s")),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_bool,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(neq_str,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(args))])]),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(fun_name)),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp(">=s")),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_bool,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(geq_str,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args))])]),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_name)),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | StringExp(">s")),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_bool,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(gt_str,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(args))])]),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(fun_name)),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("+s")),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_str,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(append_str,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args))])]),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_name)),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | StringExp("s->i")),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_int,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(str_to_int,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(args))])]),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(fun_name)),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("i->s")),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_str,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(int_to_str,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args))])]),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_name)),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | StringExp("substring")),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_str,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(substring_,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(args))])]),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(fun_name)),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("print")),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_sexps,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(print_,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args))])]),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_name)),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | StringExp("newline")),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_sexps,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(newline,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(args))])]),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(fun_name)),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("read-char")),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_str,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(read_char_,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args))])]),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_name)),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | StringExp("read-line")),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_str,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(read_line_,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(args))])]),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(fun_name)),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("ord")),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_int,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(ord_,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args))])]),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_name)),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | StringExp("chr")),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_str,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(chr_,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(args))])]),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(fun_name)),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("list")),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_sexps,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(list,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args))])]),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_name)),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | StringExp("cons")),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_sexps,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(cons,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(args))])]),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(fun_name)),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("car")),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(car,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(args))]),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_name)),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | StringExp("cdr")),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_sexps,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(cdr,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(args))])]),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(fun_name)),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("int?")),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_bool,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(intp,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args))])]),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_name)),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | StringExp("string?")),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_bool,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(stringp,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(args))])]),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(fun_name)),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("list?")),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_bool,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(listp,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args))])]),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_name)),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | StringExp("nil?")),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_bool,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(nilp,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(args))])]),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(fun_name)),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("fun?")),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_bool,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(funp,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args))])]),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_name)),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | StringExp("exit")),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_sexps,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(exit_,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(args))])]),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(fun_name)),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("help")),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_sexps,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(help,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args))])]),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | SeqExp[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | StringExp("Interpreter error: Unknown internal function '")]),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_name))]),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | StringExp("' --- Perhaps it has not been implemented yet.\n")]),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   NilExp])))))))))))))))))))))))))))))))))))))))))))))))]))],
  VarDec(prompt,true,NONE,
  | StringExp(">>> "))],
  SeqExp[
  | IfExp(
  |   VarExp(
  |   | SimpleVar(use_dummy)),
  |   SeqExp[
  |   | CallExp(print,[
  |   |   StringExp("The dummy input is:\n")]),
  |   | CallExp(print,[
  |   |   VarExp(
  |   |   | SimpleVar(dummy_input))]),
  |   | CallExp(print,[
  |   |   StringExp("\n")])]),
  | CallExp(print,[
  |   StringExp("Let's spin the REPL... use (exit) if you get too dizzy\n")]),
  | CallExp(print,[
  |   VarExp(
  |   | SimpleVar(prompt))]),
  | CallExp(init_repl,[]),
  | WhileExp(
  |   IntExp(1),
  |   SeqExp[
  |   | LetExp([
  |   |   VarDec(tokens,true,NONE,
  |   |   | CallExp(read_sexp_to_tokens,[])),
  |   |   VarDec(sexp,true,NONE,
  |   |   | CallExp(parse_tokens,[
  |   |   |   VarExp(
  |   |   |   | FieldVar(
  |   |   |   |   SimpleVar(tokens),
  |   |   |   |   leftmost)),
  |   |   |   VarExp(
  |   |   |   | FieldVar(
  |   |   |   |   SimpleVar(tokens),
  |   |   |   |   rightmost))])),
  |   |   VarDec(result,true,NONE,
  |   |   | CallExp(eval,[
  |   |   |   VarExp(
  |   |   |   | SimpleVar(sexp)),
  |   |   |   VarExp(
  |   |   |   | SimpleVar(initial_env))]))],
  |   |   SeqExp[
  |   |   | CallExp(print,[
  |   |   |   CallExp(sexp2s,[
  |   |   |   | VarExp(
  |   |   |   |   SimpleVar(result))])]),
  |   |   | CallExp(print,[
  |   |   |   StringExp("\n")]),
  |   |   | CallExp(print,[
  |   |   |   VarExp(
  |   |   |   | SimpleVar(prompt))])])]),
  | IntExp(0)])
