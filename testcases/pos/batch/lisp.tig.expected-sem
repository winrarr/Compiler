(INT,
  LetExp([
  | VarDec(dummy_input,true,STRING,
  |   (STRING,
  |   | StringExp("(letrec ((collatz (lambda (v) (progn (print v) (ifb (= v 1) (progn (newline) 1) (progn (print \" -> \") (ifb (= v (* (/ v 2) 2)) (collatz (/ v 2)) (collatz (+ (* v 3) 1))))))))) (collatz 117))\n (progn (print \"bye bye\") (newline))\n (progn (print \"exiting...\") (newline) (exit))"))),
  | VarDec(dummy_input_idx,true,INT,
  |   (INT,
  |   | IntExp(0))),
  | VarDec(dummy_input_size,true,INT,
  |   (INT,
  |   | CallExp(size,[
  |   |   (STRING,
  |   |   | VarExp(
  |   |   |   (STRING,
  |   |   |   | SimpleVar(dummy_input))))]))),
  | VarDec(use_dummy,true,INT,
  |   (INT,
  |   | IntExp(1))),
  | VarDec(lib_input,true,STRING,
  |   (STRING,
  |   | StringExp("(progn "))),
  | VarDec(lib_input,true,STRING,
  |   (STRING,
  |   | CallExp(concat,[
  |   |   (STRING,
  |   |   | VarExp(
  |   |   |   (STRING,
  |   |   |   | SimpleVar(lib_input)))),
  |   |   (STRING,
  |   |   | StringExp("(define cadr (lambda (v) (car (cdr v))))"))]))),
  | VarDec(lib_input,true,STRING,
  |   (STRING,
  |   | CallExp(concat,[
  |   |   (STRING,
  |   |   | VarExp(
  |   |   |   (STRING,
  |   |   |   | SimpleVar(lib_input)))),
  |   |   (STRING,
  |   |   | StringExp("(define append (lambda (a b)                 (letrec ((aux (lambda (firsts)                                 (ifb (nil? firsts)                                      b                                      (cons (car firsts) (aux (cdr firsts)))))))                   (ifb (andb (list? a) (list? b))                        (aux a)                        (progn (print \"Invalid argument to append '\" a \"' and '\" b \"'\n\")                               nil)))))"))]))),
  | VarDec(lib_input,true,STRING,
  |   (STRING,
  |   | CallExp(concat,[
  |   |   (STRING,
  |   |   | VarExp(
  |   |   |   (STRING,
  |   |   |   | SimpleVar(lib_input)))),
  |   |   (STRING,
  |   |   | StringExp("(define nth (letrec ((nth (lambda (n ls) (ifb (= n 0) (car ls) (nth (- n 1) (cdr ls)))))) nth))"))]))),
  | VarDec(lib_input,true,STRING,
  |   (STRING,
  |   | CallExp(concat,[
  |   |   (STRING,
  |   |   | VarExp(
  |   |   |   (STRING,
  |   |   |   | SimpleVar(lib_input)))),
  |   |   (STRING,
  |   |   | StringExp("(print \"Standard library loaded\n\"))\n"))]))),
  | VarDec(lib_input_idx,true,INT,
  |   (INT,
  |   | IntExp(0))),
  | VarDec(lib_input_size,true,INT,
  |   (INT,
  |   | CallExp(size,[
  |   |   (STRING,
  |   |   | VarExp(
  |   |   |   (STRING,
  |   |   |   | SimpleVar(lib_input))))]))),
  | VarDec(is_reading_lib,true,INT,
  |   (INT,
  |   | IntExp(1))),
  | FunctionDec[
  |   (read_char,[],
  |   | STRING,
  |   | (STRING,
  |   |   IfExp(
  |   |   | (INT,
  |   |   |   VarExp(
  |   |   |   | (INT,
  |   |   |   |   SimpleVar(is_reading_lib)))),
  |   |   | (STRING,
  |   |   |   IfExp(
  |   |   |   | (INT,
  |   |   |   |   OpExp(EqOp,
  |   |   |   |   | (INT,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   SimpleVar(lib_input_idx)))),
  |   |   |   |   | (INT,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   SimpleVar(lib_input_size)))))),
  |   |   |   | (STRING,
  |   |   |   |   SeqExp[
  |   |   |   |   | (VOID,
  |   |   |   |   |   AssignExp(
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   SimpleVar(is_reading_lib)),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IntExp(0)))),
  |   |   |   |   | (STRING,
  |   |   |   |   |   CallExp(read_char,[]))]),
  |   |   |   | (STRING,
  |   |   |   |   LetExp([
  |   |   |   |   | VarDec(res,true,STRING,
  |   |   |   |   |   (STRING,
  |   |   |   |   |   | CallExp(substring,[
  |   |   |   |   |   |   (STRING,
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   (STRING,
  |   |   |   |   |   |   |   | SimpleVar(lib_input)))),
  |   |   |   |   |   |   (INT,
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   (INT,
  |   |   |   |   |   |   |   | SimpleVar(lib_input_idx)))),
  |   |   |   |   |   |   (INT,
  |   |   |   |   |   |   | IntExp(1))])))],
  |   |   |   |   | (STRING,
  |   |   |   |   |   SeqExp[
  |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   AssignExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   SimpleVar(lib_input_idx)),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(PlusOp,
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   SimpleVar(lib_input_idx)))),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   IntExp(1)))))),
  |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   SimpleVar(res))))]))))),
  |   |   | (STRING,
  |   |   |   IfExp(
  |   |   |   | (INT,
  |   |   |   |   VarExp(
  |   |   |   |   | (INT,
  |   |   |   |   |   SimpleVar(use_dummy)))),
  |   |   |   | (STRING,
  |   |   |   |   IfExp(
  |   |   |   |   | (INT,
  |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   SimpleVar(dummy_input_idx)))),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   SimpleVar(dummy_input_size)))))),
  |   |   |   |   | (STRING,
  |   |   |   |   |   StringExp("")),
  |   |   |   |   | (STRING,
  |   |   |   |   |   LetExp([
  |   |   |   |   |   | VarDec(res,true,STRING,
  |   |   |   |   |   |   (STRING,
  |   |   |   |   |   |   | CallExp(substring,[
  |   |   |   |   |   |   |   (STRING,
  |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   (STRING,
  |   |   |   |   |   |   |   |   | SimpleVar(dummy_input)))),
  |   |   |   |   |   |   |   (INT,
  |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   (INT,
  |   |   |   |   |   |   |   |   | SimpleVar(dummy_input_idx)))),
  |   |   |   |   |   |   |   (INT,
  |   |   |   |   |   |   |   | IntExp(1))])))],
  |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   AssignExp(
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   SimpleVar(dummy_input_idx)),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   OpExp(PlusOp,
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   SimpleVar(dummy_input_idx)))),
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   IntExp(1)))))),
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   SimpleVar(res))))]))))),
  |   |   |   | (STRING,
  |   |   |   |   CallExp(getchar,[]))))))),
  |   (i2s,[
  |   | (i,true)],
  |   | STRING,
  |   | (STRING,
  |   |   IfExp(
  |   |   | (INT,
  |   |   |   OpExp(EqOp,
  |   |   |   | (INT,
  |   |   |   |   VarExp(
  |   |   |   |   | (INT,
  |   |   |   |   |   SimpleVar(i)))),
  |   |   |   | (INT,
  |   |   |   |   IntExp(0)))),
  |   |   | (STRING,
  |   |   |   StringExp("0")),
  |   |   | (STRING,
  |   |   |   IfExp(
  |   |   |   | (INT,
  |   |   |   |   OpExp(LtOp,
  |   |   |   |   | (INT,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   SimpleVar(i)))),
  |   |   |   |   | (INT,
  |   |   |   |   |   IntExp(0)))),
  |   |   |   | (STRING,
  |   |   |   |   CallExp(concat,[
  |   |   |   |   | (STRING,
  |   |   |   |   |   StringExp("-")),
  |   |   |   |   | (STRING,
  |   |   |   |   |   CallExp(i2s,[
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   OpExp(MinusOp,
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   IntExp(0)),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   SimpleVar(i))))))]))])),
  |   |   |   | (STRING,
  |   |   |   |   IfExp(
  |   |   |   |   | (INT,
  |   |   |   |   |   OpExp(LtOp,
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   SimpleVar(i)))),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IntExp(10)))),
  |   |   |   |   | (STRING,
  |   |   |   |   |   CallExp(chr,[
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   OpExp(PlusOp,
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   CallExp(ord,[
  |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   StringExp("0"))])),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   SimpleVar(i))))))])),
  |   |   |   |   | (STRING,
  |   |   |   |   |   CallExp(concat,[
  |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   CallExp(i2s,[
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(DivideOp,
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   SimpleVar(i)))),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   IntExp(10))))])),
  |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   CallExp(chr,[
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(MinusOp,
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   OpExp(PlusOp,
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   CallExp(ord,[
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   StringExp("0"))])),
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   SimpleVar(i)))))),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   OpExp(TimesOp,
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   OpExp(DivideOp,
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(i)))),
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   IntExp(10)))),
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   IntExp(10))))))]))]))))))))),
  |   (c2i,[
  |   | (char,true)],
  |   | INT,
  |   | (INT,
  |   |   OpExp(MinusOp,
  |   |   | (INT,
  |   |   |   CallExp(ord,[
  |   |   |   | (STRING,
  |   |   |   |   VarExp(
  |   |   |   |   | (STRING,
  |   |   |   |   |   SimpleVar(char))))])),
  |   |   | (INT,
  |   |   |   CallExp(ord,[
  |   |   |   | (STRING,
  |   |   |   |   StringExp("0"))]))))),
  |   (s2i,[
  |   | (s,true)],
  |   | INT,
  |   | (INT,
  |   |   IfExp(
  |   |   | (INT,
  |   |   |   OpExp(EqOp,
  |   |   |   | (STRING,
  |   |   |   |   VarExp(
  |   |   |   |   | (STRING,
  |   |   |   |   |   SimpleVar(s)))),
  |   |   |   | (STRING,
  |   |   |   |   StringExp("")))),
  |   |   | (INT,
  |   |   |   SeqExp[
  |   |   |   | (VOID,
  |   |   |   |   CallExp(print,[
  |   |   |   |   | (STRING,
  |   |   |   |   |   StringExp("Error in s2i. Cannot extract int from '"))])),
  |   |   |   | (VOID,
  |   |   |   |   CallExp(print,[
  |   |   |   |   | (STRING,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   SimpleVar(s))))])),
  |   |   |   | (VOID,
  |   |   |   |   CallExp(print,[
  |   |   |   |   | (STRING,
  |   |   |   |   |   StringExp("'\n"))])),
  |   |   |   | (INT,
  |   |   |   |   IntExp(0))]),
  |   |   | (INT,
  |   |   |   LetExp([
  |   |   |   | VarDec(len,true,INT,
  |   |   |   |   (INT,
  |   |   |   |   | CallExp(size,[
  |   |   |   |   |   (STRING,
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   (STRING,
  |   |   |   |   |   |   | SimpleVar(s))))]))),
  |   |   |   | VarDec(s_proper,true,STRING,
  |   |   |   |   (STRING,
  |   |   |   |   | VarExp(
  |   |   |   |   |   (STRING,
  |   |   |   |   |   | SimpleVar(s))))),
  |   |   |   | VarDec(sign,true,INT,
  |   |   |   |   (INT,
  |   |   |   |   | IfExp(
  |   |   |   |   |   (INT,
  |   |   |   |   |   | OpExp(EqOp,
  |   |   |   |   |   |   (STRING,
  |   |   |   |   |   |   | CallExp(substring,[
  |   |   |   |   |   |   |   (STRING,
  |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   (STRING,
  |   |   |   |   |   |   |   |   | SimpleVar(s)))),
  |   |   |   |   |   |   |   (INT,
  |   |   |   |   |   |   |   | IntExp(0)),
  |   |   |   |   |   |   |   (INT,
  |   |   |   |   |   |   |   | IntExp(1))])),
  |   |   |   |   |   |   (STRING,
  |   |   |   |   |   |   | StringExp("-")))),
  |   |   |   |   |   (INT,
  |   |   |   |   |   | SeqExp[
  |   |   |   |   |   |   (VOID,
  |   |   |   |   |   |   | AssignExp(
  |   |   |   |   |   |   |   (STRING,
  |   |   |   |   |   |   |   | SimpleVar(s_proper)),
  |   |   |   |   |   |   |   (STRING,
  |   |   |   |   |   |   |   | CallExp(substring,[
  |   |   |   |   |   |   |   |   (STRING,
  |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   (STRING,
  |   |   |   |   |   |   |   |   |   | SimpleVar(s)))),
  |   |   |   |   |   |   |   |   (INT,
  |   |   |   |   |   |   |   |   | IntExp(1)),
  |   |   |   |   |   |   |   |   (INT,
  |   |   |   |   |   |   |   |   | OpExp(MinusOp,
  |   |   |   |   |   |   |   |   |   (INT,
  |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   (INT,
  |   |   |   |   |   |   |   |   |   |   | SimpleVar(len)))),
  |   |   |   |   |   |   |   |   |   (INT,
  |   |   |   |   |   |   |   |   |   | IntExp(1))))])))),
  |   |   |   |   |   |   (INT,
  |   |   |   |   |   |   | OpExp(MinusOp,
  |   |   |   |   |   |   |   (INT,
  |   |   |   |   |   |   |   | IntExp(0)),
  |   |   |   |   |   |   |   (INT,
  |   |   |   |   |   |   |   | IntExp(1))))]),
  |   |   |   |   |   (INT,
  |   |   |   |   |   | IfExp(
  |   |   |   |   |   |   (INT,
  |   |   |   |   |   |   | OpExp(EqOp,
  |   |   |   |   |   |   |   (STRING,
  |   |   |   |   |   |   |   | CallExp(substring,[
  |   |   |   |   |   |   |   |   (STRING,
  |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   (STRING,
  |   |   |   |   |   |   |   |   |   | SimpleVar(s)))),
  |   |   |   |   |   |   |   |   (INT,
  |   |   |   |   |   |   |   |   | IntExp(0)),
  |   |   |   |   |   |   |   |   (INT,
  |   |   |   |   |   |   |   |   | IntExp(1))])),
  |   |   |   |   |   |   |   (STRING,
  |   |   |   |   |   |   |   | StringExp("+")))),
  |   |   |   |   |   |   (INT,
  |   |   |   |   |   |   | SeqExp[
  |   |   |   |   |   |   |   (VOID,
  |   |   |   |   |   |   |   | AssignExp(
  |   |   |   |   |   |   |   |   (STRING,
  |   |   |   |   |   |   |   |   | SimpleVar(s_proper)),
  |   |   |   |   |   |   |   |   (STRING,
  |   |   |   |   |   |   |   |   | CallExp(substring,[
  |   |   |   |   |   |   |   |   |   (STRING,
  |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   (STRING,
  |   |   |   |   |   |   |   |   |   |   | SimpleVar(s)))),
  |   |   |   |   |   |   |   |   |   (INT,
  |   |   |   |   |   |   |   |   |   | IntExp(1)),
  |   |   |   |   |   |   |   |   |   (INT,
  |   |   |   |   |   |   |   |   |   | OpExp(MinusOp,
  |   |   |   |   |   |   |   |   |   |   (INT,
  |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   (INT,
  |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(len)))),
  |   |   |   |   |   |   |   |   |   |   (INT,
  |   |   |   |   |   |   |   |   |   |   | IntExp(1))))])))),
  |   |   |   |   |   |   |   (INT,
  |   |   |   |   |   |   |   | IntExp(1))]),
  |   |   |   |   |   |   (INT,
  |   |   |   |   |   |   | IntExp(1))))))),
  |   |   |   | VarDec(len_proper,true,INT,
  |   |   |   |   (INT,
  |   |   |   |   | CallExp(size,[
  |   |   |   |   |   (STRING,
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   (STRING,
  |   |   |   |   |   |   | SimpleVar(s_proper))))]))),
  |   |   |   | VarDec(res,true,INT,
  |   |   |   |   (INT,
  |   |   |   |   | IntExp(0)))],
  |   |   |   | (INT,
  |   |   |   |   SeqExp[
  |   |   |   |   | (VOID,
  |   |   |   |   |   ForExp(idx,true,
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IntExp(0)),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   OpExp(MinusOp,
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   SimpleVar(len_proper)))),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   IntExp(1)))),
  |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   LetExp([
  |   |   |   |   |   |   | VarDec(curr_digit,true,INT,
  |   |   |   |   |   |   |   (INT,
  |   |   |   |   |   |   |   | CallExp(c2i,[
  |   |   |   |   |   |   |   |   (STRING,
  |   |   |   |   |   |   |   |   | CallExp(substring,[
  |   |   |   |   |   |   |   |   |   (STRING,
  |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   (STRING,
  |   |   |   |   |   |   |   |   |   |   | SimpleVar(s_proper)))),
  |   |   |   |   |   |   |   |   |   (INT,
  |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   (INT,
  |   |   |   |   |   |   |   |   |   |   | SimpleVar(idx)))),
  |   |   |   |   |   |   |   |   |   (INT,
  |   |   |   |   |   |   |   |   |   | IntExp(1))]))])))],
  |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   OpExp(LeOp,
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   IntExp(0)),
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_digit)))))),
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   OpExp(LeOp,
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_digit)))),
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   IntExp(9)))),
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   IntExp(0)))),
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   AssignExp(
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   SimpleVar(res)),
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   OpExp(PlusOp,
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   OpExp(TimesOp,
  |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   IntExp(10)),
  |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(res)))))),
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_digit)))))))),
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   StringExp("Error in s2i. Illegal character in string: '"))])),
  |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(s))))])),
  |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   StringExp("'\n"))]))]))))))),
  |   |   |   |   | (INT,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   SimpleVar(res))))])))))),
  |   (wrap_string,[
  |   | (s,true)],
  |   | STRING,
  |   | (STRING,
  |   |   CallExp(concat,[
  |   |   | (STRING,
  |   |   |   StringExp("\"")),
  |   |   | (STRING,
  |   |   |   CallExp(concat,[
  |   |   |   | (STRING,
  |   |   |   |   VarExp(
  |   |   |   |   | (STRING,
  |   |   |   |   |   SimpleVar(s)))),
  |   |   |   | (STRING,
  |   |   |   |   StringExp("\""))]))]))),
  |   (bool2s,[
  |   | (b,true)],
  |   | STRING,
  |   | (STRING,
  |   |   IfExp(
  |   |   | (INT,
  |   |   |   VarExp(
  |   |   |   | (INT,
  |   |   |   |   SimpleVar(b)))),
  |   |   | (STRING,
  |   |   |   StringExp("#t")),
  |   |   | (STRING,
  |   |   |   StringExp("#f")))))],
  | TypeDec[
  |   (token,
  |   | NAME token = RECORD {i: INT, s: STRING, typ: STRING})],
  | FunctionDec[
  |   (mk_int_token,[
  |   | (v,true)],
  |   | NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   RecordExp([
  |   |   | (i,
  |   |   |   (INT,
  |   |   |   | VarExp(
  |   |   |   |   (INT,
  |   |   |   |   | SimpleVar(v))))),
  |   |   | (s,
  |   |   |   (STRING,
  |   |   |   | StringExp(""))),
  |   |   | (typ,
  |   |   |   (STRING,
  |   |   |   | StringExp("int")))]))),
  |   (mk_id_token,[
  |   | (id,true)],
  |   | NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   RecordExp([
  |   |   | (i,
  |   |   |   (INT,
  |   |   |   | IntExp(0))),
  |   |   | (s,
  |   |   |   (STRING,
  |   |   |   | VarExp(
  |   |   |   |   (STRING,
  |   |   |   |   | SimpleVar(id))))),
  |   |   | (typ,
  |   |   |   (STRING,
  |   |   |   | StringExp("id")))]))),
  |   (mk_str_token,[
  |   | (str,true)],
  |   | NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   RecordExp([
  |   |   | (i,
  |   |   |   (INT,
  |   |   |   | IntExp(0))),
  |   |   | (s,
  |   |   |   (STRING,
  |   |   |   | VarExp(
  |   |   |   |   (STRING,
  |   |   |   |   | SimpleVar(str))))),
  |   |   | (typ,
  |   |   |   (STRING,
  |   |   |   | StringExp("str")))]))),
  |   (mk_bool_token,[
  |   | (b,true)],
  |   | NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   RecordExp([
  |   |   | (i,
  |   |   |   (INT,
  |   |   |   | VarExp(
  |   |   |   |   (INT,
  |   |   |   |   | SimpleVar(b))))),
  |   |   | (s,
  |   |   |   (STRING,
  |   |   |   | StringExp(""))),
  |   |   | (typ,
  |   |   |   (STRING,
  |   |   |   | StringExp("bool")))]))),
  |   (int_token_p,[
  |   | (t,true)],
  |   | INT,
  |   | (INT,
  |   |   OpExp(EqOp,
  |   |   | (STRING,
  |   |   |   VarExp(
  |   |   |   | (STRING,
  |   |   |   |   FieldVar(
  |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   SimpleVar(t)),
  |   |   |   |   | typ)))),
  |   |   | (STRING,
  |   |   |   StringExp("int"))))),
  |   (str_token_p,[
  |   | (t,true)],
  |   | INT,
  |   | (INT,
  |   |   OpExp(EqOp,
  |   |   | (STRING,
  |   |   |   VarExp(
  |   |   |   | (STRING,
  |   |   |   |   FieldVar(
  |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   SimpleVar(t)),
  |   |   |   |   | typ)))),
  |   |   | (STRING,
  |   |   |   StringExp("str"))))),
  |   (id_token_p,[
  |   | (t,true)],
  |   | INT,
  |   | (INT,
  |   |   OpExp(EqOp,
  |   |   | (STRING,
  |   |   |   VarExp(
  |   |   |   | (STRING,
  |   |   |   |   FieldVar(
  |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   SimpleVar(t)),
  |   |   |   |   | typ)))),
  |   |   | (STRING,
  |   |   |   StringExp("id"))))),
  |   (bool_token_p,[
  |   | (t,true)],
  |   | INT,
  |   | (INT,
  |   |   OpExp(EqOp,
  |   |   | (STRING,
  |   |   |   VarExp(
  |   |   |   | (STRING,
  |   |   |   |   FieldVar(
  |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   SimpleVar(t)),
  |   |   |   |   | typ)))),
  |   |   | (STRING,
  |   |   |   StringExp("bool"))))),
  |   (get_int_token,[
  |   | (t,true)],
  |   | INT,
  |   | (INT,
  |   |   VarExp(
  |   |   | (INT,
  |   |   |   FieldVar(
  |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   SimpleVar(t)),
  |   |   |   | i))))),
  |   (get_id_token,[
  |   | (t,true)],
  |   | STRING,
  |   | (STRING,
  |   |   VarExp(
  |   |   | (STRING,
  |   |   |   FieldVar(
  |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   SimpleVar(t)),
  |   |   |   | s))))),
  |   (get_str_token,[
  |   | (t,true)],
  |   | STRING,
  |   | (STRING,
  |   |   VarExp(
  |   |   | (STRING,
  |   |   |   FieldVar(
  |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   SimpleVar(t)),
  |   |   |   | s))))),
  |   (get_bool_token,[
  |   | (t,true)],
  |   | INT,
  |   | (INT,
  |   |   VarExp(
  |   |   | (INT,
  |   |   |   FieldVar(
  |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   SimpleVar(t)),
  |   |   |   | i)))))],
  | VarDec(LPAREN,true,NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   | RecordExp([
  |   |   (i,
  |   |   | (INT,
  |   |   |   IntExp(0))),
  |   |   (s,
  |   |   | (STRING,
  |   |   |   StringExp(""))),
  |   |   (typ,
  |   |   | (STRING,
  |   |   |   StringExp("syntax")))]))),
  | VarDec(RPAREN,true,NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   | RecordExp([
  |   |   (i,
  |   |   | (INT,
  |   |   |   IntExp(0))),
  |   |   (s,
  |   |   | (STRING,
  |   |   |   StringExp(""))),
  |   |   (typ,
  |   |   | (STRING,
  |   |   |   StringExp("syntax")))]))),
  | FunctionDec[
  |   (token2s,[
  |   | (t,true)],
  |   | STRING,
  |   | (STRING,
  |   |   IfExp(
  |   |   | (INT,
  |   |   |   OpExp(EqOp,
  |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   VarExp(
  |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   SimpleVar(t)))),
  |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   VarExp(
  |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   SimpleVar(LPAREN)))))),
  |   |   | (STRING,
  |   |   |   StringExp("(")),
  |   |   | (STRING,
  |   |   |   IfExp(
  |   |   |   | (INT,
  |   |   |   |   OpExp(EqOp,
  |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   |   SimpleVar(t)))),
  |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   |   SimpleVar(RPAREN)))))),
  |   |   |   | (STRING,
  |   |   |   |   StringExp(")")),
  |   |   |   | (STRING,
  |   |   |   |   IfExp(
  |   |   |   |   | (INT,
  |   |   |   |   |   CallExp(int_token_p,[
  |   |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   |   |   SimpleVar(t))))])),
  |   |   |   |   | (STRING,
  |   |   |   |   |   CallExp(i2s,[
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   CallExp(get_int_token,[
  |   |   |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   |   |   |   SimpleVar(t))))]))])),
  |   |   |   |   | (STRING,
  |   |   |   |   |   IfExp(
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   CallExp(id_token_p,[
  |   |   |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   |   |   |   SimpleVar(t))))])),
  |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   CallExp(get_id_token,[
  |   |   |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   |   |   |   SimpleVar(t))))])),
  |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   CallExp(str_token_p,[
  |   |   |   |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   |   |   |   |   SimpleVar(t))))])),
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   CallExp(wrap_string,[
  |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   CallExp(get_str_token,[
  |   |   |   |   |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(t))))]))])),
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   CallExp(bool_token_p,[
  |   |   |   |   |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(t))))])),
  |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   CallExp(bool2s,[
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   CallExp(get_bool_token,[
  |   |   |   |   |   |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(t))))]))])),
  |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   StringExp("Unknown token in token2s. It has type '"))])),
  |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(t)),
  |   |   |   |   |   |   |   |   |   |   |   | typ))))])),
  |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   StringExp("'.\n"))])),
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   StringExp(""))]))))))))))))))],
  | TypeDec[
  |   (Int,
  |   | NAME Int = RECORD {v: INT}),
  |   (String,
  |   | NAME String = RECORD {v: STRING})],
  | VarDec(whitespace,true,STRING,
  |   (STRING,
  |   | StringExp(" \n\t"))),
  | VarDec(digit,true,STRING,
  |   (STRING,
  |   | StringExp("0123456789"))),
  | VarDec(syntax_char,true,STRING,
  |   (STRING,
  |   | StringExp("()"))),
  | VarDec(uminus_char,true,STRING,
  |   (STRING,
  |   | StringExp("-"))),
  | VarDec(string_indicator,true,STRING,
  |   (STRING,
  |   | StringExp("\""))),
  | VarDec(string_escape_indicator,true,STRING,
  |   (STRING,
  |   | StringExp("\\"))),
  | VarDec(bool_indicator,true,STRING,
  |   (STRING,
  |   | StringExp("#"))),
  | VarDec(bool_char,true,STRING,
  |   (STRING,
  |   | StringExp("tf"))),
  | VarDec(id_char,true,STRING,
  |   (STRING,
  |   | CallExp(concat,[
  |   |   (STRING,
  |   |   | VarExp(
  |   |   |   (STRING,
  |   |   |   | SimpleVar(digit)))),
  |   |   (STRING,
  |   |   | StringExp("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz+-*/^_=<>%$@&|~!?"))]))),
  | FunctionDec[
  |   (contains,[
  |   | (char_class,true),
  |   | (char,true)],
  |   | INT,
  |   | (INT,
  |   |   LetExp([
  |   |   | VarDec(res,true,INT,
  |   |   |   (INT,
  |   |   |   | IntExp(0)))],
  |   |   | (INT,
  |   |   |   SeqExp[
  |   |   |   | (VOID,
  |   |   |   |   ForExp(idx,true,
  |   |   |   |   | (INT,
  |   |   |   |   |   IntExp(0)),
  |   |   |   |   | (INT,
  |   |   |   |   |   OpExp(MinusOp,
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   CallExp(size,[
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   SimpleVar(char_class))))])),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IntExp(1)))),
  |   |   |   |   | (VOID,
  |   |   |   |   |   IfExp(
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   SimpleVar(char)))),
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   CallExp(substring,[
  |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   SimpleVar(char_class)))),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   SimpleVar(idx)))),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   IntExp(1))])))),
  |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   AssignExp(
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   SimpleVar(res)),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   IntExp(1)))),
  |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   BreakExp)]))))),
  |   |   |   | (INT,
  |   |   |   |   VarExp(
  |   |   |   |   | (INT,
  |   |   |   |   |   SimpleVar(res))))]))))],
  | VarDec(prev_char_,true,STRING,
  |   (STRING,
  |   | StringExp(""))),
  | VarDec(curr_char_,true,STRING,
  |   (STRING,
  |   | StringExp(""))),
  | VarDec(next_char_,true,STRING,
  |   (STRING,
  |   | StringExp(""))),
  | FunctionDec[
  |   (prev_char,[],
  |   | STRING,
  |   | (STRING,
  |   |   VarExp(
  |   |   | (STRING,
  |   |   |   SimpleVar(prev_char_))))),
  |   (curr_char,[],
  |   | STRING,
  |   | (STRING,
  |   |   VarExp(
  |   |   | (STRING,
  |   |   |   SimpleVar(curr_char_))))),
  |   (next_char,[],
  |   | STRING,
  |   | (STRING,
  |   |   IfExp(
  |   |   | (INT,
  |   |   |   OpExp(NeqOp,
  |   |   |   | (STRING,
  |   |   |   |   VarExp(
  |   |   |   |   | (STRING,
  |   |   |   |   |   SimpleVar(next_char_)))),
  |   |   |   | (STRING,
  |   |   |   |   StringExp("")))),
  |   |   | (STRING,
  |   |   |   VarExp(
  |   |   |   | (STRING,
  |   |   |   |   SimpleVar(next_char_)))),
  |   |   | (STRING,
  |   |   |   IfExp(
  |   |   |   | (INT,
  |   |   |   |   OpExp(EqOp,
  |   |   |   |   | (STRING,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   SimpleVar(curr_char_)))),
  |   |   |   |   | (STRING,
  |   |   |   |   |   StringExp("")))),
  |   |   |   | (STRING,
  |   |   |   |   StringExp("")),
  |   |   |   | (STRING,
  |   |   |   |   SeqExp[
  |   |   |   |   | (VOID,
  |   |   |   |   |   AssignExp(
  |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   SimpleVar(next_char_)),
  |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   CallExp(read_char,[])))),
  |   |   |   |   | (STRING,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   SimpleVar(next_char_))))])))))),
  |   (advance_reader,[],
  |   | VOID,
  |   | (VOID,
  |   |   SeqExp[
  |   |   | (VOID,
  |   |   |   AssignExp(
  |   |   |   | (STRING,
  |   |   |   |   SimpleVar(prev_char_)),
  |   |   |   | (STRING,
  |   |   |   |   VarExp(
  |   |   |   |   | (STRING,
  |   |   |   |   |   SimpleVar(curr_char_)))))),
  |   |   | (VOID,
  |   |   |   IfExp(
  |   |   |   | (INT,
  |   |   |   |   OpExp(NeqOp,
  |   |   |   |   | (STRING,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   SimpleVar(next_char_)))),
  |   |   |   |   | (STRING,
  |   |   |   |   |   StringExp("")))),
  |   |   |   | (VOID,
  |   |   |   |   AssignExp(
  |   |   |   |   | (STRING,
  |   |   |   |   |   SimpleVar(curr_char_)),
  |   |   |   |   | (STRING,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   SimpleVar(next_char_)))))),
  |   |   |   | (VOID,
  |   |   |   |   AssignExp(
  |   |   |   |   | (STRING,
  |   |   |   |   |   SimpleVar(curr_char_)),
  |   |   |   |   | (STRING,
  |   |   |   |   |   CallExp(read_char,[])))))),
  |   |   | (VOID,
  |   |   |   AssignExp(
  |   |   |   | (STRING,
  |   |   |   |   SimpleVar(next_char_)),
  |   |   |   | (STRING,
  |   |   |   |   StringExp(""))))])),
  |   (init_repl,[],
  |   | VOID,
  |   | (VOID,
  |   |   CallExp(advance_reader,[]))),
  |   (looking_at,[
  |   | (char_class,true)],
  |   | INT,
  |   | (INT,
  |   |   CallExp(contains,[
  |   |   | (STRING,
  |   |   |   VarExp(
  |   |   |   | (STRING,
  |   |   |   |   SimpleVar(char_class)))),
  |   |   | (STRING,
  |   |   |   CallExp(curr_char,[]))]))),
  |   (looking_at_char_followed_by,[
  |   | (char,true),
  |   | (char_class,true)],
  |   | INT,
  |   | (INT,
  |   |   IfExp(
  |   |   | (INT,
  |   |   |   OpExp(EqOp,
  |   |   |   | (STRING,
  |   |   |   |   CallExp(curr_char,[])),
  |   |   |   | (STRING,
  |   |   |   |   VarExp(
  |   |   |   |   | (STRING,
  |   |   |   |   |   SimpleVar(char)))))),
  |   |   | (INT,
  |   |   |   CallExp(contains,[
  |   |   |   | (STRING,
  |   |   |   |   VarExp(
  |   |   |   |   | (STRING,
  |   |   |   |   |   SimpleVar(char_class)))),
  |   |   |   | (STRING,
  |   |   |   |   CallExp(next_char,[]))])),
  |   |   | (INT,
  |   |   |   IntExp(0))))),
  |   (eof_p,[],
  |   | INT,
  |   | (INT,
  |   |   IfExp(
  |   |   | (INT,
  |   |   |   OpExp(EqOp,
  |   |   |   | (STRING,
  |   |   |   |   CallExp(curr_char,[])),
  |   |   |   | (STRING,
  |   |   |   |   StringExp("")))),
  |   |   | (INT,
  |   |   |   OpExp(EqOp,
  |   |   |   | (STRING,
  |   |   |   |   CallExp(next_char,[])),
  |   |   |   | (STRING,
  |   |   |   |   StringExp("")))),
  |   |   | (INT,
  |   |   |   IntExp(0))))),
  |   (parse_int_token,[
  |   | (sign,true)],
  |   | NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   LetExp([
  |   |   | VarDec(res,true,INT,
  |   |   |   (INT,
  |   |   |   | IntExp(0)))],
  |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   SeqExp[
  |   |   |   | (VOID,
  |   |   |   |   WhileExp(
  |   |   |   |   | (INT,
  |   |   |   |   |   CallExp(looking_at,[
  |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   SimpleVar(digit))))])),
  |   |   |   |   | (VOID,
  |   |   |   |   |   SeqExp[
  |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   AssignExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   SimpleVar(res)),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(PlusOp,
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   OpExp(TimesOp,
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   IntExp(10)),
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   SimpleVar(res)))))),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   CallExp(c2i,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   CallExp(curr_char,[]))])))))),
  |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   CallExp(advance_reader,[]))]))),
  |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   CallExp(mk_int_token,[
  |   |   |   |   | (INT,
  |   |   |   |   |   OpExp(TimesOp,
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   SimpleVar(sign)))),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   SimpleVar(res))))))]))])))),
  |   (parse_syntax_token,[],
  |   | NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   SeqExp[
  |   |   | (VOID,
  |   |   |   CallExp(advance_reader,[])),
  |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   IfExp(
  |   |   |   | (INT,
  |   |   |   |   OpExp(EqOp,
  |   |   |   |   | (STRING,
  |   |   |   |   |   CallExp(prev_char,[])),
  |   |   |   |   | (STRING,
  |   |   |   |   |   StringExp("(")))),
  |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   VarExp(
  |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   SimpleVar(LPAREN)))),
  |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   IfExp(
  |   |   |   |   | (INT,
  |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   CallExp(prev_char,[])),
  |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   StringExp(")")))),
  |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   |   SimpleVar(RPAREN)))),
  |   |   |   |   | (NIL,
  |   |   |   |   |   SeqExp[
  |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   StringExp("Unknown syntax token: '"))])),
  |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   CallExp(prev_char,[]))])),
  |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   StringExp("'\n"))])),
  |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   NilExp)])))))])),
  |   (parse_id_token,[],
  |   | NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   LetExp([
  |   |   | VarDec(id,true,STRING,
  |   |   |   (STRING,
  |   |   |   | StringExp("")))],
  |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   SeqExp[
  |   |   |   | (VOID,
  |   |   |   |   WhileExp(
  |   |   |   |   | (INT,
  |   |   |   |   |   CallExp(looking_at,[
  |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   SimpleVar(id_char))))])),
  |   |   |   |   | (VOID,
  |   |   |   |   |   SeqExp[
  |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   AssignExp(
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   SimpleVar(id)),
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   CallExp(concat,[
  |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   SimpleVar(id)))),
  |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   CallExp(curr_char,[]))])))),
  |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   CallExp(advance_reader,[]))]))),
  |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   CallExp(mk_id_token,[
  |   |   |   |   | (STRING,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   SimpleVar(id))))]))])))),
  |   (parse_bool_token,[],
  |   | NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   LetExp([
  |   |   | VarDec(bool_char,true,STRING,
  |   |   |   (STRING,
  |   |   |   | CallExp(curr_char,[])))],
  |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   SeqExp[
  |   |   |   | (VOID,
  |   |   |   |   CallExp(advance_reader,[])),
  |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   IfExp(
  |   |   |   |   | (INT,
  |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   SimpleVar(bool_char)))),
  |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   StringExp("t")))),
  |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   CallExp(mk_bool_token,[
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IntExp(1))])),
  |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   IfExp(
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   SimpleVar(bool_char)))),
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   StringExp("f")))),
  |   |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   |   CallExp(mk_bool_token,[
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   IntExp(0))])),
  |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   StringExp("Unknown char used for bool literal: '"))])),
  |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   CallExp(curr_char,[]))])),
  |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   StringExp("'\n"))])),
  |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   NilExp)])))))])))),
  |   (parse_string_escape,[],
  |   | STRING,
  |   | (STRING,
  |   |   IfExp(
  |   |   | (INT,
  |   |   |   OpExp(EqOp,
  |   |   |   | (STRING,
  |   |   |   |   CallExp(curr_char,[])),
  |   |   |   | (STRING,
  |   |   |   |   StringExp("n")))),
  |   |   | (STRING,
  |   |   |   SeqExp[
  |   |   |   | (VOID,
  |   |   |   |   CallExp(advance_reader,[])),
  |   |   |   | (STRING,
  |   |   |   |   StringExp("\n"))]),
  |   |   | (STRING,
  |   |   |   IfExp(
  |   |   |   | (INT,
  |   |   |   |   OpExp(EqOp,
  |   |   |   |   | (STRING,
  |   |   |   |   |   CallExp(curr_char,[])),
  |   |   |   |   | (STRING,
  |   |   |   |   |   StringExp("t")))),
  |   |   |   | (STRING,
  |   |   |   |   SeqExp[
  |   |   |   |   | (VOID,
  |   |   |   |   |   CallExp(advance_reader,[])),
  |   |   |   |   | (STRING,
  |   |   |   |   |   StringExp("\t"))]),
  |   |   |   | (STRING,
  |   |   |   |   IfExp(
  |   |   |   |   | (INT,
  |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   CallExp(curr_char,[])),
  |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   StringExp("\"")))),
  |   |   |   |   | (STRING,
  |   |   |   |   |   SeqExp[
  |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   CallExp(advance_reader,[])),
  |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   StringExp("\""))]),
  |   |   |   |   | (STRING,
  |   |   |   |   |   IfExp(
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   CallExp(curr_char,[])),
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   StringExp("\\")))),
  |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   CallExp(advance_reader,[])),
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   StringExp("\\"))]),
  |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   CallExp(looking_at,[
  |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   SimpleVar(digit))))])),
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   LetExp([
  |   |   |   |   |   |   |   | VarDec(d0,true,INT,
  |   |   |   |   |   |   |   |   (INT,
  |   |   |   |   |   |   |   |   | CallExp(c2i,[
  |   |   |   |   |   |   |   |   |   (STRING,
  |   |   |   |   |   |   |   |   |   | CallExp(curr_char,[]))])))],
  |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   CallExp(advance_reader,[])),
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   CallExp(looking_at,[
  |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(digit))))])),
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   LetExp([
  |   |   |   |   |   |   |   |   |   |   | VarDec(d1,true,INT,
  |   |   |   |   |   |   |   |   |   |   |   (INT,
  |   |   |   |   |   |   |   |   |   |   |   | CallExp(c2i,[
  |   |   |   |   |   |   |   |   |   |   |   |   (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(curr_char,[]))])))],
  |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   |   CallExp(advance_reader,[])),
  |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(looking_at,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(digit))))])),
  |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   LetExp([
  |   |   |   |   |   |   |   |   |   |   |   |   |   | VarDec(d2,true,INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(c2i,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(curr_char,[]))]))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   | VarDec(ascii_code,true,INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | OpExp(PlusOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | OpExp(PlusOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | OpExp(TimesOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | IntExp(100)),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(d0)))))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | OpExp(TimesOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | IntExp(10)),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(d1)))))))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(d2)))))))],
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(advance_reader,[])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   OpExp(LeOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   IntExp(0)),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(ascii_code)))))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   OpExp(LeOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(ascii_code)))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   IntExp(255)))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   IntExp(0)))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(chr,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(ascii_code))))])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("Escaped ASCII code was out of range [0; 255]: "))])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(i2s,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(ascii_code))))]))])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("\n"))])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp(""))])))]))),
  |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("Illegal string ASCII escape sequence at third digit: '"))])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(curr_char,[]))])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("'\n"))])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp(""))])))]))),
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   StringExp("Illegal string ASCII escape sequence at second digit: '"))])),
  |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   CallExp(curr_char,[]))])),
  |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   StringExp("'\n"))])),
  |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   StringExp(""))])))]))),
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   StringExp("Illegal string escape sequence, starting at '"))])),
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   CallExp(prev_char,[]))])),
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   CallExp(curr_char,[]))])),
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   CallExp(next_char,[]))])),
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   StringExp("'\n"))])),
  |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   StringExp(""))])))))))))))),
  |   (parse_string_token,[],
  |   | NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   LetExp([
  |   |   | VarDec(str,true,STRING,
  |   |   |   (STRING,
  |   |   |   | StringExp("")))],
  |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   SeqExp[
  |   |   |   | (VOID,
  |   |   |   |   WhileExp(
  |   |   |   |   | (INT,
  |   |   |   |   |   CallExp(not,[
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   CallExp(looking_at,[
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   SimpleVar(string_indicator))))]))])),
  |   |   |   |   | (VOID,
  |   |   |   |   |   SeqExp[
  |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   CallExp(eof_p,[])),
  |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   StringExp("Unfinished string: "))])),
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   CallExp(wrap_string,[
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(str))))]))])),
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   StringExp("\n"))])),
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   BreakExp)]))),
  |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   CallExp(looking_at,[
  |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   SimpleVar(string_escape_indicator))))])),
  |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(advance_reader,[])),
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   AssignExp(
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   SimpleVar(str)),
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   CallExp(concat,[
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(str)))),
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   CallExp(parse_string_escape,[]))]))))]),
  |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   AssignExp(
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   SimpleVar(str)),
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   CallExp(concat,[
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(str)))),
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   CallExp(curr_char,[]))])))),
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(advance_reader,[]))])))]))),
  |   |   |   | (VOID,
  |   |   |   |   CallExp(advance_reader,[])),
  |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   CallExp(mk_str_token,[
  |   |   |   |   | (STRING,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   SimpleVar(str))))]))])))),
  |   (read_token,[],
  |   | NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   IfExp(
  |   |   | (INT,
  |   |   |   CallExp(eof_p,[])),
  |   |   | (NIL,
  |   |   |   NilExp),
  |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   SeqExp[
  |   |   |   | (VOID,
  |   |   |   |   SeqExp[]),
  |   |   |   | (VOID,
  |   |   |   |   WhileExp(
  |   |   |   |   | (INT,
  |   |   |   |   |   CallExp(looking_at,[
  |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   SimpleVar(whitespace))))])),
  |   |   |   |   | (VOID,
  |   |   |   |   |   CallExp(advance_reader,[])))),
  |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   IfExp(
  |   |   |   |   | (INT,
  |   |   |   |   |   CallExp(looking_at,[
  |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   SimpleVar(digit))))])),
  |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   CallExp(parse_int_token,[
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IntExp(1))])),
  |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   IfExp(
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   CallExp(looking_at_char_followed_by,[
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   SimpleVar(uminus_char)))),
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   SimpleVar(digit))))])),
  |   |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   CallExp(advance_reader,[])),
  |   |   |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   |   |   CallExp(parse_int_token,[
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   OpExp(MinusOp,
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   IntExp(0)),
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   IntExp(1))))]))]),
  |   |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   CallExp(looking_at_char_followed_by,[
  |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   SimpleVar(bool_indicator)))),
  |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   SimpleVar(bool_char))))])),
  |   |   |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(advance_reader,[])),
  |   |   |   |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   |   |   |   CallExp(parse_bool_token,[]))]),
  |   |   |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   CallExp(looking_at,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   SimpleVar(syntax_char))))])),
  |   |   |   |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   |   |   |   CallExp(parse_syntax_token,[])),
  |   |   |   |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   CallExp(looking_at,[
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(id_char))))])),
  |   |   |   |   |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   |   |   |   |   CallExp(parse_id_token,[])),
  |   |   |   |   |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   CallExp(looking_at,[
  |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(string_indicator))))])),
  |   |   |   |   |   |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   CallExp(advance_reader,[])),
  |   |   |   |   |   |   |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   |   |   |   |   |   |   CallExp(parse_string_token,[]))]),
  |   |   |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   StringExp("Unknown character: '"))])),
  |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   CallExp(curr_char,[]))])),
  |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   StringExp("'. Cannot lex further.\n"))])),
  |   |   |   |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   |   |   |   NilExp)])))))))))))))]))))],
  | TypeDec[
  |   (deque_content_type,
  |   | NAME deque_content_type = NAME token),
  |   (deque_elem,
  |   | NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem}),
  |   (deque,
  |   | NAME deque = RECORD {leftmost: NAME deque_elem, rightmost: NAME deque_elem})],
  | FunctionDec[
  |   (push_left,[
  |   | (a,true),
  |   | (Q,true)],
  |   | VOID,
  |   | (VOID,
  |   |   LetExp([
  |   |   | VarDec(old_left,true,NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   | VarExp(
  |   |   |   |   (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   | FieldVar(
  |   |   |   |   |   (NAME deque = RECORD {leftmost: NAME deque_elem, rightmost: NAME deque_elem},
  |   |   |   |   |   | SimpleVar(Q)),
  |   |   |   |   |   leftmost))))),
  |   |   | VarDec(new_left,true,NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   | RecordExp([
  |   |   |   |   (val,
  |   |   |   |   | (NAME deque_content_type = NAME token,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | (NAME deque_content_type = NAME token,
  |   |   |   |   |   |   SimpleVar(a))))),
  |   |   |   |   (left,
  |   |   |   |   | (NIL,
  |   |   |   |   |   NilExp)),
  |   |   |   |   (right,
  |   |   |   |   | (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   SimpleVar(old_left)))))])))],
  |   |   | (VOID,
  |   |   |   SeqExp[
  |   |   |   | (VOID,
  |   |   |   |   AssignExp(
  |   |   |   |   | (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   FieldVar(
  |   |   |   |   |   | (NAME deque = RECORD {leftmost: NAME deque_elem, rightmost: NAME deque_elem},
  |   |   |   |   |   |   SimpleVar(Q)),
  |   |   |   |   |   | leftmost)),
  |   |   |   |   | (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   SimpleVar(new_left)))))),
  |   |   |   | (VOID,
  |   |   |   |   IfExp(
  |   |   |   |   | (INT,
  |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   | (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   |   SimpleVar(old_left)))),
  |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   NilExp))),
  |   |   |   |   | (VOID,
  |   |   |   |   |   AssignExp(
  |   |   |   |   |   | (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   | (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   |   SimpleVar(old_left)),
  |   |   |   |   |   |   | left)),
  |   |   |   |   |   | (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   |   SimpleVar(new_left)))))),
  |   |   |   |   | (VOID,
  |   |   |   |   |   AssignExp(
  |   |   |   |   |   | (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   | (NAME deque = RECORD {leftmost: NAME deque_elem, rightmost: NAME deque_elem},
  |   |   |   |   |   |   |   SimpleVar(Q)),
  |   |   |   |   |   |   | rightmost)),
  |   |   |   |   |   | (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   |   SimpleVar(new_left))))))))])))),
  |   (push_right,[
  |   | (a,true),
  |   | (Q,true)],
  |   | VOID,
  |   | (VOID,
  |   |   LetExp([
  |   |   | VarDec(old_right,true,NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   | VarExp(
  |   |   |   |   (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   | FieldVar(
  |   |   |   |   |   (NAME deque = RECORD {leftmost: NAME deque_elem, rightmost: NAME deque_elem},
  |   |   |   |   |   | SimpleVar(Q)),
  |   |   |   |   |   rightmost))))),
  |   |   | VarDec(new_right,true,NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   | RecordExp([
  |   |   |   |   (val,
  |   |   |   |   | (NAME deque_content_type = NAME token,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | (NAME deque_content_type = NAME token,
  |   |   |   |   |   |   SimpleVar(a))))),
  |   |   |   |   (left,
  |   |   |   |   | (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   SimpleVar(old_right))))),
  |   |   |   |   (right,
  |   |   |   |   | (NIL,
  |   |   |   |   |   NilExp))])))],
  |   |   | (VOID,
  |   |   |   SeqExp[
  |   |   |   | (VOID,
  |   |   |   |   AssignExp(
  |   |   |   |   | (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   FieldVar(
  |   |   |   |   |   | (NAME deque = RECORD {leftmost: NAME deque_elem, rightmost: NAME deque_elem},
  |   |   |   |   |   |   SimpleVar(Q)),
  |   |   |   |   |   | rightmost)),
  |   |   |   |   | (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   SimpleVar(new_right)))))),
  |   |   |   | (VOID,
  |   |   |   |   IfExp(
  |   |   |   |   | (INT,
  |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   | (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   |   SimpleVar(old_right)))),
  |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   NilExp))),
  |   |   |   |   | (VOID,
  |   |   |   |   |   AssignExp(
  |   |   |   |   |   | (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   | (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   |   SimpleVar(old_right)),
  |   |   |   |   |   |   | right)),
  |   |   |   |   |   | (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   |   SimpleVar(new_right)))))),
  |   |   |   |   | (VOID,
  |   |   |   |   |   AssignExp(
  |   |   |   |   |   | (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   | (NAME deque = RECORD {leftmost: NAME deque_elem, rightmost: NAME deque_elem},
  |   |   |   |   |   |   |   SimpleVar(Q)),
  |   |   |   |   |   |   | leftmost)),
  |   |   |   |   |   | (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   |   SimpleVar(new_right))))))))])))),
  |   (pop_right,[
  |   | (Q,true)],
  |   | NAME deque_content_type = NAME token,
  |   | (NAME deque_content_type = NAME token,
  |   |   IfExp(
  |   |   | (INT,
  |   |   |   IfExp(
  |   |   |   | (INT,
  |   |   |   |   OpExp(EqOp,
  |   |   |   |   | (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   | (NAME deque = RECORD {leftmost: NAME deque_elem, rightmost: NAME deque_elem},
  |   |   |   |   |   |   |   SimpleVar(Q)),
  |   |   |   |   |   |   | leftmost)))),
  |   |   |   |   | (NIL,
  |   |   |   |   |   NilExp))),
  |   |   |   | (INT,
  |   |   |   |   IntExp(1)),
  |   |   |   | (INT,
  |   |   |   |   OpExp(EqOp,
  |   |   |   |   | (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   | (NAME deque = RECORD {leftmost: NAME deque_elem, rightmost: NAME deque_elem},
  |   |   |   |   |   |   |   SimpleVar(Q)),
  |   |   |   |   |   |   | rightmost)))),
  |   |   |   |   | (NIL,
  |   |   |   |   |   NilExp))))),
  |   |   | (NIL,
  |   |   |   SeqExp[
  |   |   |   | (VOID,
  |   |   |   |   CallExp(print,[
  |   |   |   |   | (STRING,
  |   |   |   |   |   StringExp("Deque error: tried to pop from empty or bad deque\n"))])),
  |   |   |   | (NIL,
  |   |   |   |   NilExp)]),
  |   |   | (NAME deque_content_type = NAME token,
  |   |   |   LetExp([
  |   |   |   | VarDec(res,true,NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   | VarExp(
  |   |   |   |   |   (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   (NAME deque = RECORD {leftmost: NAME deque_elem, rightmost: NAME deque_elem},
  |   |   |   |   |   |   | SimpleVar(Q)),
  |   |   |   |   |   |   rightmost))))),
  |   |   |   | VarDec(new_right,true,NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   | VarExp(
  |   |   |   |   |   (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   | SimpleVar(res)),
  |   |   |   |   |   |   left)))))],
  |   |   |   | (NAME deque_content_type = NAME token,
  |   |   |   |   SeqExp[
  |   |   |   |   | (VOID,
  |   |   |   |   |   AssignExp(
  |   |   |   |   |   | (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   | (NAME deque = RECORD {leftmost: NAME deque_elem, rightmost: NAME deque_elem},
  |   |   |   |   |   |   |   SimpleVar(Q)),
  |   |   |   |   |   |   | rightmost)),
  |   |   |   |   |   | (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   |   SimpleVar(new_right)))))),
  |   |   |   |   | (VOID,
  |   |   |   |   |   IfExp(
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   | (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   |   |   SimpleVar(new_right)))),
  |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   AssignExp(
  |   |   |   |   |   |   | (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   | (NAME deque = RECORD {leftmost: NAME deque_elem, rightmost: NAME deque_elem},
  |   |   |   |   |   |   |   |   SimpleVar(Q)),
  |   |   |   |   |   |   |   | leftmost)),
  |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   AssignExp(
  |   |   |   |   |   |   | (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   | (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   |   |   SimpleVar(new_right)),
  |   |   |   |   |   |   |   | right)),
  |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   NilExp))))),
  |   |   |   |   | (NAME deque_content_type = NAME token,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | (NAME deque_content_type = NAME token,
  |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   | (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   |   SimpleVar(res)),
  |   |   |   |   |   |   | val))))])))))),
  |   (empty,[
  |   | (Q,true)],
  |   | INT,
  |   | (INT,
  |   |   IfExp(
  |   |   | (INT,
  |   |   |   OpExp(EqOp,
  |   |   |   | (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   VarExp(
  |   |   |   |   | (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   FieldVar(
  |   |   |   |   |   | (NAME deque = RECORD {leftmost: NAME deque_elem, rightmost: NAME deque_elem},
  |   |   |   |   |   |   SimpleVar(Q)),
  |   |   |   |   |   | leftmost)))),
  |   |   |   | (NIL,
  |   |   |   |   NilExp))),
  |   |   | (INT,
  |   |   |   IntExp(1)),
  |   |   | (INT,
  |   |   |   OpExp(EqOp,
  |   |   |   | (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   VarExp(
  |   |   |   |   | (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   FieldVar(
  |   |   |   |   |   | (NAME deque = RECORD {leftmost: NAME deque_elem, rightmost: NAME deque_elem},
  |   |   |   |   |   |   SimpleVar(Q)),
  |   |   |   |   |   | rightmost)))),
  |   |   |   | (NIL,
  |   |   |   |   NilExp))))))],
  | TypeDec[
  |   (tokens,
  |   | NAME tokens = NAME deque)],
  | FunctionDec[
  |   (read_sexp_to_tokens,[],
  |   | NAME tokens = NAME deque,
  |   | (NAME tokens = NAME deque,
  |   |   LetExp([
  |   |   | VarDec(level,true,INT,
  |   |   |   (INT,
  |   |   |   | IntExp(1))),
  |   |   | VarDec(first_token,true,NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   | CallExp(read_token,[]))),
  |   |   | VarDec(tokens,true,NAME tokens = NAME deque,
  |   |   |   (NAME tokens = NAME deque,
  |   |   |   | RecordExp([
  |   |   |   |   (leftmost,
  |   |   |   |   | (NIL,
  |   |   |   |   |   NilExp)),
  |   |   |   |   (rightmost,
  |   |   |   |   | (NIL,
  |   |   |   |   |   NilExp))])))],
  |   |   | (NAME tokens = NAME deque,
  |   |   |   SeqExp[
  |   |   |   | (VOID,
  |   |   |   |   CallExp(push_right,[
  |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   |   SimpleVar(first_token)))),
  |   |   |   |   | (NAME tokens = NAME deque,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | (NAME tokens = NAME deque,
  |   |   |   |   |   |   SimpleVar(tokens))))])),
  |   |   |   | (NAME tokens = NAME deque,
  |   |   |   |   IfExp(
  |   |   |   |   | (INT,
  |   |   |   |   |   IfExp(
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   CallExp(int_token_p,[
  |   |   |   |   |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(first_token))))])),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   CallExp(str_token_p,[
  |   |   |   |   |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(first_token))))])))),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   CallExp(id_token_p,[
  |   |   |   |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   |   |   |   |   SimpleVar(first_token))))])))),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   CallExp(bool_token_p,[
  |   |   |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   |   |   |   SimpleVar(first_token))))])))),
  |   |   |   |   | (NAME tokens = NAME deque,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | (NAME tokens = NAME deque,
  |   |   |   |   |   |   SimpleVar(tokens)))),
  |   |   |   |   | (NAME tokens = NAME deque,
  |   |   |   |   |   IfExp(
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   |   |   |   SimpleVar(first_token)))),
  |   |   |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   |   |   |   SimpleVar(LPAREN)))))),
  |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   StringExp("Illegal first token for top level expression: '"))])),
  |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   CallExp(token2s,[
  |   |   |   |   |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(first_token))))]))])),
  |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   StringExp("'.\n"))])),
  |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   NilExp)]),
  |   |   |   |   |   | (NAME tokens = NAME deque,
  |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   WhileExp(
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   OpExp(GtOp,
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   SimpleVar(level)))),
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   IntExp(0)))),
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   LetExp([
  |   |   |   |   |   |   |   |   | VarDec(curr_token,true,NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   |   |   |   |   (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   |   |   |   |   | CallExp(read_token,[])))],
  |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_token)))),
  |   |   |   |   |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("Expression was not complete before input ended: "))])),
  |   |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("Missing "))])),
  |   |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(i2s,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(level))))]))])),
  |   |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp(" right parentheses\n"))])),
  |   |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   |   BreakExp)]))),
  |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   CallExp(push_right,[
  |   |   |   |   |   |   |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_token)))),
  |   |   |   |   |   |   |   |   |   |   | (NAME tokens = NAME deque,
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | (NAME tokens = NAME deque,
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(tokens))))])),
  |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_token)))),
  |   |   |   |   |   |   |   |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(LPAREN)))))),
  |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   AssignExp(
  |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(level)),
  |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   OpExp(PlusOp,
  |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(level)))),
  |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   IntExp(1)))))),
  |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_token)))),
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(RPAREN)))))),
  |   |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   |   AssignExp(
  |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(level)),
  |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   OpExp(MinusOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(level)))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   IntExp(1))))))))))]))))),
  |   |   |   |   |   |   | (NAME tokens = NAME deque,
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (NAME tokens = NAME deque,
  |   |   |   |   |   |   |   |   SimpleVar(tokens))))])))))]))))],
  | TypeDec[
  |   (sexp,
  |   | NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List}),
  |   (sexps,
  |   | NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps}),
  |   (List,
  |   | NAME List = RECORD {v: NAME sexps}),
  |   (Function,
  |   | NAME Function = RECORD {typ: STRING, name: STRING, pars: NAME parameters, body: NAME sexp, env: NAME env}),
  |   (parameters,
  |   | NAME parameters = RECORD {car: STRING, cdr: NAME parameters}),
  |   (env,
  |   | NAME env = RECORD {car: NAME env_entry, cdr: NAME env}),
  |   (env_entry,
  |   | NAME env_entry = RECORD {key: STRING, value: NAME sexp})],
  | FunctionDec[
  |   (mk_int,[
  |   | (v,true)],
  |   | NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   RecordExp([
  |   |   | (int,
  |   |   |   (NAME Int = RECORD {v: INT},
  |   |   |   | RecordExp([
  |   |   |   |   (v,
  |   |   |   |   | (INT,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   SimpleVar(v)))))]))),
  |   |   | (bool,
  |   |   |   (NIL,
  |   |   |   | NilExp)),
  |   |   | (str,
  |   |   |   (NIL,
  |   |   |   | NilExp)),
  |   |   | (sym,
  |   |   |   (NIL,
  |   |   |   | NilExp)),
  |   |   | (fun,
  |   |   |   (NIL,
  |   |   |   | NilExp)),
  |   |   | (sexps,
  |   |   |   (NIL,
  |   |   |   | NilExp))]))),
  |   (mk_bool,[
  |   | (v,true)],
  |   | NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   RecordExp([
  |   |   | (int,
  |   |   |   (NIL,
  |   |   |   | NilExp)),
  |   |   | (bool,
  |   |   |   (NAME Int = RECORD {v: INT},
  |   |   |   | RecordExp([
  |   |   |   |   (v,
  |   |   |   |   | (INT,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   SimpleVar(v)))))]))),
  |   |   | (str,
  |   |   |   (NIL,
  |   |   |   | NilExp)),
  |   |   | (sym,
  |   |   |   (NIL,
  |   |   |   | NilExp)),
  |   |   | (fun,
  |   |   |   (NIL,
  |   |   |   | NilExp)),
  |   |   | (sexps,
  |   |   |   (NIL,
  |   |   |   | NilExp))]))),
  |   (mk_str,[
  |   | (v,true)],
  |   | NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   RecordExp([
  |   |   | (int,
  |   |   |   (NIL,
  |   |   |   | NilExp)),
  |   |   | (bool,
  |   |   |   (NIL,
  |   |   |   | NilExp)),
  |   |   | (str,
  |   |   |   (NAME String = RECORD {v: STRING},
  |   |   |   | RecordExp([
  |   |   |   |   (v,
  |   |   |   |   | (STRING,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   SimpleVar(v)))))]))),
  |   |   | (sym,
  |   |   |   (NIL,
  |   |   |   | NilExp)),
  |   |   | (fun,
  |   |   |   (NIL,
  |   |   |   | NilExp)),
  |   |   | (sexps,
  |   |   |   (NIL,
  |   |   |   | NilExp))]))),
  |   (mk_sym,[
  |   | (v,true)],
  |   | NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   RecordExp([
  |   |   | (int,
  |   |   |   (NIL,
  |   |   |   | NilExp)),
  |   |   | (bool,
  |   |   |   (NIL,
  |   |   |   | NilExp)),
  |   |   | (str,
  |   |   |   (NIL,
  |   |   |   | NilExp)),
  |   |   | (sym,
  |   |   |   (NAME String = RECORD {v: STRING},
  |   |   |   | RecordExp([
  |   |   |   |   (v,
  |   |   |   |   | (STRING,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   SimpleVar(v)))))]))),
  |   |   | (fun,
  |   |   |   (NIL,
  |   |   |   | NilExp)),
  |   |   | (sexps,
  |   |   |   (NIL,
  |   |   |   | NilExp))]))),
  |   (mk_sexps,[
  |   | (v,true)],
  |   | NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   RecordExp([
  |   |   | (int,
  |   |   |   (NIL,
  |   |   |   | NilExp)),
  |   |   | (bool,
  |   |   |   (NIL,
  |   |   |   | NilExp)),
  |   |   | (str,
  |   |   |   (NIL,
  |   |   |   | NilExp)),
  |   |   | (sym,
  |   |   |   (NIL,
  |   |   |   | NilExp)),
  |   |   | (fun,
  |   |   |   (NIL,
  |   |   |   | NilExp)),
  |   |   | (sexps,
  |   |   |   (NAME List = RECORD {v: NAME sexps},
  |   |   |   | RecordExp([
  |   |   |   |   (v,
  |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   SimpleVar(v)))))])))]))),
  |   (mk_fun_from_fun,[
  |   | (f,true)],
  |   | NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   RecordExp([
  |   |   | (int,
  |   |   |   (NIL,
  |   |   |   | NilExp)),
  |   |   | (bool,
  |   |   |   (NIL,
  |   |   |   | NilExp)),
  |   |   | (str,
  |   |   |   (NIL,
  |   |   |   | NilExp)),
  |   |   | (sym,
  |   |   |   (NIL,
  |   |   |   | NilExp)),
  |   |   | (fun,
  |   |   |   (NAME Function = RECORD {typ: STRING, name: STRING, pars: NAME parameters, body: NAME sexp, env: NAME env},
  |   |   |   | VarExp(
  |   |   |   |   (NAME Function = RECORD {typ: STRING, name: STRING, pars: NAME parameters, body: NAME sexp, env: NAME env},
  |   |   |   |   | SimpleVar(f))))),
  |   |   | (sexps,
  |   |   |   (NIL,
  |   |   |   | NilExp))]))),
  |   (mk_fun,[
  |   | (pars,true),
  |   | (body,true),
  |   | (env,true)],
  |   | NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   LetExp([
  |   |   | VarDec(fun,true,NAME Function = RECORD {typ: STRING, name: STRING, pars: NAME parameters, body: NAME sexp, env: NAME env},
  |   |   |   (NAME Function = RECORD {typ: STRING, name: STRING, pars: NAME parameters, body: NAME sexp, env: NAME env},
  |   |   |   | RecordExp([
  |   |   |   |   (typ,
  |   |   |   |   | (STRING,
  |   |   |   |   |   StringExp("user"))),
  |   |   |   |   (name,
  |   |   |   |   | (STRING,
  |   |   |   |   |   StringExp(""))),
  |   |   |   |   (pars,
  |   |   |   |   | (NAME parameters = RECORD {car: STRING, cdr: NAME parameters},
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | (NAME parameters = RECORD {car: STRING, cdr: NAME parameters},
  |   |   |   |   |   |   SimpleVar(pars))))),
  |   |   |   |   (body,
  |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   SimpleVar(body))))),
  |   |   |   |   (env,
  |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   SimpleVar(env)))))])))],
  |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   CallExp(mk_fun_from_fun,[
  |   |   |   | (NAME Function = RECORD {typ: STRING, name: STRING, pars: NAME parameters, body: NAME sexp, env: NAME env},
  |   |   |   |   VarExp(
  |   |   |   |   | (NAME Function = RECORD {typ: STRING, name: STRING, pars: NAME parameters, body: NAME sexp, env: NAME env},
  |   |   |   |   |   SimpleVar(fun))))]))))),
  |   (mk_mt_sexp,[],
  |   | NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   RecordExp([
  |   |   | (int,
  |   |   |   (NIL,
  |   |   |   | NilExp)),
  |   |   | (bool,
  |   |   |   (NIL,
  |   |   |   | NilExp)),
  |   |   | (str,
  |   |   |   (NIL,
  |   |   |   | NilExp)),
  |   |   | (sym,
  |   |   |   (NIL,
  |   |   |   | NilExp)),
  |   |   | (fun,
  |   |   |   (NIL,
  |   |   |   | NilExp)),
  |   |   | (sexps,
  |   |   |   (NIL,
  |   |   |   | NilExp))]))),
  |   (int_p,[
  |   | (s,true)],
  |   | INT,
  |   | (INT,
  |   |   OpExp(NeqOp,
  |   |   | (NAME Int = RECORD {v: INT},
  |   |   |   VarExp(
  |   |   |   | (NAME Int = RECORD {v: INT},
  |   |   |   |   FieldVar(
  |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   SimpleVar(s)),
  |   |   |   |   | int)))),
  |   |   | (NIL,
  |   |   |   NilExp)))),
  |   (bool_p,[
  |   | (s,true)],
  |   | INT,
  |   | (INT,
  |   |   OpExp(NeqOp,
  |   |   | (NAME Int = RECORD {v: INT},
  |   |   |   VarExp(
  |   |   |   | (NAME Int = RECORD {v: INT},
  |   |   |   |   FieldVar(
  |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   SimpleVar(s)),
  |   |   |   |   | bool)))),
  |   |   | (NIL,
  |   |   |   NilExp)))),
  |   (str_p,[
  |   | (s,true)],
  |   | INT,
  |   | (INT,
  |   |   OpExp(NeqOp,
  |   |   | (NAME String = RECORD {v: STRING},
  |   |   |   VarExp(
  |   |   |   | (NAME String = RECORD {v: STRING},
  |   |   |   |   FieldVar(
  |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   SimpleVar(s)),
  |   |   |   |   | str)))),
  |   |   | (NIL,
  |   |   |   NilExp)))),
  |   (sym_p,[
  |   | (s,true)],
  |   | INT,
  |   | (INT,
  |   |   OpExp(NeqOp,
  |   |   | (NAME String = RECORD {v: STRING},
  |   |   |   VarExp(
  |   |   |   | (NAME String = RECORD {v: STRING},
  |   |   |   |   FieldVar(
  |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   SimpleVar(s)),
  |   |   |   |   | sym)))),
  |   |   | (NIL,
  |   |   |   NilExp)))),
  |   (fun_p,[
  |   | (s,true)],
  |   | INT,
  |   | (INT,
  |   |   OpExp(NeqOp,
  |   |   | (NAME Function = RECORD {typ: STRING, name: STRING, pars: NAME parameters, body: NAME sexp, env: NAME env},
  |   |   |   VarExp(
  |   |   |   | (NAME Function = RECORD {typ: STRING, name: STRING, pars: NAME parameters, body: NAME sexp, env: NAME env},
  |   |   |   |   FieldVar(
  |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   SimpleVar(s)),
  |   |   |   |   | fun)))),
  |   |   | (NIL,
  |   |   |   NilExp)))),
  |   (sexps_p,[
  |   | (s,true)],
  |   | INT,
  |   | (INT,
  |   |   OpExp(NeqOp,
  |   |   | (NAME List = RECORD {v: NAME sexps},
  |   |   |   VarExp(
  |   |   |   | (NAME List = RECORD {v: NAME sexps},
  |   |   |   |   FieldVar(
  |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   SimpleVar(s)),
  |   |   |   |   | sexps)))),
  |   |   | (NIL,
  |   |   |   NilExp)))),
  |   (get_int,[
  |   | (s,true)],
  |   | INT,
  |   | (INT,
  |   |   VarExp(
  |   |   | (INT,
  |   |   |   FieldVar(
  |   |   |   | (NAME Int = RECORD {v: INT},
  |   |   |   |   FieldVar(
  |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   SimpleVar(s)),
  |   |   |   |   | int)),
  |   |   |   | v))))),
  |   (get_bool,[
  |   | (s,true)],
  |   | INT,
  |   | (INT,
  |   |   VarExp(
  |   |   | (INT,
  |   |   |   FieldVar(
  |   |   |   | (NAME Int = RECORD {v: INT},
  |   |   |   |   FieldVar(
  |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   SimpleVar(s)),
  |   |   |   |   | bool)),
  |   |   |   | v))))),
  |   (get_str,[
  |   | (s,true)],
  |   | STRING,
  |   | (STRING,
  |   |   VarExp(
  |   |   | (STRING,
  |   |   |   FieldVar(
  |   |   |   | (NAME String = RECORD {v: STRING},
  |   |   |   |   FieldVar(
  |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   SimpleVar(s)),
  |   |   |   |   | str)),
  |   |   |   | v))))),
  |   (get_sym,[
  |   | (s,true)],
  |   | STRING,
  |   | (STRING,
  |   |   VarExp(
  |   |   | (STRING,
  |   |   |   FieldVar(
  |   |   |   | (NAME String = RECORD {v: STRING},
  |   |   |   |   FieldVar(
  |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   SimpleVar(s)),
  |   |   |   |   | sym)),
  |   |   |   | v))))),
  |   (get_fun,[
  |   | (s,true)],
  |   | NAME Function = RECORD {typ: STRING, name: STRING, pars: NAME parameters, body: NAME sexp, env: NAME env},
  |   | (NAME Function = RECORD {typ: STRING, name: STRING, pars: NAME parameters, body: NAME sexp, env: NAME env},
  |   |   VarExp(
  |   |   | (NAME Function = RECORD {typ: STRING, name: STRING, pars: NAME parameters, body: NAME sexp, env: NAME env},
  |   |   |   FieldVar(
  |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   SimpleVar(s)),
  |   |   |   | fun))))),
  |   (get_sexps,[
  |   | (s,true)],
  |   | NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   VarExp(
  |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   FieldVar(
  |   |   |   | (NAME List = RECORD {v: NAME sexps},
  |   |   |   |   FieldVar(
  |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   SimpleVar(s)),
  |   |   |   |   | sexps)),
  |   |   |   | v))))),
  |   (Function2s,[
  |   | (f,true)],
  |   | STRING,
  |   | (STRING,
  |   |   IfExp(
  |   |   | (INT,
  |   |   |   OpExp(EqOp,
  |   |   |   | (STRING,
  |   |   |   |   VarExp(
  |   |   |   |   | (STRING,
  |   |   |   |   |   FieldVar(
  |   |   |   |   |   | (NAME Function = RECORD {typ: STRING, name: STRING, pars: NAME parameters, body: NAME sexp, env: NAME env},
  |   |   |   |   |   |   SimpleVar(f)),
  |   |   |   |   |   | name)))),
  |   |   |   | (STRING,
  |   |   |   |   StringExp("")))),
  |   |   | (STRING,
  |   |   |   StringExp("<function>")),
  |   |   | (STRING,
  |   |   |   CallExp(concat,[
  |   |   |   | (STRING,
  |   |   |   |   StringExp("<function ")),
  |   |   |   | (STRING,
  |   |   |   |   CallExp(concat,[
  |   |   |   |   | (STRING,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   | (NAME Function = RECORD {typ: STRING, name: STRING, pars: NAME parameters, body: NAME sexp, env: NAME env},
  |   |   |   |   |   |   |   SimpleVar(f)),
  |   |   |   |   |   |   | name)))),
  |   |   |   |   | (STRING,
  |   |   |   |   |   StringExp(">"))]))]))))),
  |   (sexps2s,[
  |   | (v,true)],
  |   | STRING,
  |   | (STRING,
  |   |   LetExp([
  |   |   | FunctionDec[
  |   |   |   (aux,[
  |   |   |   | (vs,true)],
  |   |   |   | STRING,
  |   |   |   | (STRING,
  |   |   |   |   IfExp(
  |   |   |   |   | (INT,
  |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   SimpleVar(vs)))),
  |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   NilExp))),
  |   |   |   |   | (STRING,
  |   |   |   |   |   StringExp("")),
  |   |   |   |   | (STRING,
  |   |   |   |   |   CallExp(concat,[
  |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   StringExp(" ")),
  |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   CallExp(concat,[
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(vs)),
  |   |   |   |   |   |   |   |   |   | car))))])),
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   CallExp(aux,[
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(vs)),
  |   |   |   |   |   |   |   |   |   | cdr))))]))]))])))))]],
  |   |   | (STRING,
  |   |   |   IfExp(
  |   |   |   | (INT,
  |   |   |   |   OpExp(EqOp,
  |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   SimpleVar(v)))),
  |   |   |   |   | (NIL,
  |   |   |   |   |   NilExp))),
  |   |   |   | (STRING,
  |   |   |   |   StringExp("()")),
  |   |   |   | (STRING,
  |   |   |   |   CallExp(concat,[
  |   |   |   |   | (STRING,
  |   |   |   |   |   StringExp("(")),
  |   |   |   |   | (STRING,
  |   |   |   |   |   CallExp(concat,[
  |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   SimpleVar(v)),
  |   |   |   |   |   |   |   |   | car))))])),
  |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   CallExp(concat,[
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   CallExp(aux,[
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(v)),
  |   |   |   |   |   |   |   |   |   | cdr))))])),
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   StringExp(")"))]))]))]))))))),
  |   (sexp2s,[
  |   | (s,true)],
  |   | STRING,
  |   | (STRING,
  |   |   IfExp(
  |   |   | (INT,
  |   |   |   CallExp(int_p,[
  |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   VarExp(
  |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   SimpleVar(s))))])),
  |   |   | (STRING,
  |   |   |   CallExp(i2s,[
  |   |   |   | (INT,
  |   |   |   |   CallExp(get_int,[
  |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   SimpleVar(s))))]))])),
  |   |   | (STRING,
  |   |   |   IfExp(
  |   |   |   | (INT,
  |   |   |   |   CallExp(bool_p,[
  |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   SimpleVar(s))))])),
  |   |   |   | (STRING,
  |   |   |   |   CallExp(bool2s,[
  |   |   |   |   | (INT,
  |   |   |   |   |   CallExp(get_bool,[
  |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   SimpleVar(s))))]))])),
  |   |   |   | (STRING,
  |   |   |   |   IfExp(
  |   |   |   |   | (INT,
  |   |   |   |   |   CallExp(str_p,[
  |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   SimpleVar(s))))])),
  |   |   |   |   | (STRING,
  |   |   |   |   |   CallExp(wrap_string,[
  |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   CallExp(get_str,[
  |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   SimpleVar(s))))]))])),
  |   |   |   |   | (STRING,
  |   |   |   |   |   IfExp(
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   CallExp(sym_p,[
  |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   SimpleVar(s))))])),
  |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   CallExp(get_sym,[
  |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   SimpleVar(s))))])),
  |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   CallExp(fun_p,[
  |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   SimpleVar(s))))])),
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   CallExp(Function2s,[
  |   |   |   |   |   |   |   | (NAME Function = RECORD {typ: STRING, name: STRING, pars: NAME parameters, body: NAME sexp, env: NAME env},
  |   |   |   |   |   |   |   |   CallExp(get_fun,[
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(s))))]))])),
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   CallExp(sexps_p,[
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(s))))])),
  |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   CallExp(sexps2s,[
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   CallExp(get_sexps,[
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(s))))]))])),
  |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   StringExp("Unknown sexp in sexp2s.\n"))])),
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   StringExp(""))])))))))))))))),
  |   (parse_tokens,[
  |   | (left_elem,true),
  |   | (right_elem,true)],
  |   | NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   LetExp([
  |   |   | VarDec(left_token,true,NAME deque_content_type = NAME token,
  |   |   |   (NAME deque_content_type = NAME token,
  |   |   |   | VarExp(
  |   |   |   |   (NAME deque_content_type = NAME token,
  |   |   |   |   | FieldVar(
  |   |   |   |   |   (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   | SimpleVar(left_elem)),
  |   |   |   |   |   val))))),
  |   |   | VarDec(right_token,true,NAME deque_content_type = NAME token,
  |   |   |   (NAME deque_content_type = NAME token,
  |   |   |   | VarExp(
  |   |   |   |   (NAME deque_content_type = NAME token,
  |   |   |   |   | FieldVar(
  |   |   |   |   |   (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   | SimpleVar(right_elem)),
  |   |   |   |   |   val)))))],
  |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   IfExp(
  |   |   |   | (INT,
  |   |   |   |   OpExp(EqOp,
  |   |   |   |   | (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   SimpleVar(left_elem)))),
  |   |   |   |   | (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   SimpleVar(right_elem)))))),
  |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   IfExp(
  |   |   |   |   | (INT,
  |   |   |   |   |   CallExp(int_token_p,[
  |   |   |   |   |   | (NAME deque_content_type = NAME token,
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | (NAME deque_content_type = NAME token,
  |   |   |   |   |   |   |   SimpleVar(left_token))))])),
  |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   CallExp(mk_int,[
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   CallExp(get_int_token,[
  |   |   |   |   |   |   | (NAME deque_content_type = NAME token,
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (NAME deque_content_type = NAME token,
  |   |   |   |   |   |   |   |   SimpleVar(left_token))))]))])),
  |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   IfExp(
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   CallExp(bool_token_p,[
  |   |   |   |   |   |   | (NAME deque_content_type = NAME token,
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (NAME deque_content_type = NAME token,
  |   |   |   |   |   |   |   |   SimpleVar(left_token))))])),
  |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   CallExp(mk_bool,[
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   CallExp(get_bool_token,[
  |   |   |   |   |   |   |   | (NAME deque_content_type = NAME token,
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME deque_content_type = NAME token,
  |   |   |   |   |   |   |   |   |   SimpleVar(left_token))))]))])),
  |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   CallExp(str_token_p,[
  |   |   |   |   |   |   |   | (NAME deque_content_type = NAME token,
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME deque_content_type = NAME token,
  |   |   |   |   |   |   |   |   |   SimpleVar(left_token))))])),
  |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   CallExp(mk_str,[
  |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   CallExp(get_str_token,[
  |   |   |   |   |   |   |   |   | (NAME deque_content_type = NAME token,
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME deque_content_type = NAME token,
  |   |   |   |   |   |   |   |   |   |   SimpleVar(left_token))))]))])),
  |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   CallExp(id_token_p,[
  |   |   |   |   |   |   |   |   | (NAME deque_content_type = NAME token,
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME deque_content_type = NAME token,
  |   |   |   |   |   |   |   |   |   |   SimpleVar(left_token))))])),
  |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   CallExp(mk_sym,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   CallExp(get_id_token,[
  |   |   |   |   |   |   |   |   |   | (NAME deque_content_type = NAME token,
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME deque_content_type = NAME token,
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(left_token))))]))])),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   StringExp("Syntax error: Could not parse sexp from single token: '"))])),
  |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   CallExp(token2s,[
  |   |   |   |   |   |   |   |   |   |   | (NAME deque_content_type = NAME token,
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | (NAME deque_content_type = NAME token,
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(left_token))))]))])),
  |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   StringExp("'\n"))])),
  |   |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   |   NilExp)]))))))))),
  |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   IfExp(
  |   |   |   |   | (INT,
  |   |   |   |   |   IfExp(
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   | (NAME deque_content_type = NAME token,
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (NAME deque_content_type = NAME token,
  |   |   |   |   |   |   |   |   SimpleVar(left_token)))),
  |   |   |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   |   |   |   SimpleVar(LPAREN)))))),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   | (NAME deque_content_type = NAME token,
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (NAME deque_content_type = NAME token,
  |   |   |   |   |   |   |   |   SimpleVar(right_token)))),
  |   |   |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   |   |   |   SimpleVar(RPAREN)))))),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IntExp(0)))),
  |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   LetExp([
  |   |   |   |   |   | VarDec(first_elem_inside,true,NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   |   |   | SimpleVar(left_elem)),
  |   |   |   |   |   |   |   |   right))))),
  |   |   |   |   |   | VarDec(last_elem_inside,true,NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   |   |   | SimpleVar(right_elem)),
  |   |   |   |   |   |   |   |   left))))),
  |   |   |   |   |   | VarDec(sexps,true,NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   (NIL,
  |   |   |   |   |   |   | NilExp)),
  |   |   |   |   |   | VarDec(end_of_next_sexp,true,NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   |   | SimpleVar(last_elem_inside)))))],
  |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   WhileExp(
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   |   |   |   | (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(end_of_next_sexp)))),
  |   |   |   |   |   |   |   |   | (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(left_elem)))))),
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   LetExp([
  |   |   |   |   |   |   |   |   | VarDec(beginning_of_next_sexp,true,NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   |   |   |   (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   |   |   |   | CallExp(find_sexp_beginning,[
  |   |   |   |   |   |   |   |   |   |   (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(first_elem_inside)))),
  |   |   |   |   |   |   |   |   |   |   (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(end_of_next_sexp))))]))),
  |   |   |   |   |   |   |   |   | VarDec(nexp_sexp,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   | CallExp(parse_tokens,[
  |   |   |   |   |   |   |   |   |   |   (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(beginning_of_next_sexp)))),
  |   |   |   |   |   |   |   |   |   |   (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(end_of_next_sexp))))])))],
  |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   AssignExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(sexps)),
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   RecordExp([
  |   |   |   |   |   |   |   |   |   |   |   | (car,
  |   |   |   |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(nexp_sexp))))),
  |   |   |   |   |   |   |   |   |   |   |   | (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(sexps)))))])))),
  |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   AssignExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(end_of_next_sexp)),
  |   |   |   |   |   |   |   |   |   |   | (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(beginning_of_next_sexp)),
  |   |   |   |   |   |   |   |   |   |   |   |   | left))))))]))))),
  |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   CallExp(mk_sexps,[
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   SimpleVar(sexps))))]))]))),
  |   |   |   |   | (NIL,
  |   |   |   |   |   SeqExp[
  |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   StringExp("Syntax error: Long sexp was not parameterised properly\n"))])),
  |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   NilExp)])))))))),
  |   (find_sexp_beginning,[
  |   | (leftmost_elem,true),
  |   | (end_elem,true)],
  |   | NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   | (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   LetExp([
  |   |   | VarDec(end_token,true,NAME deque_content_type = NAME token,
  |   |   |   (NAME deque_content_type = NAME token,
  |   |   |   | VarExp(
  |   |   |   |   (NAME deque_content_type = NAME token,
  |   |   |   |   | FieldVar(
  |   |   |   |   |   (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   | SimpleVar(end_elem)),
  |   |   |   |   |   val)))))],
  |   |   | (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   IfExp(
  |   |   |   | (INT,
  |   |   |   |   IfExp(
  |   |   |   |   | (INT,
  |   |   |   |   |   IfExp(
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   CallExp(int_token_p,[
  |   |   |   |   |   |   |   | (NAME deque_content_type = NAME token,
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME deque_content_type = NAME token,
  |   |   |   |   |   |   |   |   |   SimpleVar(end_token))))])),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   CallExp(str_token_p,[
  |   |   |   |   |   |   |   | (NAME deque_content_type = NAME token,
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME deque_content_type = NAME token,
  |   |   |   |   |   |   |   |   |   SimpleVar(end_token))))])))),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   CallExp(id_token_p,[
  |   |   |   |   |   |   | (NAME deque_content_type = NAME token,
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (NAME deque_content_type = NAME token,
  |   |   |   |   |   |   |   |   SimpleVar(end_token))))])))),
  |   |   |   |   | (INT,
  |   |   |   |   |   IntExp(1)),
  |   |   |   |   | (INT,
  |   |   |   |   |   CallExp(bool_token_p,[
  |   |   |   |   |   | (NAME deque_content_type = NAME token,
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | (NAME deque_content_type = NAME token,
  |   |   |   |   |   |   |   SimpleVar(end_token))))])))),
  |   |   |   | (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   VarExp(
  |   |   |   |   | (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   SimpleVar(end_elem)))),
  |   |   |   | (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   IfExp(
  |   |   |   |   | (INT,
  |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   | (NAME deque_content_type = NAME token,
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | (NAME deque_content_type = NAME token,
  |   |   |   |   |   |   |   SimpleVar(end_token)))),
  |   |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   |   |   SimpleVar(RPAREN)))))),
  |   |   |   |   | (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   LetExp([
  |   |   |   |   |   | VarDec(level,true,INT,
  |   |   |   |   |   |   (INT,
  |   |   |   |   |   |   | IntExp(1))),
  |   |   |   |   |   | VarDec(curr_elem,true,NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   |   |   | SimpleVar(end_elem)),
  |   |   |   |   |   |   |   |   left)))))],
  |   |   |   |   |   | (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   WhileExp(
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   OpExp(GtOp,
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   SimpleVar(level)))),
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   IntExp(0)))),
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   | (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_elem)))),
  |   |   |   |   |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   | (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(leftmost_elem)),
  |   |   |   |   |   |   |   |   |   |   |   |   |   | left)))),
  |   |   |   |   |   |   |   |   |   |   |   | (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_elem)))))))),
  |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   StringExp("Syntax error: Could not find beginning of long sexp\n"))])),
  |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   BreakExp)]))),
  |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   | (NAME deque_content_type = NAME token,
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | (NAME deque_content_type = NAME token,
  |   |   |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_elem)),
  |   |   |   |   |   |   |   |   |   |   |   |   | val)))),
  |   |   |   |   |   |   |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(LPAREN)))))),
  |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   AssignExp(
  |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(level)),
  |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   OpExp(MinusOp,
  |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(level)))),
  |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   IntExp(1)))))),
  |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   | (NAME deque_content_type = NAME token,
  |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME deque_content_type = NAME token,
  |   |   |   |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_elem)),
  |   |   |   |   |   |   |   |   |   |   |   |   |   | val)))),
  |   |   |   |   |   |   |   |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME token = RECORD {i: INT, s: STRING, typ: STRING},
  |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(RPAREN)))))),
  |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   AssignExp(
  |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(level)),
  |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   OpExp(PlusOp,
  |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(level)))),
  |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   IntExp(1)))))))))),
  |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   AssignExp(
  |   |   |   |   |   |   |   |   |   | (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_elem)),
  |   |   |   |   |   |   |   |   |   | (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   | (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_elem)),
  |   |   |   |   |   |   |   |   |   |   |   | left))))))]))),
  |   |   |   |   |   |   | (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   | (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   |   |   |   SimpleVar(curr_elem)),
  |   |   |   |   |   |   |   |   | right))))]))),
  |   |   |   |   | (NIL,
  |   |   |   |   |   SeqExp[
  |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   StringExp("Syntax error: Cannot find beginning of sexp ending in '"))])),
  |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   CallExp(token2s,[
  |   |   |   |   |   |   |   | (NAME deque_content_type = NAME token,
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME deque_content_type = NAME token,
  |   |   |   |   |   |   |   |   |   SimpleVar(end_token))))]))])),
  |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   StringExp("'\n"))])),
  |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   NilExp)])))))))),
  |   (env2s_short,[
  |   | (env,true)],
  |   | STRING,
  |   | (STRING,
  |   |   IfExp(
  |   |   | (INT,
  |   |   |   OpExp(EqOp,
  |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   VarExp(
  |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   SimpleVar(env)))),
  |   |   |   | (NIL,
  |   |   |   |   NilExp))),
  |   |   | (STRING,
  |   |   |   StringExp("")),
  |   |   | (STRING,
  |   |   |   IfExp(
  |   |   |   | (INT,
  |   |   |   |   OpExp(EqOp,
  |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   SimpleVar(env)),
  |   |   |   |   |   |   | cdr)))),
  |   |   |   |   | (NIL,
  |   |   |   |   |   NilExp))),
  |   |   |   | (STRING,
  |   |   |   |   VarExp(
  |   |   |   |   | (STRING,
  |   |   |   |   |   FieldVar(
  |   |   |   |   |   | (NAME env_entry = RECORD {key: STRING, value: NAME sexp},
  |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   SimpleVar(env)),
  |   |   |   |   |   |   | car)),
  |   |   |   |   |   | key)))),
  |   |   |   | (STRING,
  |   |   |   |   CallExp(concat,[
  |   |   |   |   | (STRING,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   | (NAME env_entry = RECORD {key: STRING, value: NAME sexp},
  |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   SimpleVar(env)),
  |   |   |   |   |   |   |   | car)),
  |   |   |   |   |   |   | key)))),
  |   |   |   |   | (STRING,
  |   |   |   |   |   CallExp(concat,[
  |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   StringExp("  ")),
  |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   CallExp(env2s_short,[
  |   |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   SimpleVar(env)),
  |   |   |   |   |   |   |   |   | cdr))))]))]))]))))))),
  |   (copy_value,[
  |   | (src,true),
  |   | (dst,true)],
  |   | VOID,
  |   | (VOID,
  |   |   IfExp(
  |   |   | (INT,
  |   |   |   IfExp(
  |   |   |   | (INT,
  |   |   |   |   IfExp(
  |   |   |   |   | (INT,
  |   |   |   |   |   IfExp(
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   CallExp(int_p,[
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(dst))))])),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   CallExp(bool_p,[
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(dst))))])))),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   CallExp(str_p,[
  |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   SimpleVar(dst))))])))),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   CallExp(sym_p,[
  |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   SimpleVar(dst))))])))),
  |   |   |   |   | (INT,
  |   |   |   |   |   IntExp(1)),
  |   |   |   |   | (INT,
  |   |   |   |   |   CallExp(fun_p,[
  |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   SimpleVar(dst))))])))),
  |   |   |   | (INT,
  |   |   |   |   IntExp(1)),
  |   |   |   | (INT,
  |   |   |   |   CallExp(sexps_p,[
  |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   SimpleVar(dst))))])))),
  |   |   | (VOID,
  |   |   |   SeqExp[
  |   |   |   | (VOID,
  |   |   |   |   CallExp(print,[
  |   |   |   |   | (STRING,
  |   |   |   |   |   StringExp("Cannot copy value into dst, as dst is not an empty value. Src: '"))])),
  |   |   |   | (VOID,
  |   |   |   |   CallExp(print,[
  |   |   |   |   | (STRING,
  |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   SimpleVar(src))))]))])),
  |   |   |   | (VOID,
  |   |   |   |   CallExp(print,[
  |   |   |   |   | (STRING,
  |   |   |   |   |   StringExp("', dst: '"))])),
  |   |   |   | (VOID,
  |   |   |   |   CallExp(print,[
  |   |   |   |   | (STRING,
  |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   SimpleVar(dst))))]))])),
  |   |   |   | (VOID,
  |   |   |   |   CallExp(print,[
  |   |   |   |   | (STRING,
  |   |   |   |   |   StringExp("'\n"))]))]),
  |   |   | (VOID,
  |   |   |   IfExp(
  |   |   |   | (INT,
  |   |   |   |   CallExp(int_p,[
  |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   SimpleVar(src))))])),
  |   |   |   | (VOID,
  |   |   |   |   AssignExp(
  |   |   |   |   | (NAME Int = RECORD {v: INT},
  |   |   |   |   |   FieldVar(
  |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   SimpleVar(dst)),
  |   |   |   |   |   | int)),
  |   |   |   |   | (NAME Int = RECORD {v: INT},
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | (NAME Int = RECORD {v: INT},
  |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   SimpleVar(src)),
  |   |   |   |   |   |   | int)))))),
  |   |   |   | (VOID,
  |   |   |   |   IfExp(
  |   |   |   |   | (INT,
  |   |   |   |   |   CallExp(bool_p,[
  |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   SimpleVar(src))))])),
  |   |   |   |   | (VOID,
  |   |   |   |   |   AssignExp(
  |   |   |   |   |   | (NAME Int = RECORD {v: INT},
  |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   SimpleVar(dst)),
  |   |   |   |   |   |   | bool)),
  |   |   |   |   |   | (NAME Int = RECORD {v: INT},
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | (NAME Int = RECORD {v: INT},
  |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   SimpleVar(src)),
  |   |   |   |   |   |   |   | bool)))))),
  |   |   |   |   | (VOID,
  |   |   |   |   |   IfExp(
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   CallExp(str_p,[
  |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   SimpleVar(src))))])),
  |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   AssignExp(
  |   |   |   |   |   |   | (NAME String = RECORD {v: STRING},
  |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   SimpleVar(dst)),
  |   |   |   |   |   |   |   | str)),
  |   |   |   |   |   |   | (NAME String = RECORD {v: STRING},
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (NAME String = RECORD {v: STRING},
  |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   SimpleVar(src)),
  |   |   |   |   |   |   |   |   | str)))))),
  |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   CallExp(fun_p,[
  |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   SimpleVar(src))))])),
  |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   AssignExp(
  |   |   |   |   |   |   |   | (NAME Function = RECORD {typ: STRING, name: STRING, pars: NAME parameters, body: NAME sexp, env: NAME env},
  |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   SimpleVar(dst)),
  |   |   |   |   |   |   |   |   | fun)),
  |   |   |   |   |   |   |   | (NAME Function = RECORD {typ: STRING, name: STRING, pars: NAME parameters, body: NAME sexp, env: NAME env},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME Function = RECORD {typ: STRING, name: STRING, pars: NAME parameters, body: NAME sexp, env: NAME env},
  |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(src)),
  |   |   |   |   |   |   |   |   |   | fun)))))),
  |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   CallExp(sym_p,[
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(src))))])),
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   AssignExp(
  |   |   |   |   |   |   |   |   | (NAME String = RECORD {v: STRING},
  |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(dst)),
  |   |   |   |   |   |   |   |   |   | sym)),
  |   |   |   |   |   |   |   |   | (NAME String = RECORD {v: STRING},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME String = RECORD {v: STRING},
  |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(src)),
  |   |   |   |   |   |   |   |   |   |   | sym)))))),
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   CallExp(sexps_p,[
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(src))))])),
  |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   AssignExp(
  |   |   |   |   |   |   |   |   |   | (NAME List = RECORD {v: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(dst)),
  |   |   |   |   |   |   |   |   |   |   | sexps)),
  |   |   |   |   |   |   |   |   |   | (NAME List = RECORD {v: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME List = RECORD {v: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(src)),
  |   |   |   |   |   |   |   |   |   |   |   | sexps)))))),
  |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   StringExp("Unknown src for copy_value: '"))])),
  |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(src))))]))])),
  |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   StringExp("'\n"))]))])))))))))))))))),
  |   (mk_internal_fun,[
  |   | (name,true)],
  |   | NAME env_entry = RECORD {key: STRING, value: NAME sexp},
  |   | (NAME env_entry = RECORD {key: STRING, value: NAME sexp},
  |   |   RecordExp([
  |   |   | (key,
  |   |   |   (STRING,
  |   |   |   | VarExp(
  |   |   |   |   (STRING,
  |   |   |   |   | SimpleVar(name))))),
  |   |   | (value,
  |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   | CallExp(mk_fun_from_fun,[
  |   |   |   |   (NAME Function = RECORD {typ: STRING, name: STRING, pars: NAME parameters, body: NAME sexp, env: NAME env},
  |   |   |   |   | RecordExp([
  |   |   |   |   |   (typ,
  |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   StringExp("internal"))),
  |   |   |   |   |   (name,
  |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   SimpleVar(name))))),
  |   |   |   |   |   (pars,
  |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   NilExp)),
  |   |   |   |   |   (body,
  |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   NilExp)),
  |   |   |   |   |   (env,
  |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   NilExp))]))])))])))],
  | VarDec(initial_env,true,NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   | RecordExp([
  |   |   (car,
  |   |   | (NAME env_entry = RECORD {key: STRING, value: NAME sexp},
  |   |   |   CallExp(mk_internal_fun,[
  |   |   |   | (STRING,
  |   |   |   |   StringExp("+"))]))),
  |   |   (cdr,
  |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   RecordExp([
  |   |   |   | (car,
  |   |   |   |   (NAME env_entry = RECORD {key: STRING, value: NAME sexp},
  |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   (STRING,
  |   |   |   |   |   | StringExp("-"))]))),
  |   |   |   | (cdr,
  |   |   |   |   (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   | RecordExp([
  |   |   |   |   |   (car,
  |   |   |   |   |   | (NAME env_entry = RECORD {key: STRING, value: NAME sexp},
  |   |   |   |   |   |   CallExp(mk_internal_fun,[
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   StringExp("*"))]))),
  |   |   |   |   |   (cdr,
  |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   RecordExp([
  |   |   |   |   |   |   | (car,
  |   |   |   |   |   |   |   (NAME env_entry = RECORD {key: STRING, value: NAME sexp},
  |   |   |   |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   (STRING,
  |   |   |   |   |   |   |   |   | StringExp("/"))]))),
  |   |   |   |   |   |   | (cdr,
  |   |   |   |   |   |   |   (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   | RecordExp([
  |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   | (NAME env_entry = RECORD {key: STRING, value: NAME sexp},
  |   |   |   |   |   |   |   |   |   CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   StringExp("^"))]))),
  |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   RecordExp([
  |   |   |   |   |   |   |   |   |   | (car,
  |   |   |   |   |   |   |   |   |   |   (NAME env_entry = RECORD {key: STRING, value: NAME sexp},
  |   |   |   |   |   |   |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   (STRING,
  |   |   |   |   |   |   |   |   |   |   |   | StringExp("<"))]))),
  |   |   |   |   |   |   |   |   |   | (cdr,
  |   |   |   |   |   |   |   |   |   |   (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   | RecordExp([
  |   |   |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   |   |   | (NAME env_entry = RECORD {key: STRING, value: NAME sexp},
  |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("<="))]))),
  |   |   |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   |   RecordExp([
  |   |   |   |   |   |   |   |   |   |   |   |   | (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME env_entry = RECORD {key: STRING, value: NAME sexp},
  |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | StringExp("="))]))),
  |   |   |   |   |   |   |   |   |   |   |   |   | (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   |   |   | RecordExp([
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME env_entry = RECORD {key: STRING, value: NAME sexp},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("!="))]))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   RecordExp([
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME env_entry = RECORD {key: STRING, value: NAME sexp},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | StringExp(">="))]))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | RecordExp([
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME env_entry = RECORD {key: STRING, value: NAME sexp},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp(">"))]))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   RecordExp([
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME env_entry = RECORD {key: STRING, value: NAME sexp},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | StringExp("or"))]))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | RecordExp([
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME env_entry = RECORD {key: STRING, value: NAME sexp},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("and"))]))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   RecordExp([
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME env_entry = RECORD {key: STRING, value: NAME sexp},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | StringExp("notb"))]))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | RecordExp([
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME env_entry = RECORD {key: STRING, value: NAME sexp},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("orb"))]))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   RecordExp([
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME env_entry = RECORD {key: STRING, value: NAME sexp},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | StringExp("andb"))]))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | RecordExp([
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME env_entry = RECORD {key: STRING, value: NAME sexp},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("ifb"))]))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   RecordExp([
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME env_entry = RECORD {key: STRING, value: NAME sexp},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | StringExp("min"))]))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | RecordExp([
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME env_entry = RECORD {key: STRING, value: NAME sexp},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("max"))]))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   RecordExp([
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME env_entry = RECORD {key: STRING, value: NAME sexp},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | StringExp("list"))]))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | RecordExp([
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME env_entry = RECORD {key: STRING, value: NAME sexp},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("cons"))]))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   RecordExp([
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME env_entry = RECORD {key: STRING, value: NAME sexp},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | StringExp("car"))]))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | RecordExp([
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME env_entry = RECORD {key: STRING, value: NAME sexp},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("cdr"))]))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   RecordExp([
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME env_entry = RECORD {key: STRING, value: NAME sexp},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | StringExp("progn"))]))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | RecordExp([
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME env_entry = RECORD {key: STRING, value: NAME sexp},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("map"))]))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   RecordExp([
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME env_entry = RECORD {key: STRING, value: NAME sexp},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | StringExp("foldl"))]))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | RecordExp([
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME env_entry = RECORD {key: STRING, value: NAME sexp},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("foldr"))]))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   RecordExp([
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME env_entry = RECORD {key: STRING, value: NAME sexp},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | StringExp("print"))]))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | RecordExp([
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME env_entry = RECORD {key: STRING, value: NAME sexp},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("read-char"))]))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   RecordExp([
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME env_entry = RECORD {key: STRING, value: NAME sexp},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | StringExp("read-line"))]))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | RecordExp([
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME env_entry = RECORD {key: STRING, value: NAME sexp},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("newline"))]))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   RecordExp([
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME env_entry = RECORD {key: STRING, value: NAME sexp},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | StringExp("<s"))]))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | RecordExp([
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME env_entry = RECORD {key: STRING, value: NAME sexp},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("<=s"))]))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   RecordExp([
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME env_entry = RECORD {key: STRING, value: NAME sexp},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | StringExp("=s"))]))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | RecordExp([
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME env_entry = RECORD {key: STRING, value: NAME sexp},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("!=s"))]))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   RecordExp([
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME env_entry = RECORD {key: STRING, value: NAME sexp},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | StringExp(">=s"))]))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | RecordExp([
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME env_entry = RECORD {key: STRING, value: NAME sexp},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp(">s"))]))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   RecordExp([
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME env_entry = RECORD {key: STRING, value: NAME sexp},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | StringExp("+s"))]))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | RecordExp([
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME env_entry = RECORD {key: STRING, value: NAME sexp},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("ord"))]))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   RecordExp([
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME env_entry = RECORD {key: STRING, value: NAME sexp},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | StringExp("chr"))]))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | RecordExp([
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME env_entry = RECORD {key: STRING, value: NAME sexp},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("s->i"))]))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   RecordExp([
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME env_entry = RECORD {key: STRING, value: NAME sexp},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | StringExp("i->s"))]))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | RecordExp([
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME env_entry = RECORD {key: STRING, value: NAME sexp},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("substring"))]))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   RecordExp([
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME env_entry = RECORD {key: STRING, value: NAME sexp},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | StringExp("int?"))]))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | RecordExp([
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME env_entry = RECORD {key: STRING, value: NAME sexp},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("string?"))]))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   RecordExp([
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME env_entry = RECORD {key: STRING, value: NAME sexp},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | StringExp("list?"))]))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | RecordExp([
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME env_entry = RECORD {key: STRING, value: NAME sexp},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("nil?"))]))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   RecordExp([
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME env_entry = RECORD {key: STRING, value: NAME sexp},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | StringExp("fun?"))]))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | RecordExp([
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME env_entry = RECORD {key: STRING, value: NAME sexp},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("lambda"))]))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   RecordExp([
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME env_entry = RECORD {key: STRING, value: NAME sexp},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | StringExp("let"))]))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | RecordExp([
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME env_entry = RECORD {key: STRING, value: NAME sexp},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("let*"))]))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   RecordExp([
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME env_entry = RECORD {key: STRING, value: NAME sexp},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | StringExp("letrec"))]))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | RecordExp([
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME env_entry = RECORD {key: STRING, value: NAME sexp},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("define"))]))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   RecordExp([
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME env_entry = RECORD {key: STRING, value: NAME sexp},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | StringExp("quote"))]))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | RecordExp([
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME env_entry = RECORD {key: STRING, value: NAME sexp},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("quasiquote"))]))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   RecordExp([
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME env_entry = RECORD {key: STRING, value: NAME sexp},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | StringExp("unquote"))]))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | RecordExp([
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME env_entry = RECORD {key: STRING, value: NAME sexp},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("exit"))]))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   RecordExp([
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME env_entry = RECORD {key: STRING, value: NAME sexp},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_internal_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | StringExp("help"))]))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NIL,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | NilExp))])))])))])))])))])))])))])))])))])))])))])))])))])))])))])))])))])))])))])))])))])))])))])))])))])))])))])))])))])))])))])))])))])))])))])))])))])))])))])))])))])))])))])))])))])))])))])))])))])))])))])))])))])))])))])))])))])))]))),
  | FunctionDec[
  |   (lookup,[
  |   | (id,true),
  |   | (env,true)],
  |   | NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   IfExp(
  |   |   | (INT,
  |   |   |   OpExp(EqOp,
  |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   VarExp(
  |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   SimpleVar(env)))),
  |   |   |   | (NIL,
  |   |   |   |   NilExp))),
  |   |   | (NIL,
  |   |   |   SeqExp[
  |   |   |   | (VOID,
  |   |   |   |   CallExp(print,[
  |   |   |   |   | (STRING,
  |   |   |   |   |   StringExp("Error: Could not find '"))])),
  |   |   |   | (VOID,
  |   |   |   |   CallExp(print,[
  |   |   |   |   | (STRING,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   SimpleVar(id))))])),
  |   |   |   | (VOID,
  |   |   |   |   CallExp(print,[
  |   |   |   |   | (STRING,
  |   |   |   |   |   StringExp("' in environment.\n"))])),
  |   |   |   | (NIL,
  |   |   |   |   NilExp)]),
  |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   LetExp([
  |   |   |   | VarDec(curr_entry,true,NAME env_entry = RECORD {key: STRING, value: NAME sexp},
  |   |   |   |   (NAME env_entry = RECORD {key: STRING, value: NAME sexp},
  |   |   |   |   | VarExp(
  |   |   |   |   |   (NAME env_entry = RECORD {key: STRING, value: NAME sexp},
  |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   | SimpleVar(env)),
  |   |   |   |   |   |   car)))))],
  |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   IfExp(
  |   |   |   |   | (INT,
  |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   | (NAME env_entry = RECORD {key: STRING, value: NAME sexp},
  |   |   |   |   |   |   |   |   SimpleVar(curr_entry)),
  |   |   |   |   |   |   |   | key)))),
  |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   SimpleVar(id)))))),
  |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   | (NAME env_entry = RECORD {key: STRING, value: NAME sexp},
  |   |   |   |   |   |   |   SimpleVar(curr_entry)),
  |   |   |   |   |   |   | value)))),
  |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   CallExp(lookup,[
  |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   SimpleVar(id)))),
  |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   SimpleVar(env)),
  |   |   |   |   |   |   |   | cdr))))]))))))))),
  |   (eval,[
  |   | (sexp,true),
  |   | (env,true)],
  |   | NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   IfExp(
  |   |   | (INT,
  |   |   |   CallExp(int_p,[
  |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   VarExp(
  |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   SimpleVar(sexp))))])),
  |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   VarExp(
  |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   SimpleVar(sexp)))),
  |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   IfExp(
  |   |   |   | (INT,
  |   |   |   |   CallExp(str_p,[
  |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   SimpleVar(sexp))))])),
  |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   VarExp(
  |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   SimpleVar(sexp)))),
  |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   IfExp(
  |   |   |   |   | (INT,
  |   |   |   |   |   CallExp(bool_p,[
  |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   SimpleVar(sexp))))])),
  |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   SimpleVar(sexp)))),
  |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   IfExp(
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   CallExp(sym_p,[
  |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   SimpleVar(sexp))))])),
  |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   CallExp(lookup,[
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   CallExp(get_sym,[
  |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   SimpleVar(sexp))))])),
  |   |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   SimpleVar(env))))])),
  |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   CallExp(sexps_p,[
  |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   SimpleVar(sexp))))])),
  |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   LetExp([
  |   |   |   |   |   |   |   | VarDec(sexps,true,NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   | CallExp(get_sexps,[
  |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   | SimpleVar(sexp))))])))],
  |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(sexps)))),
  |   |   |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   CallExp(mk_sexps,[
  |   |   |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   |   |   NilExp)])),
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   LetExp([
  |   |   |   |   |   |   |   |   |   | VarDec(head_sexp,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(sexps)),
  |   |   |   |   |   |   |   |   |   |   |   |   car))))),
  |   |   |   |   |   |   |   |   |   | VarDec(head,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   | CallExp(eval,[
  |   |   |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(head_sexp)))),
  |   |   |   |   |   |   |   |   |   |   |   (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(env))))])))],
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   CallExp(fun_p,[
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(head))))])),
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   LetExp([
  |   |   |   |   |   |   |   |   |   |   |   | VarDec(fun,true,NAME Function = RECORD {typ: STRING, name: STRING, pars: NAME parameters, body: NAME sexp, env: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   |   (NAME Function = RECORD {typ: STRING, name: STRING, pars: NAME parameters, body: NAME sexp, env: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(get_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(head))))])))],
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   CallExp(apply_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME Function = RECORD {typ: STRING, name: STRING, pars: NAME parameters, body: NAME sexp, env: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME Function = RECORD {typ: STRING, name: STRING, pars: NAME parameters, body: NAME sexp, env: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(fun)))),
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(sexps)),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | cdr)))),
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(env))))])))),
  |   |   |   |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("Tried to apply non-function: '"))])),
  |   |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(head))))]))])),
  |   |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("'\n"))])),
  |   |   |   |   |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   |   |   |   |   NilExp)]))))))))),
  |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   StringExp("Eval error: Unknown sexp: '"))])),
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(sexp))))]))])),
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   StringExp("'\n"))])),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp)])))))))))))),
  |   (eval_sexps,[
  |   | (sexps,true),
  |   | (env,true)],
  |   | NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   IfExp(
  |   |   | (INT,
  |   |   |   OpExp(EqOp,
  |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   VarExp(
  |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   SimpleVar(sexps)))),
  |   |   |   | (NIL,
  |   |   |   |   NilExp))),
  |   |   | (NIL,
  |   |   |   NilExp),
  |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   RecordExp([
  |   |   |   | (car,
  |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   | CallExp(eval,[
  |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   | SimpleVar(sexps)),
  |   |   |   |   |   |   |   car)))),
  |   |   |   |   |   (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   | SimpleVar(env))))]))),
  |   |   |   | (cdr,
  |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   | CallExp(eval_sexps,[
  |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   | SimpleVar(sexps)),
  |   |   |   |   |   |   |   cdr)))),
  |   |   |   |   |   (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   | SimpleVar(env))))])))]))))),
  |   (apply_fun,[
  |   | (fun,true),
  |   | (args,true),
  |   | (env,true)],
  |   | NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   IfExp(
  |   |   | (INT,
  |   |   |   CallExp(lazy_fun_p,[
  |   |   |   | (NAME Function = RECORD {typ: STRING, name: STRING, pars: NAME parameters, body: NAME sexp, env: NAME env},
  |   |   |   |   VarExp(
  |   |   |   |   | (NAME Function = RECORD {typ: STRING, name: STRING, pars: NAME parameters, body: NAME sexp, env: NAME env},
  |   |   |   |   |   SimpleVar(fun))))])),
  |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   CallExp(apply_internal_lazy,[
  |   |   |   | (STRING,
  |   |   |   |   VarExp(
  |   |   |   |   | (STRING,
  |   |   |   |   |   FieldVar(
  |   |   |   |   |   | (NAME Function = RECORD {typ: STRING, name: STRING, pars: NAME parameters, body: NAME sexp, env: NAME env},
  |   |   |   |   |   |   SimpleVar(fun)),
  |   |   |   |   |   | name)))),
  |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   VarExp(
  |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   SimpleVar(args)))),
  |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   VarExp(
  |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   SimpleVar(env))))])),
  |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   CallExp(apply_fun_cbv,[
  |   |   |   | (NAME Function = RECORD {typ: STRING, name: STRING, pars: NAME parameters, body: NAME sexp, env: NAME env},
  |   |   |   |   VarExp(
  |   |   |   |   | (NAME Function = RECORD {typ: STRING, name: STRING, pars: NAME parameters, body: NAME sexp, env: NAME env},
  |   |   |   |   |   SimpleVar(fun)))),
  |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   CallExp(eval_sexps,[
  |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   SimpleVar(args)))),
  |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   SimpleVar(env))))])),
  |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   VarExp(
  |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   SimpleVar(env))))]))))),
  |   (apply_fun_cbv,[
  |   | (fun,true),
  |   | (args,true),
  |   | (env,true)],
  |   | NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   IfExp(
  |   |   | (INT,
  |   |   |   OpExp(EqOp,
  |   |   |   | (STRING,
  |   |   |   |   VarExp(
  |   |   |   |   | (STRING,
  |   |   |   |   |   FieldVar(
  |   |   |   |   |   | (NAME Function = RECORD {typ: STRING, name: STRING, pars: NAME parameters, body: NAME sexp, env: NAME env},
  |   |   |   |   |   |   SimpleVar(fun)),
  |   |   |   |   |   | typ)))),
  |   |   |   | (STRING,
  |   |   |   |   StringExp("internal")))),
  |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   CallExp(apply_internal_cbv,[
  |   |   |   | (STRING,
  |   |   |   |   VarExp(
  |   |   |   |   | (STRING,
  |   |   |   |   |   FieldVar(
  |   |   |   |   |   | (NAME Function = RECORD {typ: STRING, name: STRING, pars: NAME parameters, body: NAME sexp, env: NAME env},
  |   |   |   |   |   |   SimpleVar(fun)),
  |   |   |   |   |   | name)))),
  |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   VarExp(
  |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   SimpleVar(args)))),
  |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   VarExp(
  |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   SimpleVar(env))))])),
  |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   CallExp(apply_user_cbv,[
  |   |   |   | (NAME Function = RECORD {typ: STRING, name: STRING, pars: NAME parameters, body: NAME sexp, env: NAME env},
  |   |   |   |   VarExp(
  |   |   |   |   | (NAME Function = RECORD {typ: STRING, name: STRING, pars: NAME parameters, body: NAME sexp, env: NAME env},
  |   |   |   |   |   SimpleVar(fun)))),
  |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   VarExp(
  |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   SimpleVar(args))))]))))),
  |   (apply_user_cbv,[
  |   | (fun,true),
  |   | (args,true)],
  |   | NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   LetExp([
  |   |   | VarDec(env,true,NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   | VarExp(
  |   |   |   |   (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   | FieldVar(
  |   |   |   |   |   (NAME Function = RECORD {typ: STRING, name: STRING, pars: NAME parameters, body: NAME sexp, env: NAME env},
  |   |   |   |   |   | SimpleVar(fun)),
  |   |   |   |   |   env))))),
  |   |   | FunctionDec[
  |   |   |   (fill_env,[
  |   |   |   | (parameters,true),
  |   |   |   | (args,true)],
  |   |   |   | VOID,
  |   |   |   | (VOID,
  |   |   |   |   IfExp(
  |   |   |   |   | (INT,
  |   |   |   |   |   IfExp(
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   |   | (NAME parameters = RECORD {car: STRING, cdr: NAME parameters},
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (NAME parameters = RECORD {car: STRING, cdr: NAME parameters},
  |   |   |   |   |   |   |   |   SimpleVar(parameters)))),
  |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   SimpleVar(args)))),
  |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IntExp(0)))),
  |   |   |   |   | (VOID,
  |   |   |   |   |   SeqExp[
  |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   AssignExp(
  |   |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   SimpleVar(env)),
  |   |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   RecordExp([
  |   |   |   |   |   |   |   | (car,
  |   |   |   |   |   |   |   |   (NAME env_entry = RECORD {key: STRING, value: NAME sexp},
  |   |   |   |   |   |   |   |   | RecordExp([
  |   |   |   |   |   |   |   |   |   (key,
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   | (NAME parameters = RECORD {car: STRING, cdr: NAME parameters},
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(parameters)),
  |   |   |   |   |   |   |   |   |   |   |   | car))))),
  |   |   |   |   |   |   |   |   |   (value,
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   |   | car)))))]))),
  |   |   |   |   |   |   |   | (cdr,
  |   |   |   |   |   |   |   |   (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   | SimpleVar(env)))))])))),
  |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   CallExp(fill_env,[
  |   |   |   |   |   |   | (NAME parameters = RECORD {car: STRING, cdr: NAME parameters},
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (NAME parameters = RECORD {car: STRING, cdr: NAME parameters},
  |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   | (NAME parameters = RECORD {car: STRING, cdr: NAME parameters},
  |   |   |   |   |   |   |   |   |   SimpleVar(parameters)),
  |   |   |   |   |   |   |   |   | cdr)))),
  |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   | cdr))))]))]),
  |   |   |   |   | (VOID,
  |   |   |   |   |   IfExp(
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   | (NAME parameters = RECORD {car: STRING, cdr: NAME parameters},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME parameters = RECORD {car: STRING, cdr: NAME parameters},
  |   |   |   |   |   |   |   |   |   SimpleVar(parameters)))),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   SimpleVar(args)))),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   IntExp(0)))),
  |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   StringExp("Too many arguments for function "))])),
  |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   CallExp(Function2s,[
  |   |   |   |   |   |   |   |   | (NAME Function = RECORD {typ: STRING, name: STRING, pars: NAME parameters, body: NAME sexp, env: NAME env},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME Function = RECORD {typ: STRING, name: STRING, pars: NAME parameters, body: NAME sexp, env: NAME env},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(fun))))]))])),
  |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   StringExp(". Next remaining arg: '"))])),
  |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   | car))))]))])),
  |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   StringExp("'\n"))]))]),
  |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   |   |   |   | (NAME parameters = RECORD {car: STRING, cdr: NAME parameters},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME parameters = RECORD {car: STRING, cdr: NAME parameters},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(parameters)))),
  |   |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(args)))),
  |   |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   IntExp(0)))),
  |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   StringExp("Too few arguments for function "))])),
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   CallExp(Function2s,[
  |   |   |   |   |   |   |   |   |   | (NAME Function = RECORD {typ: STRING, name: STRING, pars: NAME parameters, body: NAME sexp, env: NAME env},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME Function = RECORD {typ: STRING, name: STRING, pars: NAME parameters, body: NAME sexp, env: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(fun))))]))])),
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   StringExp(". Next remaining parameter: '"))])),
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   | (NAME parameters = RECORD {car: STRING, cdr: NAME parameters},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(parameters)),
  |   |   |   |   |   |   |   |   |   |   | car))))])),
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   StringExp("'\n"))]))]),
  |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   SeqExp[]))))))))]],
  |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   SeqExp[
  |   |   |   | (VOID,
  |   |   |   |   CallExp(fill_env,[
  |   |   |   |   | (NAME parameters = RECORD {car: STRING, cdr: NAME parameters},
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | (NAME parameters = RECORD {car: STRING, cdr: NAME parameters},
  |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   | (NAME Function = RECORD {typ: STRING, name: STRING, pars: NAME parameters, body: NAME sexp, env: NAME env},
  |   |   |   |   |   |   |   SimpleVar(fun)),
  |   |   |   |   |   |   | pars)))),
  |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   SimpleVar(args))))])),
  |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   CallExp(eval,[
  |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   | (NAME Function = RECORD {typ: STRING, name: STRING, pars: NAME parameters, body: NAME sexp, env: NAME env},
  |   |   |   |   |   |   |   SimpleVar(fun)),
  |   |   |   |   |   |   | body)))),
  |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   SimpleVar(env))))]))])))),
  |   (lazy_fun_p,[
  |   | (fun,true)],
  |   | INT,
  |   | (INT,
  |   |   LetExp([
  |   |   | VarDec(fun_name,true,STRING,
  |   |   |   (STRING,
  |   |   |   | VarExp(
  |   |   |   |   (STRING,
  |   |   |   |   | FieldVar(
  |   |   |   |   |   (NAME Function = RECORD {typ: STRING, name: STRING, pars: NAME parameters, body: NAME sexp, env: NAME env},
  |   |   |   |   |   | SimpleVar(fun)),
  |   |   |   |   |   name))))),
  |   |   | VarDec(fun_typ,true,STRING,
  |   |   |   (STRING,
  |   |   |   | VarExp(
  |   |   |   |   (STRING,
  |   |   |   |   | FieldVar(
  |   |   |   |   |   (NAME Function = RECORD {typ: STRING, name: STRING, pars: NAME parameters, body: NAME sexp, env: NAME env},
  |   |   |   |   |   | SimpleVar(fun)),
  |   |   |   |   |   typ)))))],
  |   |   | (INT,
  |   |   |   IfExp(
  |   |   |   | (INT,
  |   |   |   |   OpExp(EqOp,
  |   |   |   |   | (STRING,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   SimpleVar(fun_typ)))),
  |   |   |   |   | (STRING,
  |   |   |   |   |   StringExp("internal")))),
  |   |   |   | (INT,
  |   |   |   |   IfExp(
  |   |   |   |   | (INT,
  |   |   |   |   |   IfExp(
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_name)))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("and")))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_name)))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("or")))))),
  |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_name)))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("ifb")))))),
  |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_name)))),
  |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("lambda")))))),
  |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_name)))),
  |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   StringExp("define")))))),
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_name)))),
  |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   StringExp("let")))))),
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_name)))),
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   StringExp("let*")))))),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_name)))),
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   StringExp("letrec")))))),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   SimpleVar(fun_name)))),
  |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   StringExp("quote")))))),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   SimpleVar(fun_name)))),
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   StringExp("quasiquote")))))),
  |   |   |   |   | (INT,
  |   |   |   |   |   IntExp(1)),
  |   |   |   |   | (INT,
  |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   SimpleVar(fun_name)))),
  |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   StringExp("unquote")))))),
  |   |   |   | (INT,
  |   |   |   |   IntExp(0))))))),
  |   (apply_internal_lazy,[
  |   | (fun_name,true),
  |   | (args,true),
  |   | (env,true)],
  |   | NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   LetExp([
  |   |   | FunctionDec[
  |   |   |   (or,[
  |   |   |   | (args,true)],
  |   |   |   | NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   IfExp(
  |   |   |   |   | (INT,
  |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   SimpleVar(args)))),
  |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   NilExp))),
  |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   CallExp(mk_bool,[
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IntExp(0))])),
  |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   LetExp([
  |   |   |   |   |   | VarDec(curr_arg,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   | CallExp(eval,[
  |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   car)))),
  |   |   |   |   |   |   |   (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   | SimpleVar(env))))])))],
  |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   CallExp(bool_p,[
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   CallExp(get_bool,[
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   IntExp(0)))),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   IntExp(0)))),
  |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   CallExp(or,[
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   | cdr))))])),
  |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))))))))),
  |   |   |   (and,[
  |   |   |   | (args,true)],
  |   |   |   | NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   IfExp(
  |   |   |   |   | (INT,
  |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   SimpleVar(args)))),
  |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   NilExp))),
  |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   CallExp(mk_bool,[
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IntExp(1))])),
  |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   LetExp([
  |   |   |   |   |   | VarDec(curr_arg,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   | CallExp(eval,[
  |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   car)))),
  |   |   |   |   |   |   |   (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   | SimpleVar(env))))])))],
  |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   CallExp(bool_p,[
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   CallExp(get_bool,[
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   IntExp(0)))),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   IntExp(0)))),
  |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   CallExp(mk_bool,[
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   IntExp(0))])),
  |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   | cdr)))),
  |   |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg)))),
  |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   CallExp(and,[
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   | cdr))))]))))))))))),
  |   |   |   (ifb,[
  |   |   |   | (args,true)],
  |   |   |   | NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   IfExp(
  |   |   |   |   | (INT,
  |   |   |   |   |   IfExp(
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(args)))),
  |   |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   | cdr)))),
  |   |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   |   NilExp))))),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   | cdr)),
  |   |   |   |   |   |   |   |   |   | cdr)))),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp))))),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   | cdr)),
  |   |   |   |   |   |   |   |   |   | cdr)))),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   |   | cdr)),
  |   |   |   |   |   |   |   |   |   |   | cdr)),
  |   |   |   |   |   |   |   |   |   | cdr)))),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   IntExp(0)))))),
  |   |   |   |   | (NIL,
  |   |   |   |   |   SeqExp[
  |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   StringExp("ifb needs exactly 3 arguments.\n"))])),
  |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   NilExp)]),
  |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   LetExp([
  |   |   |   |   |   | VarDec(cond_arg,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   | CallExp(eval,[
  |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   car)))),
  |   |   |   |   |   |   |   (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   | SimpleVar(env))))]))),
  |   |   |   |   |   | VarDec(then_sexp,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   cdr)),
  |   |   |   |   |   |   |   |   car))))),
  |   |   |   |   |   | VarDec(else_sexp,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   cdr)),
  |   |   |   |   |   |   |   |   |   cdr)),
  |   |   |   |   |   |   |   |   car)))))],
  |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   CallExp(bool_p,[
  |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   SimpleVar(cond_arg))))])),
  |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   CallExp(get_bool,[
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(cond_arg))))])),
  |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   CallExp(eval,[
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(then_sexp)))),
  |   |   |   |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(env))))])),
  |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   CallExp(eval,[
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(else_sexp)))),
  |   |   |   |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(env))))])))),
  |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   StringExp("Illegal argument as condition in ifb, sexp: '"))])),
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(cond_arg))))]))])),
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   StringExp("'\n"))])),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp)])))))))),
  |   |   |   (lambda,[
  |   |   |   | (args,true)],
  |   |   |   | NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   IfExp(
  |   |   |   |   | (INT,
  |   |   |   |   |   IfExp(
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   SimpleVar(args)))),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   | cdr)))),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp))))),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   | cdr)))),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   | cdr)),
  |   |   |   |   |   |   |   |   |   | cdr)))),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   IntExp(0)))))),
  |   |   |   |   | (NIL,
  |   |   |   |   |   SeqExp[
  |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   StringExp("lambda needs exactly 2 arguments.\n"))])),
  |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   NilExp)]),
  |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   LetExp([
  |   |   |   |   |   | VarDec(parameters_sexp,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   |   |   |   car))))),
  |   |   |   |   |   | VarDec(body_sexp,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   cdr)),
  |   |   |   |   |   |   |   |   car)))))],
  |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   CallExp(sexps_p,[
  |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   SimpleVar(parameters_sexp))))])),
  |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   LetExp([
  |   |   |   |   |   |   |   | VarDec(parameters,true,NAME parameters = RECORD {car: STRING, cdr: NAME parameters},
  |   |   |   |   |   |   |   |   (NIL,
  |   |   |   |   |   |   |   |   | NilExp)),
  |   |   |   |   |   |   |   | FunctionDec[
  |   |   |   |   |   |   |   |   (fill_parameters,[
  |   |   |   |   |   |   |   |   | (sexps,true)],
  |   |   |   |   |   |   |   |   | VOID,
  |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(sexps)))),
  |   |   |   |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   CallExp(fill_parameters,[
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(sexps)),
  |   |   |   |   |   |   |   |   |   |   |   |   |   | cdr))))])),
  |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   CallExp(sym_p,[
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(sexps)),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | car))))])),
  |   |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   |   AssignExp(
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME parameters = RECORD {car: STRING, cdr: NAME parameters},
  |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(parameters)),
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME parameters = RECORD {car: STRING, cdr: NAME parameters},
  |   |   |   |   |   |   |   |   |   |   |   |   |   RecordExp([
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(get_sym,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(sexps)),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   car))))]))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME parameters = RECORD {car: STRING, cdr: NAME parameters},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME parameters = RECORD {car: STRING, cdr: NAME parameters},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(parameters)))))])))),
  |   |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("Illegal parameter in lambda expression: '"))])),
  |   |   |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(sexps)),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | car))))]))])),
  |   |   |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("'\n"))]))])))]))))]],
  |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   CallExp(fill_parameters,[
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   CallExp(get_sexps,[
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(parameters_sexp))))]))])),
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   CallExp(mk_fun,[
  |   |   |   |   |   |   |   |   |   | (NAME parameters = RECORD {car: STRING, cdr: NAME parameters},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME parameters = RECORD {car: STRING, cdr: NAME parameters},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(parameters)))),
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(body_sexp)))),
  |   |   |   |   |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(env))))]))]))),
  |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   StringExp("Parameter list in lambda expression has to be a list: '"))])),
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(parameters_sexp))))]))])),
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   StringExp("'\n"))])),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp)])))))))),
  |   |   |   (let_,[
  |   |   |   | (args,true)],
  |   |   |   | NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   IfExp(
  |   |   |   |   | (INT,
  |   |   |   |   |   IfExp(
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   SimpleVar(args)))),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   | cdr)))),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp))))),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   | cdr)))),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   | cdr)),
  |   |   |   |   |   |   |   |   |   | cdr)))),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   IntExp(0)))))),
  |   |   |   |   | (NIL,
  |   |   |   |   |   SeqExp[
  |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   StringExp("let needs exactly 2 arguments.\n"))])),
  |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   NilExp)]),
  |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   LetExp([
  |   |   |   |   |   | VarDec(bindings_sexp,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   |   |   |   car))))),
  |   |   |   |   |   | VarDec(body_sexp,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   cdr)),
  |   |   |   |   |   |   |   |   car))))),
  |   |   |   |   |   | VarDec(body_env,true,NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   | SimpleVar(env))))),
  |   |   |   |   |   | FunctionDec[
  |   |   |   |   |   |   (fill_env,[
  |   |   |   |   |   |   | (bindings,true)],
  |   |   |   |   |   |   | VOID,
  |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(bindings)))),
  |   |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   LetExp([
  |   |   |   |   |   |   |   |   | VarDec(curr_binding_sexp,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(bindings)),
  |   |   |   |   |   |   |   |   |   |   |   car)))))],
  |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   CallExp(sexps_p,[
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_binding_sexp))))])),
  |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   LetExp([
  |   |   |   |   |   |   |   |   |   |   | VarDec(curr_binding,true,NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   | CallExp(get_sexps,[
  |   |   |   |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(curr_binding_sexp))))])))],
  |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_binding)))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_binding)),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | cdr)))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   NilExp))))),
  |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_binding)),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | cdr)))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_binding)),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | cdr)))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   IntExp(0)))))),
  |   |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   |   LetExp([
  |   |   |   |   |   |   |   |   |   |   |   |   | VarDec(name,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(curr_binding)),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   car))))),
  |   |   |   |   |   |   |   |   |   |   |   |   | VarDec(value_sexp,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(curr_binding)),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   cdr)),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   car)))))],
  |   |   |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(sym_p,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(name))))])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   AssignExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(body_env)),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   RecordExp([
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME env_entry = RECORD {key: STRING, value: NAME sexp},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | RecordExp([
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (key,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(get_sym,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(name))))]))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (value,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(eval,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(value_sexp)))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(env))))])))]))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(body_env)))))])))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(fill_env,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(bindings)),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | cdr))))]))]),
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("Name in binding in let has to be a symbol: '"))])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(name))))]))])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("'\n"))]))]))))),
  |   |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("Binding in let binding have to be of length 2: '"))])),
  |   |   |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_binding_sexp))))]))])),
  |   |   |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("'\n"))]))]))))),
  |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   StringExp("Illegal binding in let bindings: '"))])),
  |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_binding_sexp))))]))])),
  |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   StringExp("'\n"))]))]))))))))]],
  |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   CallExp(sexps_p,[
  |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   SimpleVar(bindings_sexp))))])),
  |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(fill_env,[
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   CallExp(get_sexps,[
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(bindings_sexp))))]))])),
  |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   CallExp(eval,[
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(body_sexp)))),
  |   |   |   |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(body_env))))]))]),
  |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   StringExp("Bindings list in let expression has to be a list: '"))])),
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(bindings_sexp))))]))])),
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   StringExp("'\n"))])),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp)])))))))),
  |   |   |   (letstar,[
  |   |   |   | (args,true)],
  |   |   |   | NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   IfExp(
  |   |   |   |   | (INT,
  |   |   |   |   |   IfExp(
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   SimpleVar(args)))),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   | cdr)))),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp))))),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   | cdr)))),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   | cdr)),
  |   |   |   |   |   |   |   |   |   | cdr)))),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   IntExp(0)))))),
  |   |   |   |   | (NIL,
  |   |   |   |   |   SeqExp[
  |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   StringExp("let* needs exactly 2 arguments.\n"))])),
  |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   NilExp)]),
  |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   LetExp([
  |   |   |   |   |   | VarDec(bindings_sexp,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   |   |   |   car))))),
  |   |   |   |   |   | VarDec(body_sexp,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   cdr)),
  |   |   |   |   |   |   |   |   car))))),
  |   |   |   |   |   | VarDec(body_env,true,NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   | SimpleVar(env))))),
  |   |   |   |   |   | FunctionDec[
  |   |   |   |   |   |   (fill_env,[
  |   |   |   |   |   |   | (bindings,true)],
  |   |   |   |   |   |   | VOID,
  |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(bindings)))),
  |   |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   LetExp([
  |   |   |   |   |   |   |   |   | VarDec(curr_binding_sexp,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(bindings)),
  |   |   |   |   |   |   |   |   |   |   |   car)))))],
  |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   CallExp(sexps_p,[
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_binding_sexp))))])),
  |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   LetExp([
  |   |   |   |   |   |   |   |   |   |   | VarDec(curr_binding,true,NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   | CallExp(get_sexps,[
  |   |   |   |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(curr_binding_sexp))))])))],
  |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_binding)))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_binding)),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | cdr)))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   NilExp))))),
  |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_binding)),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | cdr)))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_binding)),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | cdr)))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   IntExp(0)))))),
  |   |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   |   LetExp([
  |   |   |   |   |   |   |   |   |   |   |   |   | VarDec(name,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(curr_binding)),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   car))))),
  |   |   |   |   |   |   |   |   |   |   |   |   | VarDec(value_sexp,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(curr_binding)),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   cdr)),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   car)))))],
  |   |   |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(sym_p,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(name))))])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   AssignExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(body_env)),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   RecordExp([
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME env_entry = RECORD {key: STRING, value: NAME sexp},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | RecordExp([
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (key,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(get_sym,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(name))))]))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (value,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(eval,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(value_sexp)))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(body_env))))])))]))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(body_env)))))])))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(fill_env,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(bindings)),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | cdr))))]))]),
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("Name in binding in let* has to be a symbol: '"))])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(name))))]))])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("'\n"))]))]))))),
  |   |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("Binding in let* binding have to be of length 2: '"))])),
  |   |   |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_binding_sexp))))]))])),
  |   |   |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("'\n"))]))]))))),
  |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   StringExp("Illegal binding in let* bindings: '"))])),
  |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_binding_sexp))))]))])),
  |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   StringExp("'\n"))]))]))))))))]],
  |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   CallExp(sexps_p,[
  |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   SimpleVar(bindings_sexp))))])),
  |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(fill_env,[
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   CallExp(get_sexps,[
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(bindings_sexp))))]))])),
  |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   CallExp(eval,[
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(body_sexp)))),
  |   |   |   |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(body_env))))]))]),
  |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   StringExp("Bindings list in let* expression has to be a list: '"))])),
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(bindings_sexp))))]))])),
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   StringExp("'\n"))])),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp)])))))))),
  |   |   |   (letrec,[
  |   |   |   | (args,true)],
  |   |   |   | NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   IfExp(
  |   |   |   |   | (INT,
  |   |   |   |   |   IfExp(
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   SimpleVar(args)))),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   | cdr)))),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp))))),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   | cdr)))),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   | cdr)),
  |   |   |   |   |   |   |   |   |   | cdr)))),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   IntExp(0)))))),
  |   |   |   |   | (NIL,
  |   |   |   |   |   SeqExp[
  |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   StringExp("letrec needs exactly 2 arguments.\n"))])),
  |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   NilExp)]),
  |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   LetExp([
  |   |   |   |   |   | VarDec(bindings_sexp,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   |   |   |   car))))),
  |   |   |   |   |   | VarDec(body_sexp,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   cdr)),
  |   |   |   |   |   |   |   |   car))))),
  |   |   |   |   |   | TypeDec[
  |   |   |   |   |   |   (partial,
  |   |   |   |   |   |   | NAME partial = RECORD {value: NAME sexp, env_entry: NAME env_entry, value_sexp: NAME sexp}),
  |   |   |   |   |   |   (partials,
  |   |   |   |   |   |   | NAME partials = RECORD {car: NAME partial, cdr: NAME partials})],
  |   |   |   |   |   | FunctionDec[
  |   |   |   |   |   |   (get_env_extension,[
  |   |   |   |   |   |   | (bindings,true)],
  |   |   |   |   |   |   | NAME partials = RECORD {car: NAME partial, cdr: NAME partials},
  |   |   |   |   |   |   | (NAME partials = RECORD {car: NAME partial, cdr: NAME partials},
  |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(bindings)))),
  |   |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp),
  |   |   |   |   |   |   |   | (NAME partials = RECORD {car: NAME partial, cdr: NAME partials},
  |   |   |   |   |   |   |   |   LetExp([
  |   |   |   |   |   |   |   |   | VarDec(curr_binding_sexp,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(bindings)),
  |   |   |   |   |   |   |   |   |   |   |   car)))))],
  |   |   |   |   |   |   |   |   | (NAME partials = RECORD {car: NAME partial, cdr: NAME partials},
  |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   CallExp(sexps_p,[
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_binding_sexp))))])),
  |   |   |   |   |   |   |   |   |   | (NAME partials = RECORD {car: NAME partial, cdr: NAME partials},
  |   |   |   |   |   |   |   |   |   |   LetExp([
  |   |   |   |   |   |   |   |   |   |   | VarDec(curr_binding,true,NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   | CallExp(get_sexps,[
  |   |   |   |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(curr_binding_sexp))))])))],
  |   |   |   |   |   |   |   |   |   |   | (NAME partials = RECORD {car: NAME partial, cdr: NAME partials},
  |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_binding)))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_binding)),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | cdr)))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   NilExp))))),
  |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_binding)),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | cdr)))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_binding)),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | cdr)))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   IntExp(0)))))),
  |   |   |   |   |   |   |   |   |   |   |   | (NAME partials = RECORD {car: NAME partial, cdr: NAME partials},
  |   |   |   |   |   |   |   |   |   |   |   |   LetExp([
  |   |   |   |   |   |   |   |   |   |   |   |   | VarDec(name,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(curr_binding)),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   car))))),
  |   |   |   |   |   |   |   |   |   |   |   |   | VarDec(value_sexp,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(curr_binding)),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   cdr)),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   car)))))],
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME partials = RECORD {car: NAME partial, cdr: NAME partials},
  |   |   |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(sym_p,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(name))))])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME partials = RECORD {car: NAME partial, cdr: NAME partials},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   LetExp([
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | VarDec(value,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(mk_mt_sexp,[])))],
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME partials = RECORD {car: NAME partial, cdr: NAME partials},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   RecordExp([
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (car,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME partial = RECORD {value: NAME sexp, env_entry: NAME env_entry, value_sexp: NAME sexp},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | RecordExp([
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (value,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(value))))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (env_entry,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME env_entry = RECORD {key: STRING, value: NAME sexp},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   RecordExp([
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (key,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(get_sym,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(name))))]))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (value,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(value)))))]))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (value_sexp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(value_sexp)))))]))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME partials = RECORD {car: NAME partial, cdr: NAME partials},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(get_env_extension,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(bindings)),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   cdr))))])))])))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("Name in binding in letrec has to be a symbol: '"))])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(name))))]))])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("'\n"))])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   NilExp)]))))),
  |   |   |   |   |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("Binding in letrec binding have to be of length 2: '"))])),
  |   |   |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_binding_sexp))))]))])),
  |   |   |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("'\n"))])),
  |   |   |   |   |   |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   |   |   |   |   |   NilExp)]))))),
  |   |   |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   StringExp("Illegal binding in letrec bindings: '"))])),
  |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_binding_sexp))))]))])),
  |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   StringExp("'\n"))])),
  |   |   |   |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   |   |   |   NilExp)])))))))),
  |   |   |   |   |   |   (fill_body_env,[
  |   |   |   |   |   |   | (partials,true)],
  |   |   |   |   |   |   | NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   | (NAME partials = RECORD {car: NAME partial, cdr: NAME partials},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME partials = RECORD {car: NAME partial, cdr: NAME partials},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(partials)))),
  |   |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   SimpleVar(env)))),
  |   |   |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   RecordExp([
  |   |   |   |   |   |   |   |   | (car,
  |   |   |   |   |   |   |   |   |   (NAME env_entry = RECORD {key: STRING, value: NAME sexp},
  |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   (NAME env_entry = RECORD {key: STRING, value: NAME sexp},
  |   |   |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   (NAME partial = RECORD {value: NAME sexp, env_entry: NAME env_entry, value_sexp: NAME sexp},
  |   |   |   |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   |   (NAME partials = RECORD {car: NAME partial, cdr: NAME partials},
  |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(partials)),
  |   |   |   |   |   |   |   |   |   |   |   |   car)),
  |   |   |   |   |   |   |   |   |   |   |   env_entry))))),
  |   |   |   |   |   |   |   |   | (cdr,
  |   |   |   |   |   |   |   |   |   (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   | CallExp(fill_body_env,[
  |   |   |   |   |   |   |   |   |   |   (NAME partials = RECORD {car: NAME partial, cdr: NAME partials},
  |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   (NAME partials = RECORD {car: NAME partial, cdr: NAME partials},
  |   |   |   |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   |   (NAME partials = RECORD {car: NAME partial, cdr: NAME partials},
  |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(partials)),
  |   |   |   |   |   |   |   |   |   |   |   |   cdr))))])))])))))],
  |   |   |   |   |   | VarDec(extension,true,NAME partials = RECORD {car: NAME partial, cdr: NAME partials},
  |   |   |   |   |   |   (NAME partials = RECORD {car: NAME partial, cdr: NAME partials},
  |   |   |   |   |   |   | IfExp(
  |   |   |   |   |   |   |   (INT,
  |   |   |   |   |   |   |   | CallExp(sexps_p,[
  |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   | SimpleVar(bindings_sexp))))])),
  |   |   |   |   |   |   |   (NAME partials = RECORD {car: NAME partial, cdr: NAME partials},
  |   |   |   |   |   |   |   | CallExp(get_env_extension,[
  |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   | CallExp(get_sexps,[
  |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   | SimpleVar(bindings_sexp))))]))])),
  |   |   |   |   |   |   |   (NIL,
  |   |   |   |   |   |   |   | SeqExp[
  |   |   |   |   |   |   |   |   (VOID,
  |   |   |   |   |   |   |   |   | CallExp(print,[
  |   |   |   |   |   |   |   |   |   (STRING,
  |   |   |   |   |   |   |   |   |   | StringExp("Bindings list in letrec expression has to be a list: '"))])),
  |   |   |   |   |   |   |   |   (VOID,
  |   |   |   |   |   |   |   |   | CallExp(print,[
  |   |   |   |   |   |   |   |   |   (STRING,
  |   |   |   |   |   |   |   |   |   | CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(bindings_sexp))))]))])),
  |   |   |   |   |   |   |   |   (VOID,
  |   |   |   |   |   |   |   |   | CallExp(print,[
  |   |   |   |   |   |   |   |   |   (STRING,
  |   |   |   |   |   |   |   |   |   | StringExp("'\n"))])),
  |   |   |   |   |   |   |   |   (NIL,
  |   |   |   |   |   |   |   |   | NilExp)])))),
  |   |   |   |   |   | VarDec(body_env,true,NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   | CallExp(fill_body_env,[
  |   |   |   |   |   |   |   (NAME partials = RECORD {car: NAME partial, cdr: NAME partials},
  |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   (NAME partials = RECORD {car: NAME partial, cdr: NAME partials},
  |   |   |   |   |   |   |   |   | SimpleVar(extension))))]))),
  |   |   |   |   |   | FunctionDec[
  |   |   |   |   |   |   (complete_partials,[
  |   |   |   |   |   |   | (partials,true)],
  |   |   |   |   |   |   | VOID,
  |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   |   |   |   | (NAME partials = RECORD {car: NAME partial, cdr: NAME partials},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME partials = RECORD {car: NAME partial, cdr: NAME partials},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(partials)))),
  |   |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   LetExp([
  |   |   |   |   |   |   |   |   | VarDec(value_sexp,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   (NAME partial = RECORD {value: NAME sexp, env_entry: NAME env_entry, value_sexp: NAME sexp},
  |   |   |   |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   |   (NAME partials = RECORD {car: NAME partial, cdr: NAME partials},
  |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(partials)),
  |   |   |   |   |   |   |   |   |   |   |   |   car)),
  |   |   |   |   |   |   |   |   |   |   |   value_sexp))))),
  |   |   |   |   |   |   |   |   | VarDec(placeholder_value,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   (NAME partial = RECORD {value: NAME sexp, env_entry: NAME env_entry, value_sexp: NAME sexp},
  |   |   |   |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   |   (NAME partials = RECORD {car: NAME partial, cdr: NAME partials},
  |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(partials)),
  |   |   |   |   |   |   |   |   |   |   |   |   car)),
  |   |   |   |   |   |   |   |   |   |   |   value))))),
  |   |   |   |   |   |   |   |   | VarDec(actual_value,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   | CallExp(eval,[
  |   |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(value_sexp)))),
  |   |   |   |   |   |   |   |   |   |   (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(body_env))))])))],
  |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   CallExp(copy_value,[
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(actual_value)))),
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(placeholder_value))))])),
  |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   CallExp(complete_partials,[
  |   |   |   |   |   |   |   |   |   |   | (NAME partials = RECORD {car: NAME partial, cdr: NAME partials},
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | (NAME partials = RECORD {car: NAME partial, cdr: NAME partials},
  |   |   |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME partials = RECORD {car: NAME partial, cdr: NAME partials},
  |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(partials)),
  |   |   |   |   |   |   |   |   |   |   |   |   | cdr))))]))]))))))]],
  |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   CallExp(complete_partials,[
  |   |   |   |   |   |   |   | (NAME partials = RECORD {car: NAME partial, cdr: NAME partials},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME partials = RECORD {car: NAME partial, cdr: NAME partials},
  |   |   |   |   |   |   |   |   |   SimpleVar(extension))))])),
  |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   CallExp(eval,[
  |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   SimpleVar(body_sexp)))),
  |   |   |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   SimpleVar(body_env))))]))])))))),
  |   |   |   (quote,[
  |   |   |   | (args,true)],
  |   |   |   | NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   IfExp(
  |   |   |   |   | (INT,
  |   |   |   |   |   IfExp(
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   SimpleVar(args)))),
  |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   SimpleVar(args)))),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   | cdr)))),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   IntExp(0)))))),
  |   |   |   |   | (NIL,
  |   |   |   |   |   SeqExp[
  |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   StringExp("quote needs exactly 1 argument.\n"))])),
  |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   NilExp)]),
  |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   | car))))))),
  |   |   |   (define,[
  |   |   |   | (args,true)],
  |   |   |   | NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   IfExp(
  |   |   |   |   | (INT,
  |   |   |   |   |   IfExp(
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   SimpleVar(args)))),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   | cdr)))),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp))))),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   | cdr)))),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   | cdr)),
  |   |   |   |   |   |   |   |   |   | cdr)))),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   IntExp(0)))))),
  |   |   |   |   | (NIL,
  |   |   |   |   |   SeqExp[
  |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   StringExp("define needs exactly 2 arguments.\n"))])),
  |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   NilExp)]),
  |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   LetExp([
  |   |   |   |   |   | VarDec(name,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   |   |   |   car))))),
  |   |   |   |   |   | VarDec(body,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   cdr)),
  |   |   |   |   |   |   |   |   car)))))],
  |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   CallExp(not,[
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   CallExp(sym_p,[
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(name))))]))])),
  |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   StringExp("Name in define has to be a symbol: '"))])),
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(name))))]))])),
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   StringExp("'\n"))])),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp)]),
  |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   AssignExp(
  |   |   |   |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   SimpleVar(initial_env)),
  |   |   |   |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   RecordExp([
  |   |   |   |   |   |   |   |   |   | (car,
  |   |   |   |   |   |   |   |   |   |   (NAME env_entry = RECORD {key: STRING, value: NAME sexp},
  |   |   |   |   |   |   |   |   |   |   | RecordExp([
  |   |   |   |   |   |   |   |   |   |   |   (key,
  |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   CallExp(get_sym,[
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(name))))]))),
  |   |   |   |   |   |   |   |   |   |   |   (value,
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   CallExp(eval,[
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(body)))),
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(env))))])))]))),
  |   |   |   |   |   |   |   |   |   | (cdr,
  |   |   |   |   |   |   |   |   |   |   (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(initial_env)))))])))),
  |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   CallExp(mk_sexps,[
  |   |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   |   NilExp)]))])))))))),
  |   |   |   (quasiquote,[
  |   |   |   | (args,true)],
  |   |   |   | NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   LetExp([
  |   |   |   |   | FunctionDec[
  |   |   |   |   |   (quasi,[
  |   |   |   |   |   | (args,true),
  |   |   |   |   |   | (level,true)],
  |   |   |   |   |   | NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(args)))),
  |   |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   |   | cdr)))),
  |   |   |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   |   |   | cdr)),
  |   |   |   |   |   |   |   |   |   |   |   | cdr)))),
  |   |   |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   IntExp(0)))))),
  |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   StringExp("quasiquote needs exactly 1 argument.\n"))])),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp)]),
  |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   SimpleVar(level)))),
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   IntExp(0)))),
  |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   CallExp(eval,[
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   | car)))),
  |   |   |   |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(env))))])),
  |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   CallExp(sexps_p,[
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   |   | car))))])),
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   LetExp([
  |   |   |   |   |   |   |   |   |   | VarDec(ss,true,NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   | CallExp(get_sexps,[
  |   |   |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   |   |   |   car))))])))],
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(ss)))),
  |   |   |   |   |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   |   |   | car)))),
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   LetExp([
  |   |   |   |   |   |   |   |   |   |   |   | VarDec(head,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(ss)),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   car)))))],
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(sym_p,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(head))))])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(get_sym,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(head))))])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("unquote")))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   IntExp(0)))),
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   LetExp([
  |   |   |   |   |   |   |   |   |   |   |   |   |   | VarDec(unquote_val,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(lookup,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(get_sym,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(head))))])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(env))))])))],
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(fun_p,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(unquote_val))))])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   LetExp([
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | VarDec(unquote_fun,true,NAME Function = RECORD {typ: STRING, name: STRING, pars: NAME parameters, body: NAME sexp, env: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME Function = RECORD {typ: STRING, name: STRING, pars: NAME parameters, body: NAME sexp, env: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(get_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(unquote_val))))])))],
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME Function = RECORD {typ: STRING, name: STRING, pars: NAME parameters, body: NAME sexp, env: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(unquote_fun)),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | typ)))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("internal")))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(level)))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   IntExp(1)))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(unquote,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(ss)),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | cdr)))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(level))))])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_sexps,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(quasi_tail,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(ss)))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   OpExp(MinusOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(level)))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   IntExp(1))))]))])))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_sexps,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(quasi_tail,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(ss)))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(level))))]))])))))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_sexps,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(quasi_tail,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(ss)))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(level))))]))])))))),
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(sym_p,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(head))))])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(get_sym,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(head))))])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("quasiquote")))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   IntExp(0)))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   LetExp([
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | VarDec(quasiquote_val,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(lookup,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(get_sym,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(head))))])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(env))))])))],
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(fun_p,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(quasiquote_val))))])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   LetExp([
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | VarDec(quasiquote_fun,true,NAME Function = RECORD {typ: STRING, name: STRING, pars: NAME parameters, body: NAME sexp, env: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME Function = RECORD {typ: STRING, name: STRING, pars: NAME parameters, body: NAME sexp, env: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | CallExp(get_fun,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(quasiquote_val))))])))],
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME Function = RECORD {typ: STRING, name: STRING, pars: NAME parameters, body: NAME sexp, env: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(quasiquote_fun)),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | typ)))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("internal")))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_sexps,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(quasi_tail,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(ss)))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   OpExp(PlusOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(level)))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   IntExp(1))))]))])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_sexps,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(quasi_tail,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(ss)))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(level))))]))])))))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_sexps,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(quasi_tail,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(ss)))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(level))))]))])))))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_sexps,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(quasi_tail,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(ss)))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(level))))]))])))))))))))),
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   | car))))))))))),
  |   |   |   |   |   (unquote,[
  |   |   |   |   |   | (args,true),
  |   |   |   |   |   | (level,true)],
  |   |   |   |   |   | NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(args)))),
  |   |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   |   | cdr)))),
  |   |   |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   |   |   | cdr)),
  |   |   |   |   |   |   |   |   |   |   |   | cdr)))),
  |   |   |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   IntExp(0)))))),
  |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   StringExp("unquote needs exactly 1 argument.\n"))])),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp)]),
  |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   CallExp(quasi,[
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   SimpleVar(args)))),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   OpExp(MinusOp,
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   SimpleVar(level)))),
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   IntExp(1))))]))))),
  |   |   |   |   |   (quasi_tail,[
  |   |   |   |   |   | (args,true),
  |   |   |   |   |   | (level,true)],
  |   |   |   |   |   | NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   SimpleVar(args)))),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   NilExp),
  |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   RecordExp([
  |   |   |   |   |   |   |   | (car,
  |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   | CallExp(quasi,[
  |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   | RecordExp([
  |   |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   |   |   | car))))),
  |   |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   |   |   |   NilExp))])),
  |   |   |   |   |   |   |   |   |   (INT,
  |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   (INT,
  |   |   |   |   |   |   |   |   |   |   | SimpleVar(level))))]))),
  |   |   |   |   |   |   |   | (cdr,
  |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   | CallExp(quasi_tail,[
  |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   |   cdr)))),
  |   |   |   |   |   |   |   |   |   (INT,
  |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   (INT,
  |   |   |   |   |   |   |   |   |   |   | SimpleVar(level))))])))])))))]],
  |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   CallExp(quasi,[
  |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   SimpleVar(args)))),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IntExp(1))]))))),
  |   |   |   (unquote,[
  |   |   |   | (args,true)],
  |   |   |   | NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   SeqExp[
  |   |   |   |   | (VOID,
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   StringExp("Misplaced unquote around '"))])),
  |   |   |   |   | (VOID,
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   CallExp(sexps2s,[
  |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   SimpleVar(args))))]))])),
  |   |   |   |   | (VOID,
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   StringExp("'. Unquote can only be used inside quasiquotes\n"))])),
  |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   CallExp(mk_sexps,[
  |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   NilExp)]))]))]],
  |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   IfExp(
  |   |   |   | (INT,
  |   |   |   |   OpExp(EqOp,
  |   |   |   |   | (STRING,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   SimpleVar(fun_name)))),
  |   |   |   |   | (STRING,
  |   |   |   |   |   StringExp("ifb")))),
  |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   CallExp(ifb,[
  |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   SimpleVar(args))))])),
  |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   IfExp(
  |   |   |   |   | (INT,
  |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   SimpleVar(fun_name)))),
  |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   StringExp("or")))),
  |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   CallExp(or,[
  |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   SimpleVar(args))))])),
  |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   IfExp(
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   SimpleVar(fun_name)))),
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   StringExp("and")))),
  |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   CallExp(and,[
  |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   SimpleVar(args))))])),
  |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   SimpleVar(fun_name)))),
  |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   StringExp("lambda")))),
  |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   CallExp(lambda,[
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   SimpleVar(args))))])),
  |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_name)))),
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   StringExp("let")))),
  |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   CallExp(let_,[
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(args))))])),
  |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_name)))),
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   StringExp("let*")))),
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   CallExp(letstar,[
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args))))])),
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_name)))),
  |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   StringExp("letrec")))),
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   CallExp(letrec,[
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args))))])),
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_name)))),
  |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   StringExp("define")))),
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   CallExp(define,[
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args))))])),
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_name)))),
  |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("quote")))),
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   CallExp(quote,[
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args))))])),
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_name)))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("quasiquote")))),
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(quasiquote,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args))))])),
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_name)))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("unquote")))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(unquote,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args))))])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("Interpreter error: Unknown internal lazy function '"))])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_name))))])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("' --- Perhaps it has not been implemented yet.\n"))])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   NilExp)])))))))))))))))))))))))))),
  |   (apply_internal_cbv,[
  |   | (fun_name,true),
  |   | (args,true),
  |   | (env,true)],
  |   | NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   LetExp([
  |   |   | FunctionDec[
  |   |   |   (plus,[
  |   |   |   | (args,true)],
  |   |   |   | INT,
  |   |   |   | (INT,
  |   |   |   |   IfExp(
  |   |   |   |   | (INT,
  |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   SimpleVar(args)))),
  |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   NilExp))),
  |   |   |   |   | (INT,
  |   |   |   |   |   IntExp(0)),
  |   |   |   |   | (INT,
  |   |   |   |   |   LetExp([
  |   |   |   |   |   | VarDec(curr_arg,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   |   |   |   car)))))],
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   CallExp(int_p,[
  |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(PlusOp,
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   CallExp(get_int,[
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   CallExp(plus,[
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   | cdr))))])))),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   StringExp("Illegal argument to + (or tail of -), value: '"))])),
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))]))])),
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   StringExp("'\n"))])),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   IntExp(0))])))))))),
  |   |   |   (minus,[
  |   |   |   | (args,true)],
  |   |   |   | INT,
  |   |   |   | (INT,
  |   |   |   |   IfExp(
  |   |   |   |   | (INT,
  |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   SimpleVar(args)))),
  |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   NilExp))),
  |   |   |   |   | (INT,
  |   |   |   |   |   IntExp(0)),
  |   |   |   |   | (INT,
  |   |   |   |   |   LetExp([
  |   |   |   |   |   | VarDec(curr_arg,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   |   |   |   car)))))],
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   CallExp(int_p,[
  |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(MinusOp,
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   CallExp(get_int,[
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   CallExp(plus,[
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   | cdr))))])))),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   StringExp("Illegal argument to -, value: '"))])),
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))]))])),
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   StringExp("'\n"))])),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   IntExp(0))])))))))),
  |   |   |   (times,[
  |   |   |   | (args,true)],
  |   |   |   | INT,
  |   |   |   | (INT,
  |   |   |   |   IfExp(
  |   |   |   |   | (INT,
  |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   SimpleVar(args)))),
  |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   NilExp))),
  |   |   |   |   | (INT,
  |   |   |   |   |   IntExp(1)),
  |   |   |   |   | (INT,
  |   |   |   |   |   LetExp([
  |   |   |   |   |   | VarDec(curr_arg,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   |   |   |   car)))))],
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   CallExp(int_p,[
  |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(TimesOp,
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   CallExp(get_int,[
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   CallExp(times,[
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   | cdr))))])))),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   StringExp("Illegal argument to * (or tail of /), value: '"))])),
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))]))])),
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   StringExp("'\n"))])),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   IntExp(0))])))))))),
  |   |   |   (div,[
  |   |   |   | (args,true)],
  |   |   |   | INT,
  |   |   |   | (INT,
  |   |   |   |   IfExp(
  |   |   |   |   | (INT,
  |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   SimpleVar(args)))),
  |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   NilExp))),
  |   |   |   |   | (INT,
  |   |   |   |   |   SeqExp[
  |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   StringExp("Cannot apply / to 0 arguments.\n"))])),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IntExp(1))]),
  |   |   |   |   | (INT,
  |   |   |   |   |   LetExp([
  |   |   |   |   |   | VarDec(curr_arg,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   |   |   |   car)))))],
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   CallExp(int_p,[
  |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(DivideOp,
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   CallExp(get_int,[
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   CallExp(times,[
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   | cdr))))])))),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   StringExp("Illegal argument to /, value: '"))])),
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))]))])),
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   StringExp("'\n"))])),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   IntExp(0))])))))))),
  |   |   |   (expt,[
  |   |   |   | (args,true)],
  |   |   |   | INT,
  |   |   |   | (INT,
  |   |   |   |   IfExp(
  |   |   |   |   | (INT,
  |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   SimpleVar(args)))),
  |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   NilExp))),
  |   |   |   |   | (INT,
  |   |   |   |   |   IntExp(1)),
  |   |   |   |   | (INT,
  |   |   |   |   |   LetExp([
  |   |   |   |   |   | VarDec(curr_arg,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   |   |   |   car)))))],
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   CallExp(int_p,[
  |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(ExponentOp,
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   CallExp(get_int,[
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   CallExp(expt,[
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   | cdr))))])))),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   StringExp("Illegal argument to ^, value: '"))])),
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))]))])),
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   StringExp("'\n"))])),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   IntExp(0))])))))))),
  |   |   |   (lt_int,[
  |   |   |   | (args,true)],
  |   |   |   | INT,
  |   |   |   | (INT,
  |   |   |   |   LetExp([
  |   |   |   |   | FunctionDec[
  |   |   |   |   |   (aux,[
  |   |   |   |   |   | (head,true),
  |   |   |   |   |   | (args,true)],
  |   |   |   |   |   | INT,
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   SimpleVar(args)))),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   LetExp([
  |   |   |   |   |   |   |   | VarDec(curr_arg,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   car)))))],
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   CallExp(int_p,[
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   CallExp(aux,[
  |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   CallExp(get_int,[
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   |   |   | cdr))))])),
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   OpExp(LtOp,
  |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(head)))),
  |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   CallExp(get_int,[
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])))),
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   IntExp(0)))),
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   StringExp("Illegal argument to <, value: '"))])),
  |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))]))])),
  |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   StringExp("'\n"))])),
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   IntExp(0))]))))))))]],
  |   |   |   |   | (INT,
  |   |   |   |   |   IfExp(
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   SimpleVar(args)))),
  |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   LetExp([
  |   |   |   |   |   |   | VarDec(curr_arg,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   car)))))],
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   CallExp(int_p,[
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   CallExp(aux,[
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   CallExp(get_int,[
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   | cdr))))])),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   StringExp("Illegal argument to <, value: '"))])),
  |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))]))])),
  |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   StringExp("'\n"))])),
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   IntExp(0))])))))))))),
  |   |   |   (leq_int,[
  |   |   |   | (args,true)],
  |   |   |   | INT,
  |   |   |   | (INT,
  |   |   |   |   LetExp([
  |   |   |   |   | FunctionDec[
  |   |   |   |   |   (aux,[
  |   |   |   |   |   | (head,true),
  |   |   |   |   |   | (args,true)],
  |   |   |   |   |   | INT,
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   SimpleVar(args)))),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   LetExp([
  |   |   |   |   |   |   |   | VarDec(curr_arg,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   car)))))],
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   CallExp(int_p,[
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   CallExp(aux,[
  |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   CallExp(get_int,[
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   |   |   | cdr))))])),
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   OpExp(LeOp,
  |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(head)))),
  |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   CallExp(get_int,[
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])))),
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   IntExp(0)))),
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   StringExp("Illegal argument to <=, value: '"))])),
  |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))]))])),
  |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   StringExp("'\n"))])),
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   IntExp(0))]))))))))]],
  |   |   |   |   | (INT,
  |   |   |   |   |   IfExp(
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   SimpleVar(args)))),
  |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   LetExp([
  |   |   |   |   |   |   | VarDec(curr_arg,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   car)))))],
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   CallExp(int_p,[
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   CallExp(aux,[
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   CallExp(get_int,[
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   | cdr))))])),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   StringExp("Illegal argument to <=, value: '"))])),
  |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))]))])),
  |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   StringExp("'\n"))])),
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   IntExp(0))])))))))))),
  |   |   |   (eq_int,[
  |   |   |   | (args,true)],
  |   |   |   | INT,
  |   |   |   | (INT,
  |   |   |   |   LetExp([
  |   |   |   |   | FunctionDec[
  |   |   |   |   |   (aux,[
  |   |   |   |   |   | (head,true),
  |   |   |   |   |   | (args,true)],
  |   |   |   |   |   | INT,
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   SimpleVar(args)))),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   LetExp([
  |   |   |   |   |   |   |   | VarDec(curr_arg,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   car)))))],
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   CallExp(int_p,[
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   CallExp(aux,[
  |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(head)))),
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   |   |   | cdr))))])),
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   CallExp(get_int,[
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(head)))))),
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   IntExp(0)))),
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   StringExp("Illegal argument to =, value: '"))])),
  |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))]))])),
  |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   StringExp("'\n"))])),
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   IntExp(0))]))))))))]],
  |   |   |   |   | (INT,
  |   |   |   |   |   IfExp(
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   SimpleVar(args)))),
  |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   LetExp([
  |   |   |   |   |   |   | VarDec(curr_arg,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   car)))))],
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   CallExp(int_p,[
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   CallExp(aux,[
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   CallExp(get_int,[
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   | cdr))))])),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   StringExp("Illegal argument to =, value: '"))])),
  |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))]))])),
  |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   StringExp("'\n"))])),
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   IntExp(0))])))))))))),
  |   |   |   (neq_int,[
  |   |   |   | (args,true)],
  |   |   |   | INT,
  |   |   |   | (INT,
  |   |   |   |   LetExp([
  |   |   |   |   | FunctionDec[
  |   |   |   |   |   (aux,[
  |   |   |   |   |   | (head,true),
  |   |   |   |   |   | (args,true)],
  |   |   |   |   |   | INT,
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   SimpleVar(args)))),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   LetExp([
  |   |   |   |   |   |   |   | VarDec(curr_arg,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   car)))))],
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   CallExp(int_p,[
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   CallExp(aux,[
  |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(head)))),
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   |   |   | cdr))))])),
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   CallExp(get_int,[
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(head)))))),
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   IntExp(0)))),
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   StringExp("Illegal argument to !=, value: '"))])),
  |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))]))])),
  |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   StringExp("'\n"))])),
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   IntExp(0))]))))))))]],
  |   |   |   |   | (INT,
  |   |   |   |   |   IfExp(
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   SimpleVar(args)))),
  |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   LetExp([
  |   |   |   |   |   |   | VarDec(curr_arg,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   car)))))],
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   CallExp(int_p,[
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   CallExp(aux,[
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   CallExp(get_int,[
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   | cdr))))])),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   StringExp("Illegal argument to !=, value: '"))])),
  |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))]))])),
  |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   StringExp("'\n"))])),
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   IntExp(0))])))))))))),
  |   |   |   (geq_int,[
  |   |   |   | (args,true)],
  |   |   |   | INT,
  |   |   |   | (INT,
  |   |   |   |   LetExp([
  |   |   |   |   | FunctionDec[
  |   |   |   |   |   (aux,[
  |   |   |   |   |   | (head,true),
  |   |   |   |   |   | (args,true)],
  |   |   |   |   |   | INT,
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   SimpleVar(args)))),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   LetExp([
  |   |   |   |   |   |   |   | VarDec(curr_arg,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   car)))))],
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   CallExp(int_p,[
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   CallExp(aux,[
  |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   CallExp(get_int,[
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   |   |   | cdr))))])),
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   OpExp(GeOp,
  |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(head)))),
  |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   CallExp(get_int,[
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])))),
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   IntExp(0)))),
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   StringExp("Illegal argument to >=, value: '"))])),
  |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))]))])),
  |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   StringExp("'\n"))])),
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   IntExp(0))]))))))))]],
  |   |   |   |   | (INT,
  |   |   |   |   |   IfExp(
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   SimpleVar(args)))),
  |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   LetExp([
  |   |   |   |   |   |   | VarDec(curr_arg,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   car)))))],
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   CallExp(int_p,[
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   CallExp(aux,[
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   CallExp(get_int,[
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   | cdr))))])),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   StringExp("Illegal argument to >=, value: '"))])),
  |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))]))])),
  |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   StringExp("'\n"))])),
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   IntExp(0))])))))))))),
  |   |   |   (gt_int,[
  |   |   |   | (args,true)],
  |   |   |   | INT,
  |   |   |   | (INT,
  |   |   |   |   LetExp([
  |   |   |   |   | FunctionDec[
  |   |   |   |   |   (aux,[
  |   |   |   |   |   | (head,true),
  |   |   |   |   |   | (args,true)],
  |   |   |   |   |   | INT,
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   SimpleVar(args)))),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   LetExp([
  |   |   |   |   |   |   |   | VarDec(curr_arg,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   car)))))],
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   CallExp(int_p,[
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   CallExp(aux,[
  |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   CallExp(get_int,[
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   |   |   | cdr))))])),
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   OpExp(GtOp,
  |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(head)))),
  |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   CallExp(get_int,[
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])))),
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   IntExp(0)))),
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   StringExp("Illegal argument to >, value: '"))])),
  |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))]))])),
  |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   StringExp("'\n"))])),
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   IntExp(0))]))))))))]],
  |   |   |   |   | (INT,
  |   |   |   |   |   IfExp(
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   SimpleVar(args)))),
  |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   LetExp([
  |   |   |   |   |   |   | VarDec(curr_arg,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   car)))))],
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   CallExp(int_p,[
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   CallExp(aux,[
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   CallExp(get_int,[
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   | cdr))))])),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   StringExp("Illegal argument to >, value: '"))])),
  |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))]))])),
  |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   StringExp("'\n"))])),
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   IntExp(0))])))))))))),
  |   |   |   (min,[
  |   |   |   | (args,true)],
  |   |   |   | INT,
  |   |   |   | (INT,
  |   |   |   |   IfExp(
  |   |   |   |   | (INT,
  |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   SimpleVar(args)))),
  |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   NilExp))),
  |   |   |   |   | (INT,
  |   |   |   |   |   SeqExp[
  |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   StringExp("Cannot apply min to 0 arguments\n"))])),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IntExp(0))]),
  |   |   |   |   | (INT,
  |   |   |   |   |   LetExp([
  |   |   |   |   |   | VarDec(curr_arg,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   |   |   |   car)))))],
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   CallExp(int_p,[
  |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   | cdr)))),
  |   |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   LetExp([
  |   |   |   |   |   |   |   |   | VarDec(min_rst,true,INT,
  |   |   |   |   |   |   |   |   |   (INT,
  |   |   |   |   |   |   |   |   |   | CallExp(min,[
  |   |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   |   |   cdr))))])))],
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   OpExp(LtOp,
  |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   CallExp(get_int,[
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(min_rst)))))),
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   CallExp(get_int,[
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(min_rst)))))))),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   CallExp(get_int,[
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])))),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   StringExp("Illegal argument to min, value: '"))])),
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))]))])),
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   StringExp("'\n"))])),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   IntExp(0))])))))))),
  |   |   |   (max,[
  |   |   |   | (args,true)],
  |   |   |   | INT,
  |   |   |   | (INT,
  |   |   |   |   IfExp(
  |   |   |   |   | (INT,
  |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   SimpleVar(args)))),
  |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   NilExp))),
  |   |   |   |   | (INT,
  |   |   |   |   |   SeqExp[
  |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   StringExp("Cannot apply max to 0 arguments\n"))])),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IntExp(0))]),
  |   |   |   |   | (INT,
  |   |   |   |   |   LetExp([
  |   |   |   |   |   | VarDec(curr_arg,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   |   |   |   car)))))],
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   CallExp(int_p,[
  |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   | cdr)))),
  |   |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   LetExp([
  |   |   |   |   |   |   |   |   | VarDec(max_rst,true,INT,
  |   |   |   |   |   |   |   |   |   (INT,
  |   |   |   |   |   |   |   |   |   | CallExp(max,[
  |   |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   |   |   cdr))))])))],
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   OpExp(GtOp,
  |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   CallExp(get_int,[
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(max_rst)))))),
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   CallExp(get_int,[
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(max_rst)))))))),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   CallExp(get_int,[
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])))),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   StringExp("Illegal argument to min, value: '"))])),
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))]))])),
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   StringExp("'\n"))])),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   IntExp(0))])))))))),
  |   |   |   (progn,[
  |   |   |   | (args,true)],
  |   |   |   | NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   IfExp(
  |   |   |   |   | (INT,
  |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   SimpleVar(args)))),
  |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   NilExp))),
  |   |   |   |   | (NIL,
  |   |   |   |   |   SeqExp[
  |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   StringExp("Cannot apply progn to 0 arguments.\n"))])),
  |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   NilExp)]),
  |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   LetExp([
  |   |   |   |   |   | VarDec(curr_arg,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   |   |   |   car)))))],
  |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   | cdr)))),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   SimpleVar(curr_arg)))),
  |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   CallExp(progn,[
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   | cdr))))]))))))))),
  |   |   |   (map,[
  |   |   |   | (args,true)],
  |   |   |   | NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   IfExp(
  |   |   |   |   | (INT,
  |   |   |   |   |   IfExp(
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   SimpleVar(args)))),
  |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   | cdr)))),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   | cdr)),
  |   |   |   |   |   |   |   |   |   | cdr)))),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   IntExp(0)))))),
  |   |   |   |   | (NIL,
  |   |   |   |   |   SeqExp[
  |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   StringExp("map needs exactly 2 arguments.\n"))])),
  |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   NilExp)]),
  |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   LetExp([
  |   |   |   |   |   | VarDec(fun_arg,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   |   |   |   car))))),
  |   |   |   |   |   | VarDec(lst_arg,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   cdr)),
  |   |   |   |   |   |   |   |   car))))),
  |   |   |   |   |   | FunctionDec[
  |   |   |   |   |   |   (aux,[
  |   |   |   |   |   |   | (args,true)],
  |   |   |   |   |   |   | NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(args)))),
  |   |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp),
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   RecordExp([
  |   |   |   |   |   |   |   |   | (car,
  |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   | CallExp(apply_fun_cbv,[
  |   |   |   |   |   |   |   |   |   |   (NAME Function = RECORD {typ: STRING, name: STRING, pars: NAME parameters, body: NAME sexp, env: NAME env},
  |   |   |   |   |   |   |   |   |   |   | CallExp(get_fun,[
  |   |   |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(fun_arg))))])),
  |   |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   | RecordExp([
  |   |   |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   |   |   |   | car))))),
  |   |   |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   |   |   |   |   NilExp))])),
  |   |   |   |   |   |   |   |   |   |   (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(env))))]))),
  |   |   |   |   |   |   |   |   | (cdr,
  |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   | CallExp(aux,[
  |   |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   |   |   cdr))))])))])))))]],
  |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   CallExp(fun_p,[
  |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   SimpleVar(fun_arg))))])),
  |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   CallExp(sexps_p,[
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(lst_arg))))])),
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   CallExp(aux,[
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   CallExp(get_sexps,[
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(lst_arg))))]))])),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   StringExp("Illegal list argument to map, value: '"))])),
  |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(lst_arg))))]))])),
  |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   StringExp("'\n"))])),
  |   |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   |   NilExp)]))),
  |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   StringExp("Illegal function argument to map, value: '"))])),
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_arg))))]))])),
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   StringExp("'\n"))])),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp)])))))))),
  |   |   |   (foldr,[
  |   |   |   | (args,true)],
  |   |   |   | NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   IfExp(
  |   |   |   |   | (INT,
  |   |   |   |   |   IfExp(
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   SimpleVar(args)))),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   | cdr)))),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp))))),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   | cdr)),
  |   |   |   |   |   |   |   |   |   | cdr)))),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   |   | cdr)),
  |   |   |   |   |   |   |   |   |   |   | cdr)),
  |   |   |   |   |   |   |   |   |   | cdr)))),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   IntExp(0)))))),
  |   |   |   |   | (NIL,
  |   |   |   |   |   SeqExp[
  |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   StringExp("foldr needs exactly 3 arguments.\n"))])),
  |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   NilExp)]),
  |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   LetExp([
  |   |   |   |   |   | VarDec(fun_arg,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   |   |   |   car))))),
  |   |   |   |   |   | VarDec(init_arg,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   cdr)),
  |   |   |   |   |   |   |   |   car))))),
  |   |   |   |   |   | VarDec(lst_arg,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   cdr)),
  |   |   |   |   |   |   |   |   |   cdr)),
  |   |   |   |   |   |   |   |   car))))),
  |   |   |   |   |   | FunctionDec[
  |   |   |   |   |   |   (aux,[
  |   |   |   |   |   |   | (lst,true)],
  |   |   |   |   |   |   | NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(lst)))),
  |   |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   SimpleVar(init_arg)))),
  |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   CallExp(apply_fun_cbv,[
  |   |   |   |   |   |   |   |   | (NAME Function = RECORD {typ: STRING, name: STRING, pars: NAME parameters, body: NAME sexp, env: NAME env},
  |   |   |   |   |   |   |   |   |   CallExp(get_fun,[
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_arg))))])),
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   RecordExp([
  |   |   |   |   |   |   |   |   |   | (car,
  |   |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(lst)),
  |   |   |   |   |   |   |   |   |   |   |   |   car))))),
  |   |   |   |   |   |   |   |   |   | (cdr,
  |   |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   | RecordExp([
  |   |   |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   CallExp(aux,[
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(lst)),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | cdr))))]))),
  |   |   |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   |   |   |   |   NilExp))])))])),
  |   |   |   |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(env))))])))))]],
  |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   CallExp(fun_p,[
  |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   SimpleVar(fun_arg))))])),
  |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   CallExp(sexps_p,[
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(lst_arg))))])),
  |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   CallExp(aux,[
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   CallExp(get_sexps,[
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(lst_arg))))]))])),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   StringExp("Illegal list argument to foldr, value: '"))])),
  |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(lst_arg))))]))])),
  |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   StringExp("'\n"))])),
  |   |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   |   NilExp)]))),
  |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   StringExp("Illegal function argument to foldr, value: '"))])),
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_arg))))]))])),
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   StringExp("'\n"))])),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp)])))))))),
  |   |   |   (foldl,[
  |   |   |   | (args,true)],
  |   |   |   | NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   IfExp(
  |   |   |   |   | (INT,
  |   |   |   |   |   IfExp(
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   SimpleVar(args)))),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   | cdr)))),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp))))),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   | cdr)),
  |   |   |   |   |   |   |   |   |   | cdr)))),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   |   | cdr)),
  |   |   |   |   |   |   |   |   |   |   | cdr)),
  |   |   |   |   |   |   |   |   |   | cdr)))),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   IntExp(0)))))),
  |   |   |   |   | (NIL,
  |   |   |   |   |   SeqExp[
  |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   StringExp("foldl needs exactly 3 arguments.\n"))])),
  |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   NilExp)]),
  |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   LetExp([
  |   |   |   |   |   | VarDec(fun_arg,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   |   |   |   car))))),
  |   |   |   |   |   | VarDec(init_arg,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   cdr)),
  |   |   |   |   |   |   |   |   car))))),
  |   |   |   |   |   | VarDec(lst_arg,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   cdr)),
  |   |   |   |   |   |   |   |   |   cdr)),
  |   |   |   |   |   |   |   |   car))))),
  |   |   |   |   |   | FunctionDec[
  |   |   |   |   |   |   (aux,[
  |   |   |   |   |   |   | (lst,true),
  |   |   |   |   |   |   | (acc,true)],
  |   |   |   |   |   |   | NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(lst)))),
  |   |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   SimpleVar(acc)))),
  |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   CallExp(aux,[
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(lst)),
  |   |   |   |   |   |   |   |   |   |   | cdr)))),
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   CallExp(apply_fun_cbv,[
  |   |   |   |   |   |   |   |   |   | (NAME Function = RECORD {typ: STRING, name: STRING, pars: NAME parameters, body: NAME sexp, env: NAME env},
  |   |   |   |   |   |   |   |   |   |   CallExp(get_fun,[
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_arg))))])),
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   RecordExp([
  |   |   |   |   |   |   |   |   |   |   | (car,
  |   |   |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(lst)),
  |   |   |   |   |   |   |   |   |   |   |   |   |   car))))),
  |   |   |   |   |   |   |   |   |   |   | (cdr,
  |   |   |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   | RecordExp([
  |   |   |   |   |   |   |   |   |   |   |   |   (car,
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(acc))))),
  |   |   |   |   |   |   |   |   |   |   |   |   (cdr,
  |   |   |   |   |   |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   |   |   |   |   |   NilExp))])))])),
  |   |   |   |   |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(env))))]))])))))]],
  |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   CallExp(fun_p,[
  |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   SimpleVar(fun_arg))))])),
  |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   CallExp(sexps_p,[
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(lst_arg))))])),
  |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   CallExp(aux,[
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   CallExp(get_sexps,[
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(lst_arg))))])),
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(init_arg))))])),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   StringExp("Illegal list argument to foldl, value: '"))])),
  |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(lst_arg))))]))])),
  |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   StringExp("'\n"))])),
  |   |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   |   NilExp)]))),
  |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   StringExp("Illegal function argument to foldl, value: '"))])),
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_arg))))]))])),
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   StringExp("'\n"))])),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp)])))))))),
  |   |   |   (orb,[
  |   |   |   | (args,true)],
  |   |   |   | INT,
  |   |   |   | (INT,
  |   |   |   |   IfExp(
  |   |   |   |   | (INT,
  |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   SimpleVar(args)))),
  |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   NilExp))),
  |   |   |   |   | (INT,
  |   |   |   |   |   IntExp(0)),
  |   |   |   |   | (INT,
  |   |   |   |   |   LetExp([
  |   |   |   |   |   | VarDec(curr_arg,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   |   |   |   car)))))],
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   CallExp(bool_p,[
  |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   CallExp(orb,[
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   | cdr))))])),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   CallExp(get_bool,[
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])))),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   StringExp("Illegal argument to orb, value: '"))])),
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))]))])),
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   StringExp("'\n"))])),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   IntExp(0))])))))))),
  |   |   |   (andb,[
  |   |   |   | (args,true)],
  |   |   |   | INT,
  |   |   |   | (INT,
  |   |   |   |   IfExp(
  |   |   |   |   | (INT,
  |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   SimpleVar(args)))),
  |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   NilExp))),
  |   |   |   |   | (INT,
  |   |   |   |   |   IntExp(1)),
  |   |   |   |   | (INT,
  |   |   |   |   |   LetExp([
  |   |   |   |   |   | VarDec(curr_arg,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   |   |   |   car)))))],
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   CallExp(bool_p,[
  |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   CallExp(andb,[
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   | cdr))))])),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   CallExp(get_bool,[
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   IntExp(0)))),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   StringExp("Illegal argument to andb, value: '"))])),
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))]))])),
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   StringExp("'\n"))])),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   IntExp(0))])))))))),
  |   |   |   (notb,[
  |   |   |   | (args,true)],
  |   |   |   | INT,
  |   |   |   | (INT,
  |   |   |   |   IfExp(
  |   |   |   |   | (INT,
  |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   SimpleVar(args)))),
  |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   NilExp))),
  |   |   |   |   | (INT,
  |   |   |   |   |   SeqExp[
  |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   StringExp("Cannot apply notb to 0 arguments.\n"))])),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IntExp(0))]),
  |   |   |   |   | (INT,
  |   |   |   |   |   LetExp([
  |   |   |   |   |   | VarDec(curr_arg,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   |   |   |   car)))))],
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   CallExp(bool_p,[
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   | cdr)))),
  |   |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   IntExp(0)))),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   CallExp(not,[
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   CallExp(get_bool,[
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))]))])),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   CallExp(bool_p,[
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   StringExp("Illegal argument to notb, value: '"))])),
  |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))]))])),
  |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   StringExp("'\n"))])),
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   IntExp(0))]),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   StringExp("Cannot apply notb to more than 1 argument.\n"))])),
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   IntExp(0))])))))))))),
  |   |   |   (lt_str,[
  |   |   |   | (args,true)],
  |   |   |   | INT,
  |   |   |   | (INT,
  |   |   |   |   LetExp([
  |   |   |   |   | FunctionDec[
  |   |   |   |   |   (aux,[
  |   |   |   |   |   | (head,true),
  |   |   |   |   |   | (args,true)],
  |   |   |   |   |   | INT,
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   SimpleVar(args)))),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   LetExp([
  |   |   |   |   |   |   |   | VarDec(curr_arg,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   car)))))],
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   CallExp(str_p,[
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   CallExp(aux,[
  |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   CallExp(get_str,[
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   |   |   | cdr))))])),
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   OpExp(LtOp,
  |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(head)))),
  |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   CallExp(get_str,[
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])))),
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   IntExp(0)))),
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   StringExp("Illegal argument to <s, value: '"))])),
  |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))]))])),
  |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   StringExp("'\n"))])),
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   IntExp(0))]))))))))]],
  |   |   |   |   | (INT,
  |   |   |   |   |   IfExp(
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   SimpleVar(args)))),
  |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   LetExp([
  |   |   |   |   |   |   | VarDec(curr_arg,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   car)))))],
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   CallExp(str_p,[
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   CallExp(aux,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   CallExp(get_str,[
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   | cdr))))])),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   StringExp("Illegal argument to <s, value: '"))])),
  |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))]))])),
  |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   StringExp("'\n"))])),
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   IntExp(0))])))))))))),
  |   |   |   (leq_str,[
  |   |   |   | (args,true)],
  |   |   |   | INT,
  |   |   |   | (INT,
  |   |   |   |   LetExp([
  |   |   |   |   | FunctionDec[
  |   |   |   |   |   (aux,[
  |   |   |   |   |   | (head,true),
  |   |   |   |   |   | (args,true)],
  |   |   |   |   |   | INT,
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   SimpleVar(args)))),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   LetExp([
  |   |   |   |   |   |   |   | VarDec(curr_arg,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   car)))))],
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   CallExp(str_p,[
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   CallExp(aux,[
  |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   CallExp(get_str,[
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   |   |   | cdr))))])),
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   OpExp(LeOp,
  |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(head)))),
  |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   CallExp(get_str,[
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])))),
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   IntExp(0)))),
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   StringExp("Illegal argument to <=s, value: '"))])),
  |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))]))])),
  |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   StringExp("'\n"))])),
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   IntExp(0))]))))))))]],
  |   |   |   |   | (INT,
  |   |   |   |   |   IfExp(
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   SimpleVar(args)))),
  |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   LetExp([
  |   |   |   |   |   |   | VarDec(curr_arg,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   car)))))],
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   CallExp(str_p,[
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   CallExp(aux,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   CallExp(get_str,[
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   | cdr))))])),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   StringExp("Illegal argument to <=s, value: '"))])),
  |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))]))])),
  |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   StringExp("'\n"))])),
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   IntExp(0))])))))))))),
  |   |   |   (eq_str,[
  |   |   |   | (args,true)],
  |   |   |   | INT,
  |   |   |   | (INT,
  |   |   |   |   LetExp([
  |   |   |   |   | FunctionDec[
  |   |   |   |   |   (aux,[
  |   |   |   |   |   | (head,true),
  |   |   |   |   |   | (args,true)],
  |   |   |   |   |   | INT,
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   SimpleVar(args)))),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   LetExp([
  |   |   |   |   |   |   |   | VarDec(curr_arg,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   car)))))],
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   CallExp(str_p,[
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   CallExp(aux,[
  |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(head)))),
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   |   |   | cdr))))])),
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   CallExp(get_str,[
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(head)))))),
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   IntExp(0)))),
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   StringExp("Illegal argument to =s, value: '"))])),
  |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))]))])),
  |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   StringExp("'\n"))])),
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   IntExp(0))]))))))))]],
  |   |   |   |   | (INT,
  |   |   |   |   |   IfExp(
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   SimpleVar(args)))),
  |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   LetExp([
  |   |   |   |   |   |   | VarDec(curr_arg,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   car)))))],
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   CallExp(str_p,[
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   CallExp(aux,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   CallExp(get_str,[
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   | cdr))))])),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   StringExp("Illegal argument to =s, value: '"))])),
  |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))]))])),
  |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   StringExp("'\n"))])),
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   IntExp(0))])))))))))),
  |   |   |   (neq_str,[
  |   |   |   | (args,true)],
  |   |   |   | INT,
  |   |   |   | (INT,
  |   |   |   |   LetExp([
  |   |   |   |   | FunctionDec[
  |   |   |   |   |   (aux,[
  |   |   |   |   |   | (head,true),
  |   |   |   |   |   | (args,true)],
  |   |   |   |   |   | INT,
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   SimpleVar(args)))),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   LetExp([
  |   |   |   |   |   |   |   | VarDec(curr_arg,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   car)))))],
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   CallExp(str_p,[
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   CallExp(aux,[
  |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(head)))),
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   |   |   | cdr))))])),
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   CallExp(get_str,[
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(head)))))),
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   IntExp(0)))),
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   StringExp("Illegal argument to !=s, value: '"))])),
  |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))]))])),
  |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   StringExp("'\n"))])),
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   IntExp(0))]))))))))]],
  |   |   |   |   | (INT,
  |   |   |   |   |   IfExp(
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   SimpleVar(args)))),
  |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   LetExp([
  |   |   |   |   |   |   | VarDec(curr_arg,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   car)))))],
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   CallExp(str_p,[
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   CallExp(aux,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   CallExp(get_str,[
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   | cdr))))])),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   StringExp("Illegal argument to !=s, value: '"))])),
  |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))]))])),
  |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   StringExp("'\n"))])),
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   IntExp(0))])))))))))),
  |   |   |   (geq_str,[
  |   |   |   | (args,true)],
  |   |   |   | INT,
  |   |   |   | (INT,
  |   |   |   |   LetExp([
  |   |   |   |   | FunctionDec[
  |   |   |   |   |   (aux,[
  |   |   |   |   |   | (head,true),
  |   |   |   |   |   | (args,true)],
  |   |   |   |   |   | INT,
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   SimpleVar(args)))),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   LetExp([
  |   |   |   |   |   |   |   | VarDec(curr_arg,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   car)))))],
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   CallExp(str_p,[
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   CallExp(aux,[
  |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   CallExp(get_str,[
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   |   |   | cdr))))])),
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   OpExp(GeOp,
  |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(head)))),
  |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   CallExp(get_str,[
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])))),
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   IntExp(0)))),
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   StringExp("Illegal argument to >=s, value: '"))])),
  |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))]))])),
  |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   StringExp("'\n"))])),
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   IntExp(0))]))))))))]],
  |   |   |   |   | (INT,
  |   |   |   |   |   IfExp(
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   SimpleVar(args)))),
  |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   LetExp([
  |   |   |   |   |   |   | VarDec(curr_arg,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   car)))))],
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   CallExp(str_p,[
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   CallExp(aux,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   CallExp(get_str,[
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   | cdr))))])),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   StringExp("Illegal argument to >=s, value: '"))])),
  |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))]))])),
  |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   StringExp("'\n"))])),
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   IntExp(0))])))))))))),
  |   |   |   (gt_str,[
  |   |   |   | (args,true)],
  |   |   |   | INT,
  |   |   |   | (INT,
  |   |   |   |   LetExp([
  |   |   |   |   | FunctionDec[
  |   |   |   |   |   (aux,[
  |   |   |   |   |   | (head,true),
  |   |   |   |   |   | (args,true)],
  |   |   |   |   |   | INT,
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   SimpleVar(args)))),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   LetExp([
  |   |   |   |   |   |   |   | VarDec(curr_arg,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   car)))))],
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   CallExp(str_p,[
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   CallExp(aux,[
  |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   CallExp(get_str,[
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   |   |   | cdr))))])),
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   OpExp(GtOp,
  |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(head)))),
  |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   CallExp(get_str,[
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])))),
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   IntExp(0)))),
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   StringExp("Illegal argument to >s, value: '"))])),
  |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))]))])),
  |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   StringExp("'\n"))])),
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   IntExp(0))]))))))))]],
  |   |   |   |   | (INT,
  |   |   |   |   |   IfExp(
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   SimpleVar(args)))),
  |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   LetExp([
  |   |   |   |   |   |   | VarDec(curr_arg,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   car)))))],
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   CallExp(str_p,[
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   CallExp(aux,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   CallExp(get_str,[
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   | cdr))))])),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   StringExp("Illegal argument to >s, value: '"))])),
  |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))]))])),
  |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   StringExp("'\n"))])),
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   IntExp(0))])))))))))),
  |   |   |   (append_str,[
  |   |   |   | (args,true)],
  |   |   |   | STRING,
  |   |   |   | (STRING,
  |   |   |   |   IfExp(
  |   |   |   |   | (INT,
  |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   SimpleVar(args)))),
  |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   NilExp))),
  |   |   |   |   | (STRING,
  |   |   |   |   |   StringExp("")),
  |   |   |   |   | (STRING,
  |   |   |   |   |   LetExp([
  |   |   |   |   |   | VarDec(curr_arg,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   |   |   |   car)))))],
  |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   CallExp(str_p,[
  |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   CallExp(concat,[
  |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   CallExp(get_str,[
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   CallExp(append_str,[
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   | cdr))))]))])),
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   StringExp("Illegal argument to +s, value: '"))])),
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))]))])),
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   StringExp("'\n"))])),
  |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   StringExp(""))])))))))),
  |   |   |   (str_to_int,[
  |   |   |   | (args,true)],
  |   |   |   | INT,
  |   |   |   | (INT,
  |   |   |   |   IfExp(
  |   |   |   |   | (INT,
  |   |   |   |   |   IfExp(
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   SimpleVar(args)))),
  |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   | cdr)))),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   | cdr)),
  |   |   |   |   |   |   |   |   |   | cdr)))),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   IntExp(0)))))),
  |   |   |   |   | (INT,
  |   |   |   |   |   SeqExp[
  |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   StringExp("s->i needs exactly 1 argument.\n"))])),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IntExp(0))]),
  |   |   |   |   | (INT,
  |   |   |   |   |   LetExp([
  |   |   |   |   |   | VarDec(curr_arg,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   |   |   |   car)))))],
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   CallExp(str_p,[
  |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   CallExp(s2i,[
  |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   CallExp(get_str,[
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))]))])),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   StringExp("Illegal argument to s->i, value: '"))])),
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))]))])),
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   StringExp("'\n"))])),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   IntExp(0))])))))))),
  |   |   |   (int_to_str,[
  |   |   |   | (args,true)],
  |   |   |   | STRING,
  |   |   |   | (STRING,
  |   |   |   |   IfExp(
  |   |   |   |   | (INT,
  |   |   |   |   |   IfExp(
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   SimpleVar(args)))),
  |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   | cdr)))),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   | cdr)),
  |   |   |   |   |   |   |   |   |   | cdr)))),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   IntExp(0)))))),
  |   |   |   |   | (STRING,
  |   |   |   |   |   SeqExp[
  |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   StringExp("i->s needs exactly 1 argument.\n"))])),
  |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   StringExp(""))]),
  |   |   |   |   | (STRING,
  |   |   |   |   |   LetExp([
  |   |   |   |   |   | VarDec(curr_arg,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   |   |   |   car)))))],
  |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   CallExp(int_p,[
  |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   CallExp(i2s,[
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   CallExp(get_int,[
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))]))])),
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   StringExp("Illegal argument to i->s, value: '"))])),
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))]))])),
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   StringExp("'\n"))])),
  |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   StringExp(""))])))))))),
  |   |   |   (substring_,[
  |   |   |   | (args,true)],
  |   |   |   | STRING,
  |   |   |   | (STRING,
  |   |   |   |   IfExp(
  |   |   |   |   | (INT,
  |   |   |   |   |   IfExp(
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(args)))),
  |   |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   | cdr)))),
  |   |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   |   NilExp))))),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   | cdr)),
  |   |   |   |   |   |   |   |   |   | cdr)))),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp))))),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   | cdr)),
  |   |   |   |   |   |   |   |   |   | cdr)))),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   |   | cdr)),
  |   |   |   |   |   |   |   |   |   |   | cdr)),
  |   |   |   |   |   |   |   |   |   | cdr)))),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   IntExp(0)))))),
  |   |   |   |   | (STRING,
  |   |   |   |   |   SeqExp[
  |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   StringExp("substring needs exactly 3 arguments.\n"))])),
  |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   StringExp(""))]),
  |   |   |   |   | (STRING,
  |   |   |   |   |   LetExp([
  |   |   |   |   |   | VarDec(str_arg,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   |   |   |   car))))),
  |   |   |   |   |   | VarDec(idx_arg,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   cdr)),
  |   |   |   |   |   |   |   |   car))))),
  |   |   |   |   |   | VarDec(len_arg,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   cdr)),
  |   |   |   |   |   |   |   |   |   cdr)),
  |   |   |   |   |   |   |   |   car)))))],
  |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   CallExp(str_p,[
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(str_arg))))])),
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   CallExp(int_p,[
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(idx_arg))))])),
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   IntExp(0)))),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   CallExp(int_p,[
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(len_arg))))])),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   IntExp(0)))),
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   CallExp(substring,[
  |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   CallExp(get_str,[
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(str_arg))))])),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   CallExp(get_int,[
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(idx_arg))))])),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   CallExp(get_int,[
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(len_arg))))]))])),
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   StringExp("Illegal argument to substring, values: '"))])),
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(str_arg))))]))])),
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   StringExp("', '"))])),
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(idx_arg))))]))])),
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   StringExp("', '"))])),
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(len_arg))))]))])),
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   StringExp("'\n"))])),
  |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   StringExp(""))])))))))),
  |   |   |   (print_,[
  |   |   |   | (args,true)],
  |   |   |   | NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   IfExp(
  |   |   |   |   | (INT,
  |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   SimpleVar(args)))),
  |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   NilExp))),
  |   |   |   |   | (NIL,
  |   |   |   |   |   NilExp),
  |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   LetExp([
  |   |   |   |   |   | VarDec(curr_arg,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   |   |   |   car)))))],
  |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   CallExp(str_p,[
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   CallExp(get_str,[
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))]))])),
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))]))])))),
  |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   CallExp(print_,[
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   | cdr))))]))])))))),
  |   |   |   (newline,[
  |   |   |   | (args,true)],
  |   |   |   | NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   | (NIL,
  |   |   |   |   IfExp(
  |   |   |   |   | (INT,
  |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   SimpleVar(args)))),
  |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   NilExp))),
  |   |   |   |   | (NIL,
  |   |   |   |   |   SeqExp[
  |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   StringExp("\n"))])),
  |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   NilExp)]),
  |   |   |   |   | (NIL,
  |   |   |   |   |   SeqExp[
  |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   StringExp("newline takes exactly 0 arguments.\n"))])),
  |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   NilExp)])))),
  |   |   |   (read_char_,[
  |   |   |   | (args,true)],
  |   |   |   | STRING,
  |   |   |   | (STRING,
  |   |   |   |   IfExp(
  |   |   |   |   | (INT,
  |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   SimpleVar(args)))),
  |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   NilExp))),
  |   |   |   |   | (STRING,
  |   |   |   |   |   CallExp(getchar,[])),
  |   |   |   |   | (STRING,
  |   |   |   |   |   SeqExp[
  |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   StringExp("read-char takes exactly 0 arguments.\n"))])),
  |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   StringExp(""))])))),
  |   |   |   (read_line_,[
  |   |   |   | (args,true)],
  |   |   |   | STRING,
  |   |   |   | (STRING,
  |   |   |   |   IfExp(
  |   |   |   |   | (INT,
  |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   SimpleVar(args)))),
  |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   NilExp))),
  |   |   |   |   | (STRING,
  |   |   |   |   |   LetExp([
  |   |   |   |   |   | VarDec(nxt_char,true,STRING,
  |   |   |   |   |   |   (STRING,
  |   |   |   |   |   |   | CallExp(getchar,[]))),
  |   |   |   |   |   | VarDec(res,true,STRING,
  |   |   |   |   |   |   (STRING,
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   (STRING,
  |   |   |   |   |   |   |   | SimpleVar(nxt_char)))))],
  |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   WhileExp(
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   SimpleVar(nxt_char)))),
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   StringExp("\n")))),
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   AssignExp(
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   SimpleVar(nxt_char)),
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   CallExp(getchar,[])))),
  |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   AssignExp(
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   SimpleVar(res)),
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   CallExp(concat,[
  |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(res)))),
  |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(nxt_char))))]))))]))),
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   SimpleVar(res))))]))),
  |   |   |   |   | (STRING,
  |   |   |   |   |   SeqExp[
  |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   StringExp("read-line takes exactly 0 arguments.\n"))])),
  |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   StringExp(""))])))),
  |   |   |   (ord_,[
  |   |   |   | (args,true)],
  |   |   |   | INT,
  |   |   |   | (INT,
  |   |   |   |   IfExp(
  |   |   |   |   | (INT,
  |   |   |   |   |   IfExp(
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   SimpleVar(args)))),
  |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   | cdr)))),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   | cdr)),
  |   |   |   |   |   |   |   |   |   | cdr)))),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   IntExp(0)))))),
  |   |   |   |   | (INT,
  |   |   |   |   |   SeqExp[
  |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   StringExp("ord needs exactly 1 argument.\n"))])),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IntExp(0))]),
  |   |   |   |   | (INT,
  |   |   |   |   |   LetExp([
  |   |   |   |   |   | VarDec(curr_arg,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   |   |   |   car)))))],
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   CallExp(str_p,[
  |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   CallExp(ord,[
  |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   CallExp(get_str,[
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))]))])),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   StringExp("Illegal argument to ord, value: '"))])),
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))]))])),
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   StringExp("'\n"))])),
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   IntExp(0))])))))))),
  |   |   |   (chr_,[
  |   |   |   | (args,true)],
  |   |   |   | STRING,
  |   |   |   | (STRING,
  |   |   |   |   IfExp(
  |   |   |   |   | (INT,
  |   |   |   |   |   IfExp(
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   SimpleVar(args)))),
  |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   | cdr)))),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   | cdr)),
  |   |   |   |   |   |   |   |   |   | cdr)))),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   IntExp(0)))))),
  |   |   |   |   | (STRING,
  |   |   |   |   |   SeqExp[
  |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   StringExp("chr needs exactly 1 argument.\n"))])),
  |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   StringExp(""))]),
  |   |   |   |   | (STRING,
  |   |   |   |   |   LetExp([
  |   |   |   |   |   | VarDec(curr_arg,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   |   |   |   car)))))],
  |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   CallExp(int_p,[
  |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   CallExp(chr,[
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   CallExp(get_int,[
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))]))])),
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   StringExp("Illegal argument to chr, value: '"))])),
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))]))])),
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   StringExp("'\n"))])),
  |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   StringExp(""))])))))))),
  |   |   |   (list,[
  |   |   |   | (args,true)],
  |   |   |   | NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   VarExp(
  |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   SimpleVar(args))))),
  |   |   |   (cons,[
  |   |   |   | (args,true)],
  |   |   |   | NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   IfExp(
  |   |   |   |   | (INT,
  |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   SimpleVar(args)))),
  |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   NilExp))),
  |   |   |   |   | (NIL,
  |   |   |   |   |   SeqExp[
  |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   StringExp("Cannot apply cons to 0 arguments\n"))])),
  |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   NilExp)]),
  |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   LetExp([
  |   |   |   |   |   | VarDec(curr_arg,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   |   |   |   car)))))],
  |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   | cdr)))),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   CallExp(sexps_p,[
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   CallExp(get_sexps,[
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   StringExp("Last argument to cons has to be a list. It was '"))])),
  |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))]))])),
  |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   StringExp("'\n"))])),
  |   |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   |   NilExp)]))),
  |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   RecordExp([
  |   |   |   |   |   |   |   | (car,
  |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   | SimpleVar(curr_arg))))),
  |   |   |   |   |   |   |   | (cdr,
  |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   | CallExp(cons,[
  |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   |   cdr))))])))]))))))))),
  |   |   |   (car,[
  |   |   |   | (args,true)],
  |   |   |   | NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   IfExp(
  |   |   |   |   | (INT,
  |   |   |   |   |   IfExp(
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   SimpleVar(args)))),
  |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   | cdr)))),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   | cdr)),
  |   |   |   |   |   |   |   |   |   | cdr)))),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   IntExp(0)))))),
  |   |   |   |   | (NIL,
  |   |   |   |   |   SeqExp[
  |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   StringExp("car needs exactly 1 argument\n"))])),
  |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   NilExp)]),
  |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   LetExp([
  |   |   |   |   |   | VarDec(curr_arg,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   |   |   |   car)))))],
  |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   CallExp(sexps_p,[
  |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   LetExp([
  |   |   |   |   |   |   |   | VarDec(curr_arg_content,true,NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   | CallExp(get_sexps,[
  |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   | SimpleVar(curr_arg))))])))],
  |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg_content)),
  |   |   |   |   |   |   |   |   |   | car)))))),
  |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   StringExp("Illegal argument to car, value: '"))])),
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))]))])),
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   StringExp("'\n"))])),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp)])))))))),
  |   |   |   (cdr,[
  |   |   |   | (args,true)],
  |   |   |   | NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   IfExp(
  |   |   |   |   | (INT,
  |   |   |   |   |   IfExp(
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   SimpleVar(args)))),
  |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   | cdr)))),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   | cdr)),
  |   |   |   |   |   |   |   |   |   | cdr)))),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   IntExp(0)))))),
  |   |   |   |   | (NIL,
  |   |   |   |   |   SeqExp[
  |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   StringExp("cdr needs exactly 1 argument\n"))])),
  |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   NilExp)]),
  |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   LetExp([
  |   |   |   |   |   | VarDec(curr_arg,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   |   |   |   car)))))],
  |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   CallExp(sexps_p,[
  |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   LetExp([
  |   |   |   |   |   |   |   | VarDec(curr_arg_content,true,NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   | CallExp(get_sexps,[
  |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   | SimpleVar(curr_arg))))])))],
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg_content)))),
  |   |   |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg_content)),
  |   |   |   |   |   |   |   |   |   |   | cdr)))),
  |   |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   StringExp("Cannot apply cdr to an empty list\n"))])),
  |   |   |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   |   |   NilExp)]))))),
  |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   StringExp("Illegal argument to cdr, value: '"))])),
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))]))])),
  |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   StringExp("'\n"))])),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp)])))))))),
  |   |   |   (intp,[
  |   |   |   | (args,true)],
  |   |   |   | INT,
  |   |   |   | (INT,
  |   |   |   |   IfExp(
  |   |   |   |   | (INT,
  |   |   |   |   |   IfExp(
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   SimpleVar(args)))),
  |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   | cdr)))),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   | cdr)),
  |   |   |   |   |   |   |   |   |   | cdr)))),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   IntExp(0)))))),
  |   |   |   |   | (INT,
  |   |   |   |   |   SeqExp[
  |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   StringExp("int? needs exactly 1 argument.\n"))])),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IntExp(0))]),
  |   |   |   |   | (INT,
  |   |   |   |   |   LetExp([
  |   |   |   |   |   | VarDec(curr_arg,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   |   |   |   car)))))],
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   CallExp(int_p,[
  |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))]))))))),
  |   |   |   (stringp,[
  |   |   |   | (args,true)],
  |   |   |   | INT,
  |   |   |   | (INT,
  |   |   |   |   IfExp(
  |   |   |   |   | (INT,
  |   |   |   |   |   IfExp(
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   SimpleVar(args)))),
  |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   | cdr)))),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   | cdr)),
  |   |   |   |   |   |   |   |   |   | cdr)))),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   IntExp(0)))))),
  |   |   |   |   | (INT,
  |   |   |   |   |   SeqExp[
  |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   StringExp("string? needs exactly 1 argument.\n"))])),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IntExp(0))]),
  |   |   |   |   | (INT,
  |   |   |   |   |   LetExp([
  |   |   |   |   |   | VarDec(curr_arg,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   |   |   |   car)))))],
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   CallExp(str_p,[
  |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))]))))))),
  |   |   |   (listp,[
  |   |   |   | (args,true)],
  |   |   |   | INT,
  |   |   |   | (INT,
  |   |   |   |   IfExp(
  |   |   |   |   | (INT,
  |   |   |   |   |   IfExp(
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   SimpleVar(args)))),
  |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   | cdr)))),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   | cdr)),
  |   |   |   |   |   |   |   |   |   | cdr)))),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   IntExp(0)))))),
  |   |   |   |   | (INT,
  |   |   |   |   |   SeqExp[
  |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   StringExp("list? needs exactly 1 argument.\n"))])),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IntExp(0))]),
  |   |   |   |   | (INT,
  |   |   |   |   |   LetExp([
  |   |   |   |   |   | VarDec(curr_arg,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   |   |   |   car)))))],
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   CallExp(sexps_p,[
  |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))]))))))),
  |   |   |   (nilp,[
  |   |   |   | (args,true)],
  |   |   |   | INT,
  |   |   |   | (INT,
  |   |   |   |   IfExp(
  |   |   |   |   | (INT,
  |   |   |   |   |   IfExp(
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   SimpleVar(args)))),
  |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   | cdr)))),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   | cdr)),
  |   |   |   |   |   |   |   |   |   | cdr)))),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   IntExp(0)))))),
  |   |   |   |   | (INT,
  |   |   |   |   |   SeqExp[
  |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   StringExp("nil? needs exactly 1 argument.\n"))])),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IntExp(0))]),
  |   |   |   |   | (INT,
  |   |   |   |   |   LetExp([
  |   |   |   |   |   | VarDec(curr_arg,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   |   |   |   car)))))],
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   CallExp(sexps_p,[
  |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   CallExp(get_sexps,[
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   IntExp(0))))))))),
  |   |   |   (funp,[
  |   |   |   | (args,true)],
  |   |   |   | INT,
  |   |   |   | (INT,
  |   |   |   |   IfExp(
  |   |   |   |   | (INT,
  |   |   |   |   |   IfExp(
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   SimpleVar(args)))),
  |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IntExp(1)),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   | cdr)))),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   |   | cdr)),
  |   |   |   |   |   |   |   |   |   | cdr)))),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   IntExp(0)))))),
  |   |   |   |   | (INT,
  |   |   |   |   |   SeqExp[
  |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   StringExp("fun? needs exactly 1 argument.\n"))])),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IntExp(0))]),
  |   |   |   |   | (INT,
  |   |   |   |   |   LetExp([
  |   |   |   |   |   | VarDec(curr_arg,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   |   |   |   car)))))],
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   CallExp(fun_p,[
  |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))]))))))),
  |   |   |   (exit_,[
  |   |   |   | (args,true)],
  |   |   |   | NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   | (NIL,
  |   |   |   |   IfExp(
  |   |   |   |   | (INT,
  |   |   |   |   |   IfExp(
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   SimpleVar(args)))),
  |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   OpExp(NeqOp,
  |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   FieldVar(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   SimpleVar(args)),
  |   |   |   |   |   |   |   |   | cdr)))),
  |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   IntExp(0)))),
  |   |   |   |   | (NIL,
  |   |   |   |   |   SeqExp[
  |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   StringExp("exit cannot be used with more that 1 argument.\n"))])),
  |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   NilExp)]),
  |   |   |   |   | (NIL,
  |   |   |   |   |   IfExp(
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   SimpleVar(args)))),
  |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   NilExp))),
  |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   CallExp(exit,[
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   IntExp(0))])),
  |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   NilExp)]),
  |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   LetExp([
  |   |   |   |   |   |   | VarDec(curr_arg,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   |   |   (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   | SimpleVar(args)),
  |   |   |   |   |   |   |   |   |   car)))))],
  |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   CallExp(int_p,[
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))])),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   CallExp(exit,[
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   CallExp(get_int,[
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))]))])),
  |   |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   |   NilExp)]),
  |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   StringExp("Illegal argument to exit, value: '"))])),
  |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(curr_arg))))]))])),
  |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   StringExp("'\n"))])),
  |   |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   |   NilExp)])))))))))),
  |   |   |   (help,[
  |   |   |   | (args,true)],
  |   |   |   | NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   | (NIL,
  |   |   |   |   SeqExp[
  |   |   |   |   | (VOID,
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   StringExp("All available entries in the environment at this point are:\n"))])),
  |   |   |   |   | (VOID,
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   CallExp(env2s_short,[
  |   |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   |   |   SimpleVar(env))))]))])),
  |   |   |   |   | (VOID,
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   StringExp("\nI hope you find something useful. Oh, and execute '(exit)' to exit.\n"))])),
  |   |   |   |   | (NIL,
  |   |   |   |   |   NilExp)]))]],
  |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   IfExp(
  |   |   |   | (INT,
  |   |   |   |   OpExp(EqOp,
  |   |   |   |   | (STRING,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   SimpleVar(fun_name)))),
  |   |   |   |   | (STRING,
  |   |   |   |   |   StringExp("+")))),
  |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   CallExp(mk_int,[
  |   |   |   |   | (INT,
  |   |   |   |   |   CallExp(plus,[
  |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   SimpleVar(args))))]))])),
  |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   IfExp(
  |   |   |   |   | (INT,
  |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   SimpleVar(fun_name)))),
  |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   StringExp("-")))),
  |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   CallExp(mk_int,[
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   CallExp(minus,[
  |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   SimpleVar(args))))]))])),
  |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   IfExp(
  |   |   |   |   |   | (INT,
  |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   SimpleVar(fun_name)))),
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   StringExp("*")))),
  |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   CallExp(mk_int,[
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   CallExp(times,[
  |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   SimpleVar(args))))]))])),
  |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   SimpleVar(fun_name)))),
  |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   StringExp("/")))),
  |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   CallExp(mk_int,[
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   CallExp(div,[
  |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   SimpleVar(args))))]))])),
  |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_name)))),
  |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   StringExp("^")))),
  |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   CallExp(mk_int,[
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   CallExp(expt,[
  |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args))))]))])),
  |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_name)))),
  |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   StringExp("<")))),
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   CallExp(mk_bool,[
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   CallExp(lt_int,[
  |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args))))]))])),
  |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_name)))),
  |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   StringExp("<=")))),
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   CallExp(mk_bool,[
  |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   CallExp(leq_int,[
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args))))]))])),
  |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_name)))),
  |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   StringExp("=")))),
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_bool,[
  |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   CallExp(eq_int,[
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args))))]))])),
  |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_name)))),
  |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("!=")))),
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_bool,[
  |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(neq_int,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args))))]))])),
  |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_name)))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp(">=")))),
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_bool,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(geq_int,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args))))]))])),
  |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_name)))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp(">")))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_bool,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(gt_int,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args))))]))])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_name)))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("min")))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_int,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(min,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args))))]))])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_name)))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("max")))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_int,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(max,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args))))]))])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_name)))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("progn")))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(progn,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args))))])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_name)))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("map")))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_sexps,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(map,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args))))]))])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_name)))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("foldr")))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(foldr,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args))))])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_name)))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("foldl")))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(foldl,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args))))])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_name)))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("orb")))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_bool,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(orb,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args))))]))])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_name)))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("andb")))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_bool,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(andb,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args))))]))])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_name)))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("notb")))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_bool,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(andb,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args))))]))])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_name)))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("<s")))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_bool,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(lt_str,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args))))]))])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_name)))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("<=s")))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_bool,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(leq_str,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args))))]))])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_name)))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("=s")))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_bool,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(eq_str,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args))))]))])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_name)))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("!=s")))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_bool,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(neq_str,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args))))]))])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_name)))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp(">=s")))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_bool,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(geq_str,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args))))]))])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_name)))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp(">s")))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_bool,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(gt_str,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args))))]))])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_name)))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("+s")))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_str,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(append_str,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args))))]))])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_name)))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("s->i")))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_int,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(str_to_int,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args))))]))])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_name)))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("i->s")))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_str,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(int_to_str,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args))))]))])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_name)))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("substring")))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_str,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(substring_,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args))))]))])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_name)))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("print")))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_sexps,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(print_,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args))))]))])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_name)))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("newline")))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_sexps,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(newline,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args))))]))])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_name)))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("read-char")))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_str,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(read_char_,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args))))]))])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_name)))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("read-line")))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_str,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(read_line_,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args))))]))])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_name)))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("ord")))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_int,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(ord_,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args))))]))])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_name)))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("chr")))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_str,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(chr_,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args))))]))])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_name)))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("list")))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_sexps,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(list,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args))))]))])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_name)))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("cons")))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_sexps,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(cons,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args))))]))])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_name)))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("car")))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(car,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args))))])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_name)))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("cdr")))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_sexps,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(cdr,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args))))]))])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_name)))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("int?")))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_bool,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(intp,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args))))]))])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_name)))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("string?")))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_bool,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(stringp,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args))))]))])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_name)))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("list?")))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_bool,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(listp,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args))))]))])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_name)))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("nil?")))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_bool,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(nilp,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args))))]))])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_name)))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("fun?")))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_bool,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(funp,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args))))]))])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_name)))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("exit")))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_sexps,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(exit_,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args))))]))])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   IfExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (INT,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   OpExp(EqOp,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_name)))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("help")))),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(mk_sexps,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(help,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NAME sexps = RECORD {car: NAME sexp, cdr: NAME sexps},
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(args))))]))])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SeqExp[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("Interpreter error: Unknown internal function '"))])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   SimpleVar(fun_name))))])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (VOID,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   StringExp("' --- Perhaps it has not been implemented yet.\n"))])),
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   | (NIL,
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   NilExp)]))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))],
  | VarDec(prompt,true,STRING,
  |   (STRING,
  |   | StringExp(">>> ")))],
  | (INT,
  |   SeqExp[
  |   | (VOID,
  |   |   IfExp(
  |   |   | (INT,
  |   |   |   VarExp(
  |   |   |   | (INT,
  |   |   |   |   SimpleVar(use_dummy)))),
  |   |   | (VOID,
  |   |   |   SeqExp[
  |   |   |   | (VOID,
  |   |   |   |   CallExp(print,[
  |   |   |   |   | (STRING,
  |   |   |   |   |   StringExp("The dummy input is:\n"))])),
  |   |   |   | (VOID,
  |   |   |   |   CallExp(print,[
  |   |   |   |   | (STRING,
  |   |   |   |   |   VarExp(
  |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   SimpleVar(dummy_input))))])),
  |   |   |   | (VOID,
  |   |   |   |   CallExp(print,[
  |   |   |   |   | (STRING,
  |   |   |   |   |   StringExp("\n"))]))]))),
  |   | (VOID,
  |   |   CallExp(print,[
  |   |   | (STRING,
  |   |   |   StringExp("Let's spin the REPL... use (exit) if you get too dizzy\n"))])),
  |   | (VOID,
  |   |   CallExp(print,[
  |   |   | (STRING,
  |   |   |   VarExp(
  |   |   |   | (STRING,
  |   |   |   |   SimpleVar(prompt))))])),
  |   | (VOID,
  |   |   CallExp(init_repl,[])),
  |   | (VOID,
  |   |   WhileExp(
  |   |   | (INT,
  |   |   |   IntExp(1)),
  |   |   | (VOID,
  |   |   |   LetExp([
  |   |   |   | VarDec(tokens,true,NAME tokens = NAME deque,
  |   |   |   |   (NAME tokens = NAME deque,
  |   |   |   |   | CallExp(read_sexp_to_tokens,[]))),
  |   |   |   | VarDec(sexp,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   | CallExp(parse_tokens,[
  |   |   |   |   |   (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   (NAME tokens = NAME deque,
  |   |   |   |   |   |   |   | SimpleVar(tokens)),
  |   |   |   |   |   |   |   leftmost)))),
  |   |   |   |   |   (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   (NAME deque_elem = RECORD {val: NAME deque_content_type, left: NAME deque_elem, right: NAME deque_elem},
  |   |   |   |   |   |   | FieldVar(
  |   |   |   |   |   |   |   (NAME tokens = NAME deque,
  |   |   |   |   |   |   |   | SimpleVar(tokens)),
  |   |   |   |   |   |   |   rightmost))))]))),
  |   |   |   | VarDec(result,true,NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   | CallExp(eval,[
  |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   | SimpleVar(sexp)))),
  |   |   |   |   |   (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   | VarExp(
  |   |   |   |   |   |   (NAME env = RECORD {car: NAME env_entry, cdr: NAME env},
  |   |   |   |   |   |   | SimpleVar(initial_env))))])))],
  |   |   |   | (VOID,
  |   |   |   |   SeqExp[
  |   |   |   |   | (VOID,
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   CallExp(sexp2s,[
  |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   |   | (NAME sexp = RECORD {int: NAME Int, bool: NAME Int, str: NAME String, sym: NAME String, fun: NAME Function, sexps: NAME List},
  |   |   |   |   |   |   |   |   SimpleVar(result))))]))])),
  |   |   |   |   | (VOID,
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   StringExp("\n"))])),
  |   |   |   |   | (VOID,
  |   |   |   |   |   CallExp(print,[
  |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   VarExp(
  |   |   |   |   |   |   | (STRING,
  |   |   |   |   |   |   |   SimpleVar(prompt))))]))]))))),
  |   | (INT,
  |   |   IntExp(0))])))
